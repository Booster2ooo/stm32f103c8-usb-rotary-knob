
stm32f103c8-usb-rotary-knob.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8c8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800d9d8  0800d9d8  0001d9d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de30  0800de30  0002035c  2**0
                  CONTENTS
  4 .ARM          00000000  0800de30  0800de30  0002035c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800de30  0800de30  0002035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de30  0800de30  0001de30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de34  0800de34  0001de34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  0800de38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c4  2000035c  0800e194  0002035c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001820  0800e194  00021820  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025fbd  00000000  00000000  00020385  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f5d  00000000  00000000  00046342  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001550  00000000  00000000  0004b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001338  00000000  00000000  0004c7f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b9f9  00000000  00000000  0004db28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016f55  00000000  00000000  00069521  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c5c2  00000000  00000000  00080476  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fca38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068ec  00000000  00000000  000fcab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000084  00000000  00000000  001033a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  00103424  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000035c 	.word	0x2000035c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d9c0 	.word	0x0800d9c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000360 	.word	0x20000360
 800014c:	0800d9c0 	.word	0x0800d9c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_Init+0x28>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_Init+0x28>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f8cd 	bl	8000f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f007 fd48 	bl	8008830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f007 fd0e 	bl	80087c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40022000 	.word	0x40022000

08000db0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <HAL_IncTick+0x1c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_IncTick+0x20>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <HAL_IncTick+0x20>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000734 	.word	0x20000734

08000dd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b02      	ldr	r3, [pc, #8]	; (8000de4 <HAL_GetTick+0x10>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	20000734 	.word	0x20000734

08000de8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <NVIC_SetPriorityGrouping+0x44>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1a:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <NVIC_SetPriorityGrouping+0x44>)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	60d3      	str	r3, [r2, #12]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4906      	ldr	r1, [pc, #24]	; (8000e78 <NVIC_EnableIRQ+0x2c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100

08000e7c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	da0b      	bge.n	8000ea8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <NVIC_SetPriority+0x4c>)
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 030f 	and.w	r3, r3, #15
 8000e9c:	3b04      	subs	r3, #4
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea6:	e009      	b.n	8000ebc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4907      	ldr	r1, [pc, #28]	; (8000ecc <NVIC_SetPriority+0x50>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff53 	bl	8000de8 <NVIC_SetPriorityGrouping>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5c:	f7ff ff68 	bl	8000e30 <NVIC_GetPriorityGrouping>
 8000f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f7ff ffb2 	bl	8000ed0 <NVIC_EncodePriority>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff81 	bl	8000e7c <NVIC_SetPriority>
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5b 	bl	8000e4c <NVIC_EnableIRQ>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b08b      	sub	sp, #44	; 0x2c
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc2:	e127      	b.n	8001214 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f040 8116 	bne.w	800120e <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b12      	cmp	r3, #18
 8000fe8:	d034      	beq.n	8001054 <HAL_GPIO_Init+0xb4>
 8000fea:	2b12      	cmp	r3, #18
 8000fec:	d80d      	bhi.n	800100a <HAL_GPIO_Init+0x6a>
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d02b      	beq.n	800104a <HAL_GPIO_Init+0xaa>
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d804      	bhi.n	8001000 <HAL_GPIO_Init+0x60>
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d031      	beq.n	800105e <HAL_GPIO_Init+0xbe>
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d01c      	beq.n	8001038 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ffe:	e048      	b.n	8001092 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001000:	2b03      	cmp	r3, #3
 8001002:	d043      	beq.n	800108c <HAL_GPIO_Init+0xec>
 8001004:	2b11      	cmp	r3, #17
 8001006:	d01b      	beq.n	8001040 <HAL_GPIO_Init+0xa0>
          break;
 8001008:	e043      	b.n	8001092 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800100a:	4a87      	ldr	r2, [pc, #540]	; (8001228 <HAL_GPIO_Init+0x288>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d026      	beq.n	800105e <HAL_GPIO_Init+0xbe>
 8001010:	4a85      	ldr	r2, [pc, #532]	; (8001228 <HAL_GPIO_Init+0x288>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d806      	bhi.n	8001024 <HAL_GPIO_Init+0x84>
 8001016:	4a85      	ldr	r2, [pc, #532]	; (800122c <HAL_GPIO_Init+0x28c>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d020      	beq.n	800105e <HAL_GPIO_Init+0xbe>
 800101c:	4a84      	ldr	r2, [pc, #528]	; (8001230 <HAL_GPIO_Init+0x290>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d01d      	beq.n	800105e <HAL_GPIO_Init+0xbe>
          break;
 8001022:	e036      	b.n	8001092 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001024:	4a83      	ldr	r2, [pc, #524]	; (8001234 <HAL_GPIO_Init+0x294>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d019      	beq.n	800105e <HAL_GPIO_Init+0xbe>
 800102a:	4a83      	ldr	r2, [pc, #524]	; (8001238 <HAL_GPIO_Init+0x298>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d016      	beq.n	800105e <HAL_GPIO_Init+0xbe>
 8001030:	4a82      	ldr	r2, [pc, #520]	; (800123c <HAL_GPIO_Init+0x29c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0xbe>
          break;
 8001036:	e02c      	b.n	8001092 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	623b      	str	r3, [r7, #32]
          break;
 800103e:	e028      	b.n	8001092 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	3304      	adds	r3, #4
 8001046:	623b      	str	r3, [r7, #32]
          break;
 8001048:	e023      	b.n	8001092 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	3308      	adds	r3, #8
 8001050:	623b      	str	r3, [r7, #32]
          break;
 8001052:	e01e      	b.n	8001092 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	330c      	adds	r3, #12
 800105a:	623b      	str	r3, [r7, #32]
          break;
 800105c:	e019      	b.n	8001092 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d102      	bne.n	800106c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001066:	2304      	movs	r3, #4
 8001068:	623b      	str	r3, [r7, #32]
          break;
 800106a:	e012      	b.n	8001092 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d105      	bne.n	8001080 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001074:	2308      	movs	r3, #8
 8001076:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69fa      	ldr	r2, [r7, #28]
 800107c:	611a      	str	r2, [r3, #16]
          break;
 800107e:	e008      	b.n	8001092 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001080:	2308      	movs	r3, #8
 8001082:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	615a      	str	r2, [r3, #20]
          break;
 800108a:	e002      	b.n	8001092 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
          break;
 8001090:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	2bff      	cmp	r3, #255	; 0xff
 8001096:	d801      	bhi.n	800109c <HAL_GPIO_Init+0xfc>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	e001      	b.n	80010a0 <HAL_GPIO_Init+0x100>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3304      	adds	r3, #4
 80010a0:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	2bff      	cmp	r3, #255	; 0xff
 80010a6:	d802      	bhi.n	80010ae <HAL_GPIO_Init+0x10e>
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_Init+0x114>
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	3b08      	subs	r3, #8
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	210f      	movs	r1, #15
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	401a      	ands	r2, r3
 80010c6:	6a39      	ldr	r1, [r7, #32]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	431a      	orrs	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 8096 	beq.w	800120e <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010e2:	4b57      	ldr	r3, [pc, #348]	; (8001240 <HAL_GPIO_Init+0x2a0>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	4a56      	ldr	r2, [pc, #344]	; (8001240 <HAL_GPIO_Init+0x2a0>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6193      	str	r3, [r2, #24]
 80010ee:	4b54      	ldr	r3, [pc, #336]	; (8001240 <HAL_GPIO_Init+0x2a0>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80010fa:	4a52      	ldr	r2, [pc, #328]	; (8001244 <HAL_GPIO_Init+0x2a4>)
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	4013      	ands	r3, r2
 800111c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a49      	ldr	r2, [pc, #292]	; (8001248 <HAL_GPIO_Init+0x2a8>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0x1ae>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a48      	ldr	r2, [pc, #288]	; (800124c <HAL_GPIO_Init+0x2ac>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d00d      	beq.n	800114a <HAL_GPIO_Init+0x1aa>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a47      	ldr	r2, [pc, #284]	; (8001250 <HAL_GPIO_Init+0x2b0>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d007      	beq.n	8001146 <HAL_GPIO_Init+0x1a6>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a46      	ldr	r2, [pc, #280]	; (8001254 <HAL_GPIO_Init+0x2b4>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_GPIO_Init+0x1a2>
 800113e:	2303      	movs	r3, #3
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x1b0>
 8001142:	2304      	movs	r3, #4
 8001144:	e004      	b.n	8001150 <HAL_GPIO_Init+0x1b0>
 8001146:	2302      	movs	r3, #2
 8001148:	e002      	b.n	8001150 <HAL_GPIO_Init+0x1b0>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <HAL_GPIO_Init+0x1b0>
 800114e:	2300      	movs	r3, #0
 8001150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001152:	f002 0203 	and.w	r2, r2, #3
 8001156:	0092      	lsls	r2, r2, #2
 8001158:	4093      	lsls	r3, r2
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	4313      	orrs	r3, r2
 800115e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001160:	4938      	ldr	r1, [pc, #224]	; (8001244 <HAL_GPIO_Init+0x2a4>)
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4936      	ldr	r1, [pc, #216]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]
 8001186:	e006      	b.n	8001196 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001188:	4b33      	ldr	r3, [pc, #204]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	43db      	mvns	r3, r3
 8001190:	4931      	ldr	r1, [pc, #196]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 8001192:	4013      	ands	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	492c      	ldr	r1, [pc, #176]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	604b      	str	r3, [r1, #4]
 80011ae:	e006      	b.n	80011be <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	4927      	ldr	r1, [pc, #156]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d006      	beq.n	80011d8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	4922      	ldr	r1, [pc, #136]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	608b      	str	r3, [r1, #8]
 80011d6:	e006      	b.n	80011e6 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	43db      	mvns	r3, r3
 80011e0:	491d      	ldr	r1, [pc, #116]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d006      	beq.n	8001200 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	4918      	ldr	r1, [pc, #96]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	60cb      	str	r3, [r1, #12]
 80011fe:	e006      	b.n	800120e <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	43db      	mvns	r3, r3
 8001208:	4913      	ldr	r1, [pc, #76]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 800120a:	4013      	ands	r3, r2
 800120c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	3301      	adds	r3, #1
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	2b0f      	cmp	r3, #15
 8001218:	f67f aed4 	bls.w	8000fc4 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 800121c:	bf00      	nop
 800121e:	372c      	adds	r7, #44	; 0x2c
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	10210000 	.word	0x10210000
 800122c:	10110000 	.word	0x10110000
 8001230:	10120000 	.word	0x10120000
 8001234:	10310000 	.word	0x10310000
 8001238:	10320000 	.word	0x10320000
 800123c:	10220000 	.word	0x10220000
 8001240:	40021000 	.word	0x40021000
 8001244:	40010000 	.word	0x40010000
 8001248:	40010800 	.word	0x40010800
 800124c:	40010c00 	.word	0x40010c00
 8001250:	40011000 	.word	0x40011000
 8001254:	40011400 	.word	0x40011400
 8001258:	40010400 	.word	0x40010400

0800125c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001274:	2301      	movs	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e001      	b.n	800127e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	807b      	strh	r3, [r7, #2]
 8001296:	4613      	mov	r3, r2
 8001298:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800129a:	787b      	ldrb	r3, [r7, #1]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a0:	887a      	ldrh	r2, [r7, #2]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a6:	e003      	b.n	80012b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012a8:	887b      	ldrh	r3, [r7, #2]
 80012aa:	041a      	lsls	r2, r3, #16
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	611a      	str	r2, [r3, #16]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	460b      	mov	r3, r1
 80012c4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	405a      	eors	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60da      	str	r2, [r3, #12]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e8:	695a      	ldr	r2, [r3, #20]
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f007 f838 	bl	8008370 <HAL_GPIO_EXTI_Callback>
  }
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40010400 	.word	0x40010400

0800130c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800130c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130e:	b08b      	sub	sp, #44	; 0x2c
 8001310:	af06      	add	r7, sp, #24
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e0ca      	b.n	80014b8 <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d106      	bne.n	800133c <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f007 fcb6 	bl	8008ca8 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2203      	movs	r2, #3
 8001340:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f001 fffc 	bl	8003346 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	687e      	ldr	r6, [r7, #4]
 8001356:	466d      	mov	r5, sp
 8001358:	f106 0410 	add.w	r4, r6, #16
 800135c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800135e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	602b      	str	r3, [r5, #0]
 8001364:	1d33      	adds	r3, r6, #4
 8001366:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001368:	6838      	ldr	r0, [r7, #0]
 800136a:	f001 ffc2 	bl	80032f2 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f002 f802 	bl	800337e <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	e037      	b.n	80013f0 <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	015b      	lsls	r3, r3, #5
 8001386:	4413      	add	r3, r2
 8001388:	3329      	adds	r3, #41	; 0x29
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	b2d9      	uxtb	r1, r3
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	015b      	lsls	r3, r3, #5
 8001398:	4413      	add	r3, r2
 800139a:	3328      	adds	r3, #40	; 0x28
 800139c:	460a      	mov	r2, r1
 800139e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	b299      	uxth	r1, r3
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	015b      	lsls	r3, r3, #5
 80013aa:	4413      	add	r3, r2
 80013ac:	3334      	adds	r3, #52	; 0x34
 80013ae:	460a      	mov	r2, r1
 80013b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	015b      	lsls	r3, r3, #5
 80013b8:	4413      	add	r3, r2
 80013ba:	332b      	adds	r3, #43	; 0x2b
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	015b      	lsls	r3, r3, #5
 80013c6:	4413      	add	r3, r2
 80013c8:	3338      	adds	r3, #56	; 0x38
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	015b      	lsls	r3, r3, #5
 80013d4:	4413      	add	r3, r2
 80013d6:	333c      	adds	r3, #60	; 0x3c
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	3302      	adds	r3, #2
 80013e2:	015b      	lsls	r3, r3, #5
 80013e4:	4413      	add	r3, r2
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	3301      	adds	r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b0e      	cmp	r3, #14
 80013f4:	d9c4      	bls.n	8001380 <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	e03c      	b.n	8001476 <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	015b      	lsls	r3, r3, #5
 8001402:	4413      	add	r3, r2
 8001404:	f203 2329 	addw	r3, r3, #553	; 0x229
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	b2d9      	uxtb	r1, r3
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	015b      	lsls	r3, r3, #5
 8001416:	4413      	add	r3, r2
 8001418:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800141c:	460a      	mov	r2, r1
 800141e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	b299      	uxth	r1, r3
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	015b      	lsls	r3, r3, #5
 800142a:	4413      	add	r3, r2
 800142c:	3334      	adds	r3, #52	; 0x34
 800142e:	460a      	mov	r2, r1
 8001430:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	015b      	lsls	r3, r3, #5
 8001438:	4413      	add	r3, r2
 800143a:	f203 232b 	addw	r3, r3, #555	; 0x22b
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	015b      	lsls	r3, r3, #5
 8001448:	4413      	add	r3, r2
 800144a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	015b      	lsls	r3, r3, #5
 8001458:	4413      	add	r3, r2
 800145a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3312      	adds	r3, #18
 8001468:	015b      	lsls	r3, r3, #5
 800146a:	4413      	add	r3, r2
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3301      	adds	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b0e      	cmp	r3, #14
 800147a:	d9bf      	bls.n	80013fc <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	687e      	ldr	r6, [r7, #4]
 8001484:	466d      	mov	r5, sp
 8001486:	f106 0410 	add.w	r4, r6, #16
 800148a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	602b      	str	r3, [r5, #0]
 8001492:	1d33      	adds	r3, r6, #4
 8001494:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001496:	6838      	ldr	r0, [r7, #0]
 8001498:	f001 ff7d 	bl	8003396 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 ff68 	bl	8004386 <USB_DevDisconnect>
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014c0 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_PCD_Start+0x16>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e016      	b.n	8001504 <HAL_PCD_Start+0x44>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80014de:	2101      	movs	r1, #1
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f007 fe48 	bl	8009176 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 ff41 	bl	8004372 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 ff0c 	bl	8003312 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f002 ff3e 	bl	800439a <USB_ReadInterrupts>
 800151e:	4603      	mov	r3, r0
 8001520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001528:	d102      	bne.n	8001530 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 fad8 	bl	8001ae0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f002 ff30 	bl	800439a <USB_ReadInterrupts>
 800153a:	4603      	mov	r3, r0
 800153c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001544:	d112      	bne.n	800156c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800154e:	b29a      	uxth	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001558:	b292      	uxth	r2, r2
 800155a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f007 fc17 	bl	8008d92 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001564:	2100      	movs	r1, #0
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f8d2 	bl	8001710 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f002 ff12 	bl	800439a <USB_ReadInterrupts>
 8001576:	4603      	mov	r3, r0
 8001578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001580:	d10b      	bne.n	800159a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800158a:	b29a      	uxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001594:	b292      	uxth	r2, r2
 8001596:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 fefb 	bl	800439a <USB_ReadInterrupts>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ae:	d10b      	bne.n	80015c8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015c2:	b292      	uxth	r2, r2
 80015c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f002 fee4 	bl	800439a <USB_ReadInterrupts>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015dc:	d126      	bne.n	800162c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0204 	bic.w	r2, r2, #4
 80015f0:	b292      	uxth	r2, r2
 80015f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015fe:	b29a      	uxth	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0208 	bic.w	r2, r2, #8
 8001608:	b292      	uxth	r2, r2
 800160a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f007 fbf8 	bl	8008e04 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800161c:	b29a      	uxth	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001626:	b292      	uxth	r2, r2
 8001628:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f002 feb2 	bl	800439a <USB_ReadInterrupts>
 8001636:	4603      	mov	r3, r0
 8001638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800163c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001640:	d131      	bne.n	80016a6 <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800164a:	b29a      	uxth	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f042 0208 	orr.w	r2, r2, #8
 8001654:	b292      	uxth	r2, r2
 8001656:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001662:	b29a      	uxth	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166c:	b292      	uxth	r2, r2
 800166e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800167a:	b29a      	uxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0204 	orr.w	r2, r2, #4
 8001684:	b292      	uxth	r2, r2
 8001686:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f002 fe83 	bl	800439a <USB_ReadInterrupts>
 8001694:	4603      	mov	r3, r0
 8001696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800169e:	d002      	beq.n	80016a6 <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f007 fb95 	bl	8008dd0 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 fe75 	bl	800439a <USB_ReadInterrupts>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ba:	d10e      	bne.n	80016da <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016ce:	b292      	uxth	r2, r2
 80016d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f007 fb4e 	bl	8008d76 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 fe5b 	bl	800439a <USB_ReadInterrupts>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ee:	d10b      	bne.n	8001708 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001702:	b292      	uxth	r2, r2
 8001704:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_PCD_SetAddress+0x1a>
 8001726:	2302      	movs	r3, #2
 8001728:	e013      	b.n	8001752 <HAL_PCD_SetAddress+0x42>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	78fa      	ldrb	r2, [r7, #3]
 8001736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f002 fe02 	bl	800434c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	4608      	mov	r0, r1
 8001764:	4611      	mov	r1, r2
 8001766:	461a      	mov	r2, r3
 8001768:	4603      	mov	r3, r0
 800176a:	70fb      	strb	r3, [r7, #3]
 800176c:	460b      	mov	r3, r1
 800176e:	803b      	strh	r3, [r7, #0]
 8001770:	4613      	mov	r3, r2
 8001772:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 800177c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001780:	2b00      	cmp	r3, #0
 8001782:	da08      	bge.n	8001796 <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800178a:	015b      	lsls	r3, r3, #5
 800178c:	3328      	adds	r3, #40	; 0x28
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	e008      	b.n	80017a8 <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800179c:	015b      	lsls	r3, r3, #5
 800179e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80017b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	09db      	lsrs	r3, r3, #7
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 80017c4:	883a      	ldrh	r2, [r7, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	78ba      	ldrb	r2, [r7, #2]
 80017ce:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_PCD_EP_Open+0x84>
 80017da:	2302      	movs	r3, #2
 80017dc:	e00e      	b.n	80017fc <HAL_PCD_EP_Open+0xa2>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68f9      	ldr	r1, [r7, #12]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f001 fdf7 	bl	80033e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 80017fa:	7afb      	ldrb	r3, [r7, #11]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001818:	2b00      	cmp	r3, #0
 800181a:	da08      	bge.n	800182e <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001822:	015b      	lsls	r3, r3, #5
 8001824:	3328      	adds	r3, #40	; 0x28
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	e008      	b.n	8001840 <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001834:	015b      	lsls	r3, r3, #5
 8001836:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001846:	b2da      	uxtb	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800184c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	09db      	lsrs	r3, r3, #7
 8001854:	b2db      	uxtb	r3, r3
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_PCD_EP_Close+0x66>
 8001866:	2302      	movs	r3, #2
 8001868:	e00e      	b.n	8001888 <HAL_PCD_EP_Close+0x84>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68f9      	ldr	r1, [r7, #12]
 8001878:	4618      	mov	r0, r3
 800187a:	f002 f873 	bl	8003964 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	460b      	mov	r3, r1
 800189e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80018a4:	7afb      	ldrb	r3, [r7, #11]
 80018a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018aa:	015b      	lsls	r3, r3, #5
 80018ac:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4413      	add	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2200      	movs	r2, #0
 80018c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2200      	movs	r2, #0
 80018cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 80018ce:	7afb      	ldrb	r3, [r7, #11]
 80018d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 80018da:	7afb      	ldrb	r3, [r7, #11]
 80018dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d106      	bne.n	80018f2 <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6979      	ldr	r1, [r7, #20]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f002 f9c2 	bl	8003c74 <USB_EPStartXfer>
 80018f0:	e005      	b.n	80018fe <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6979      	ldr	r1, [r7, #20]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 f9bb 	bl	8003c74 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	3312      	adds	r3, #18
 800191e:	015b      	lsls	r3, r3, #5
 8001920:	4413      	add	r3, r2
 8001922:	3304      	adds	r3, #4
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	b29b      	uxth	r3, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	460b      	mov	r3, r1
 8001940:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001946:	7afb      	ldrb	r3, [r7, #11]
 8001948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800194c:	015b      	lsls	r3, r3, #5
 800194e:	3328      	adds	r3, #40	; 0x28
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2200      	movs	r2, #0
 8001966:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2201      	movs	r2, #1
 800196c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 800196e:	7afb      	ldrb	r3, [r7, #11]
 8001970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001974:	b2da      	uxtb	r2, r3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 800197a:	7afb      	ldrb	r3, [r7, #11]
 800197c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001980:	2b00      	cmp	r3, #0
 8001982:	d106      	bne.n	8001992 <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6979      	ldr	r1, [r7, #20]
 800198a:	4618      	mov	r0, r3
 800198c:	f002 f972 	bl	8003c74 <USB_EPStartXfer>
 8001990:	e005      	b.n	800199e <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6979      	ldr	r1, [r7, #20]
 8001998:	4618      	mov	r0, r3
 800199a:	f002 f96b 	bl	8003c74 <USB_EPStartXfer>
  }

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 80019b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	da08      	bge.n	80019d2 <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019c6:	015b      	lsls	r3, r3, #5
 80019c8:	3328      	adds	r3, #40	; 0x28
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	e006      	b.n	80019e0 <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	015b      	lsls	r3, r3, #5
 80019d6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80019f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	09db      	lsrs	r3, r3, #7
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_PCD_EP_SetStall+0x68>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e01c      	b.n	8001a4a <HAL_PCD_EP_SetStall+0xa2>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68f9      	ldr	r1, [r7, #12]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f002 fbaa 	bl	8004178 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d108      	bne.n	8001a40 <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	f002 fcbe 	bl	80043bc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b084      	sub	sp, #16
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8001a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da08      	bge.n	8001a7c <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a70:	015b      	lsls	r3, r3, #5
 8001a72:	3328      	adds	r3, #40	; 0x28
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	e006      	b.n	8001a8a <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	015b      	lsls	r3, r3, #5
 8001a80:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001a9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	09db      	lsrs	r3, r3, #7
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_PCD_EP_ClrStall+0x68>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e00e      	b.n	8001ad8 <HAL_PCD_EP_ClrStall+0x86>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68f9      	ldr	r1, [r7, #12]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 fbb5 	bl	8004238 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
  uint16_t count = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	837b      	strh	r3, [r7, #26]
  uint8_t epindex = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	767b      	strb	r3, [r7, #25]
  __IO uint16_t wIstr = 0;  
 8001af4:	2300      	movs	r3, #0
 8001af6:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8001afc:	e308      	b.n	8002110 <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001afe:	89fb      	ldrh	r3, [r7, #14]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	767b      	strb	r3, [r7, #25]
    
    if (epindex == 0)
 8001b0a:	7e7b      	ldrb	r3, [r7, #25]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f040 812a 	bne.w	8001d66 <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001b12:	89fb      	ldrh	r3, [r7, #14]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d14d      	bne.n	8001bba <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3328      	adds	r3, #40	; 0x28
 8001b3a:	61fb      	str	r3, [r7, #28]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	3302      	adds	r3, #2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	695a      	ldr	r2, [r3, #20]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	441a      	add	r2, r3
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f007 f8e4 	bl	8008d48 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 82c1 	beq.w	8002110 <PCD_EP_ISR_Handler+0x630>
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 82bc 	bne.w	8002110 <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	b292      	uxth	r2, r2
 8001bac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001bb8:	e2aa      	b.n	8002110 <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001bc0:	61fb      	str	r3, [r7, #28]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001bcc:	89bb      	ldrh	r3, [r7, #12]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d031      	beq.n	8001c3c <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4413      	add	r3, r2
 8001bec:	3306      	adds	r3, #6
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	889a      	ldrh	r2, [r3, #4]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f002 fc20 	bl	800445e <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	b299      	uxth	r1, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c2e:	400b      	ands	r3, r1
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f007 f85d 	bl	8008cf4 <HAL_PCD_SetupStageCallback>
 8001c3a:	e269      	b.n	8002110 <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c3c:	89bb      	ldrh	r3, [r7, #12]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f280 8264 	bge.w	8002110 <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	b299      	uxth	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c58:	400b      	ands	r3, r1
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	3306      	adds	r3, #6
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d011      	beq.n	8001cb8 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	6959      	ldr	r1, [r3, #20]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	889a      	ldrh	r2, [r3, #4]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	f002 fbda 	bl	800445e <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	441a      	add	r2, r3
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001cb8:	2100      	movs	r1, #0
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f007 f82c 	bl	8008d18 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3306      	adds	r3, #6
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	2b3e      	cmp	r3, #62	; 0x3e
 8001ce0:	d918      	bls.n	8001d14 <PCD_EP_ISR_Handler+0x234>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	82fb      	strh	r3, [r7, #22]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <PCD_EP_ISR_Handler+0x21c>
 8001cf6:	8afb      	ldrh	r3, [r7, #22]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	82fb      	strh	r3, [r7, #22]
 8001cfc:	8afb      	ldrh	r3, [r7, #22]
 8001cfe:	029b      	lsls	r3, r3, #10
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e012      	b.n	8001d3a <PCD_EP_ISR_Handler+0x25a>
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	085b      	lsrs	r3, r3, #1
 8001d1a:	82fb      	strh	r3, [r7, #22]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d002      	beq.n	8001d2e <PCD_EP_ISR_Handler+0x24e>
 8001d28:	8afb      	ldrh	r3, [r7, #22]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	82fb      	strh	r3, [r7, #22]
 8001d2e:	8afb      	ldrh	r3, [r7, #22]
 8001d30:	029b      	lsls	r3, r3, #10
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d4a:	b29c      	uxth	r4, r3
 8001d4c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001d50:	b29c      	uxth	r4, r3
 8001d52:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001d56:	b29c      	uxth	r4, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b98      	ldr	r3, [pc, #608]	; (8001fc0 <PCD_EP_ISR_Handler+0x4e0>)
 8001d5e:	4323      	orrs	r3, r4
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	8013      	strh	r3, [r2, #0]
 8001d64:	e1d4      	b.n	8002110 <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	7e7b      	ldrb	r3, [r7, #25]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d78:	89bb      	ldrh	r3, [r7, #12]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f280 80d0 	bge.w	8001f24 <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	7e7b      	ldrb	r3, [r7, #25]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	b299      	uxth	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	7e7b      	ldrb	r3, [r7, #25]
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	441a      	add	r2, r3
 8001da0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001da4:	400b      	ands	r3, r1
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001daa:	7e7b      	ldrb	r3, [r7, #25]
 8001dac:	015b      	lsls	r3, r3, #5
 8001dae:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	61fb      	str	r3, [r7, #28]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	7a9b      	ldrb	r3, [r3, #10]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d122      	bne.n	8001e06 <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3306      	adds	r3, #6
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dea:	837b      	strh	r3, [r7, #26]
          if (count != 0U)
 8001dec:	8b7b      	ldrh	r3, [r7, #26]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d073      	beq.n	8001eda <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	6959      	ldr	r1, [r3, #20]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	889a      	ldrh	r2, [r3, #4]
 8001dfe:	8b7b      	ldrh	r3, [r7, #26]
 8001e00:	f002 fb2d 	bl	800445e <USB_ReadPMA>
 8001e04:	e069      	b.n	8001eda <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d022      	beq.n	8001e66 <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	3302      	adds	r3, #2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e4a:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 8001e4c:	8b7b      	ldrh	r3, [r7, #26]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d02b      	beq.n	8001eaa <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	6959      	ldr	r1, [r3, #20]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	88da      	ldrh	r2, [r3, #6]
 8001e5e:	8b7b      	ldrh	r3, [r7, #26]
 8001e60:	f002 fafd 	bl	800445e <USB_ReadPMA>
 8001e64:	e021      	b.n	8001eaa <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	3306      	adds	r3, #6
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e90:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 8001e92:	8b7b      	ldrh	r3, [r7, #26]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	6959      	ldr	r1, [r3, #20]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	891a      	ldrh	r2, [r3, #8]
 8001ea4:	8b7b      	ldrh	r3, [r7, #26]
 8001ea6:	f002 fada 	bl	800445e <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	b299      	uxth	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	441a      	add	r2, r3
 8001ed2:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <PCD_EP_ISR_Handler+0x4e4>)
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	8b7b      	ldrh	r3, [r7, #26]
 8001ee0:	441a      	add	r2, r3
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	8b7b      	ldrh	r3, [r7, #26]
 8001eec:	441a      	add	r2, r3
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d004      	beq.n	8001f04 <PCD_EP_ISR_Handler+0x424>
 8001efa:	8b7a      	ldrh	r2, [r7, #26]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d206      	bcs.n	8001f12 <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f006 ff04 	bl	8008d18 <HAL_PCD_DataOutStageCallback>
 8001f10:	e008      	b.n	8001f24 <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	7819      	ldrb	r1, [r3, #0]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fcb6 	bl	8001890 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f24:	89bb      	ldrh	r3, [r7, #12]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80ef 	beq.w	8002110 <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f32:	7e7b      	ldrb	r3, [r7, #25]
 8001f34:	015b      	lsls	r3, r3, #5
 8001f36:	3328      	adds	r3, #40	; 0x28
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	61fb      	str	r3, [r7, #28]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	7e7b      	ldrb	r3, [r7, #25]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	4611      	mov	r1, r2
 8001f54:	7e7a      	ldrb	r2, [r7, #25]
 8001f56:	0092      	lsls	r2, r2, #2
 8001f58:	440a      	add	r2, r1
 8001f5a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	7a9b      	ldrb	r3, [r3, #10]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d12c      	bne.n	8001fc8 <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	3302      	adds	r3, #2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 8083 	beq.w	80020ac <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	6959      	ldr	r1, [r3, #20]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	889a      	ldrh	r2, [r3, #4]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	f002 fa0b 	bl	80043d2 <USB_WritePMA>
 8001fbc:	e076      	b.n	80020ac <PCD_EP_ISR_Handler+0x5cc>
 8001fbe:	bf00      	nop
 8001fc0:	ffff8080 	.word	0xffff8080
 8001fc4:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d026      	beq.n	8002030 <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3302      	adds	r3, #2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d031      	beq.n	800207c <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	6959      	ldr	r1, [r3, #20]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	88da      	ldrh	r2, [r3, #6]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	b29b      	uxth	r3, r3
 800202a:	f002 f9d2 	bl	80043d2 <USB_WritePMA>
 800202e:	e025      	b.n	800207c <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	3306      	adds	r3, #6
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	4413      	add	r3, r2
 800204e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b29b      	uxth	r3, r3
 8002056:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	6959      	ldr	r1, [r3, #20]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	891a      	ldrh	r2, [r3, #8]
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	b29b      	uxth	r3, r3
 8002078:	f002 f9ab 	bl	80043d2 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b29a      	uxth	r2, r3
 800208e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002092:	4013      	ands	r3, r2
 8002094:	b299      	uxth	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	441a      	add	r2, r3
 80020a4:	4b22      	ldr	r3, [pc, #136]	; (8002130 <PCD_EP_ISR_Handler+0x650>)
 80020a6:	430b      	orrs	r3, r1
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	3302      	adds	r3, #2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	441a      	add	r2, r3
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d106      	bne.n	80020fe <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4619      	mov	r1, r3
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f006 fe26 	bl	8008d48 <HAL_PCD_DataInStageCallback>
 80020fc:	e008      	b.n	8002110 <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	7819      	ldrb	r1, [r3, #0]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fc11 	bl	8001932 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002118:	b29b      	uxth	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	81fa      	strh	r2, [r7, #14]
 800211e:	b21b      	sxth	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	f6ff acec 	blt.w	8001afe <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3724      	adds	r7, #36	; 0x24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd90      	pop	{r4, r7, pc}
 8002130:	ffffc080 	.word	0xffffc080

08002134 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	817b      	strh	r3, [r7, #10]
 8002142:	4613      	mov	r3, r2
 8002144:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 800214a:	897b      	ldrh	r3, [r7, #10]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002154:	897b      	ldrh	r3, [r7, #10]
 8002156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800215a:	015b      	lsls	r3, r3, #5
 800215c:	3328      	adds	r3, #40	; 0x28
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4413      	add	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e006      	b.n	8002174 <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002166:	897b      	ldrh	r3, [r7, #10]
 8002168:	015b      	lsls	r3, r3, #5
 800216a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4413      	add	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002174:	893b      	ldrh	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2200      	movs	r2, #0
 800217e:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	b29a      	uxth	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	809a      	strh	r2, [r3, #4]
 8002188:	e00b      	b.n	80021a2 <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2201      	movs	r2, #1
 800218e:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	b29a      	uxth	r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	0c1b      	lsrs	r3, r3, #16
 800219c:	b29a      	uxth	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	371c      	adds	r7, #28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
	...

080021b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8087 	beq.w	80022d8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021ca:	4b92      	ldr	r3, [pc, #584]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d00c      	beq.n	80021f0 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021d6:	4b8f      	ldr	r3, [pc, #572]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d112      	bne.n	8002208 <HAL_RCC_OscConfig+0x58>
 80021e2:	4b8c      	ldr	r3, [pc, #560]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ee:	d10b      	bne.n	8002208 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	4b88      	ldr	r3, [pc, #544]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d06c      	beq.n	80022d6 <HAL_RCC_OscConfig+0x126>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d168      	bne.n	80022d6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e22d      	b.n	8002664 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002210:	d106      	bne.n	8002220 <HAL_RCC_OscConfig+0x70>
 8002212:	4b80      	ldr	r3, [pc, #512]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a7f      	ldr	r2, [pc, #508]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e02e      	b.n	800227e <HAL_RCC_OscConfig+0xce>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10c      	bne.n	8002242 <HAL_RCC_OscConfig+0x92>
 8002228:	4b7a      	ldr	r3, [pc, #488]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a79      	ldr	r2, [pc, #484]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 800222e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b77      	ldr	r3, [pc, #476]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a76      	ldr	r2, [pc, #472]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 800223a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e01d      	b.n	800227e <HAL_RCC_OscConfig+0xce>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800224a:	d10c      	bne.n	8002266 <HAL_RCC_OscConfig+0xb6>
 800224c:	4b71      	ldr	r3, [pc, #452]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a70      	ldr	r2, [pc, #448]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 8002252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b6e      	ldr	r3, [pc, #440]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a6d      	ldr	r2, [pc, #436]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 800225e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	e00b      	b.n	800227e <HAL_RCC_OscConfig+0xce>
 8002266:	4b6b      	ldr	r3, [pc, #428]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6a      	ldr	r2, [pc, #424]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 800226c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b68      	ldr	r3, [pc, #416]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a67      	ldr	r2, [pc, #412]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 8002278:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d013      	beq.n	80022ae <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe fda5 	bl	8000dd4 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800228e:	f7fe fda1 	bl	8000dd4 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b64      	cmp	r3, #100	; 0x64
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e1e1      	b.n	8002664 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a0:	4b5c      	ldr	r3, [pc, #368]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0xde>
 80022ac:	e014      	b.n	80022d8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7fe fd91 	bl	8000dd4 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b6:	f7fe fd8d 	bl	8000dd4 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b64      	cmp	r3, #100	; 0x64
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e1cd      	b.n	8002664 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c8:	4b52      	ldr	r3, [pc, #328]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f0      	bne.n	80022b6 <HAL_RCC_OscConfig+0x106>
 80022d4:	e000      	b.n	80022d8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d063      	beq.n	80023ac <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022e4:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 030c 	and.w	r3, r3, #12
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00b      	beq.n	8002308 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022f0:	4b48      	ldr	r3, [pc, #288]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d11c      	bne.n	8002336 <HAL_RCC_OscConfig+0x186>
 80022fc:	4b45      	ldr	r3, [pc, #276]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d116      	bne.n	8002336 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002308:	4b42      	ldr	r3, [pc, #264]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_OscConfig+0x170>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d001      	beq.n	8002320 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e1a1      	b.n	8002664 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002320:	4b3c      	ldr	r3, [pc, #240]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4939      	ldr	r1, [pc, #228]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002334:	e03a      	b.n	80023ac <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d020      	beq.n	8002380 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800233e:	4b36      	ldr	r3, [pc, #216]	; (8002418 <HAL_RCC_OscConfig+0x268>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7fe fd46 	bl	8000dd4 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800234c:	f7fe fd42 	bl	8000dd4 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e182      	b.n	8002664 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235e:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236a:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4926      	ldr	r1, [pc, #152]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
 800237e:	e015      	b.n	80023ac <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002380:	4b25      	ldr	r3, [pc, #148]	; (8002418 <HAL_RCC_OscConfig+0x268>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7fe fd25 	bl	8000dd4 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800238e:	f7fe fd21 	bl	8000dd4 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e161      	b.n	8002664 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a0:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f0      	bne.n	800238e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d039      	beq.n	800242c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d019      	beq.n	80023f4 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <HAL_RCC_OscConfig+0x26c>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c6:	f7fe fd05 	bl	8000dd4 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ce:	f7fe fd01 	bl	8000dd4 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e141      	b.n	8002664 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <HAL_RCC_OscConfig+0x264>)
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80023ec:	2001      	movs	r0, #1
 80023ee:	f000 faff 	bl	80029f0 <RCC_Delay>
 80023f2:	e01b      	b.n	800242c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCC_OscConfig+0x26c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fa:	f7fe fceb 	bl	8000dd4 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002400:	e00e      	b.n	8002420 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002402:	f7fe fce7 	bl	8000dd4 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d907      	bls.n	8002420 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e127      	b.n	8002664 <HAL_RCC_OscConfig+0x4b4>
 8002414:	40021000 	.word	0x40021000
 8002418:	42420000 	.word	0x42420000
 800241c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002420:	4b92      	ldr	r3, [pc, #584]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1ea      	bne.n	8002402 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80a6 	beq.w	8002586 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243e:	4b8b      	ldr	r3, [pc, #556]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10d      	bne.n	8002466 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	4b88      	ldr	r3, [pc, #544]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	4a87      	ldr	r2, [pc, #540]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 8002450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002454:	61d3      	str	r3, [r2, #28]
 8002456:	4b85      	ldr	r3, [pc, #532]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002462:	2301      	movs	r3, #1
 8002464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002466:	4b82      	ldr	r3, [pc, #520]	; (8002670 <HAL_RCC_OscConfig+0x4c0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d118      	bne.n	80024a4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002472:	4b7f      	ldr	r3, [pc, #508]	; (8002670 <HAL_RCC_OscConfig+0x4c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a7e      	ldr	r2, [pc, #504]	; (8002670 <HAL_RCC_OscConfig+0x4c0>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247e:	f7fe fca9 	bl	8000dd4 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002486:	f7fe fca5 	bl	8000dd4 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b64      	cmp	r3, #100	; 0x64
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e0e5      	b.n	8002664 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	4b75      	ldr	r3, [pc, #468]	; (8002670 <HAL_RCC_OscConfig+0x4c0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d106      	bne.n	80024ba <HAL_RCC_OscConfig+0x30a>
 80024ac:	4b6f      	ldr	r3, [pc, #444]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4a6e      	ldr	r2, [pc, #440]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6213      	str	r3, [r2, #32]
 80024b8:	e02d      	b.n	8002516 <HAL_RCC_OscConfig+0x366>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0x32c>
 80024c2:	4b6a      	ldr	r3, [pc, #424]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4a69      	ldr	r2, [pc, #420]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	6213      	str	r3, [r2, #32]
 80024ce:	4b67      	ldr	r3, [pc, #412]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4a66      	ldr	r2, [pc, #408]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 80024d4:	f023 0304 	bic.w	r3, r3, #4
 80024d8:	6213      	str	r3, [r2, #32]
 80024da:	e01c      	b.n	8002516 <HAL_RCC_OscConfig+0x366>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d10c      	bne.n	80024fe <HAL_RCC_OscConfig+0x34e>
 80024e4:	4b61      	ldr	r3, [pc, #388]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4a60      	ldr	r2, [pc, #384]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	6213      	str	r3, [r2, #32]
 80024f0:	4b5e      	ldr	r3, [pc, #376]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4a5d      	ldr	r2, [pc, #372]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6213      	str	r3, [r2, #32]
 80024fc:	e00b      	b.n	8002516 <HAL_RCC_OscConfig+0x366>
 80024fe:	4b5b      	ldr	r3, [pc, #364]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a5a      	ldr	r2, [pc, #360]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	6213      	str	r3, [r2, #32]
 800250a:	4b58      	ldr	r3, [pc, #352]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4a57      	ldr	r2, [pc, #348]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d015      	beq.n	800254a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251e:	f7fe fc59 	bl	8000dd4 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7fe fc55 	bl	8000dd4 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	; 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e093      	b.n	8002664 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253c:	4b4b      	ldr	r3, [pc, #300]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0ee      	beq.n	8002526 <HAL_RCC_OscConfig+0x376>
 8002548:	e014      	b.n	8002574 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254a:	f7fe fc43 	bl	8000dd4 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7fe fc3f 	bl	8000dd4 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e07d      	b.n	8002664 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002568:	4b40      	ldr	r3, [pc, #256]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1ee      	bne.n	8002552 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002574:	7dfb      	ldrb	r3, [r7, #23]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d105      	bne.n	8002586 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800257a:	4b3c      	ldr	r3, [pc, #240]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4a3b      	ldr	r2, [pc, #236]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 8002580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002584:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d069      	beq.n	8002662 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800258e:	4b37      	ldr	r3, [pc, #220]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b08      	cmp	r3, #8
 8002598:	d061      	beq.n	800265e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d146      	bne.n	8002630 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a2:	4b34      	ldr	r3, [pc, #208]	; (8002674 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fe fc14 	bl	8000dd4 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b0:	f7fe fc10 	bl	8000dd4 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e050      	b.n	8002664 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c2:	4b2a      	ldr	r3, [pc, #168]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d6:	d108      	bne.n	80025ea <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025d8:	4b24      	ldr	r3, [pc, #144]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4921      	ldr	r1, [pc, #132]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ea:	4b20      	ldr	r3, [pc, #128]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a19      	ldr	r1, [r3, #32]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	430b      	orrs	r3, r1
 80025fc:	491b      	ldr	r1, [pc, #108]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002602:	4b1c      	ldr	r3, [pc, #112]	; (8002674 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe fbe4 	bl	8000dd4 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002610:	f7fe fbe0 	bl	8000dd4 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e020      	b.n	8002664 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x460>
 800262e:	e018      	b.n	8002662 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002630:	4b10      	ldr	r3, [pc, #64]	; (8002674 <HAL_RCC_OscConfig+0x4c4>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7fe fbcd 	bl	8000dd4 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263e:	f7fe fbc9 	bl	8000dd4 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e009      	b.n	8002664 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_RCC_OscConfig+0x4bc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x48e>
 800265c:	e001      	b.n	8002662 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	40007000 	.word	0x40007000
 8002674:	42420060 	.word	0x42420060

08002678 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002686:	4b7e      	ldr	r3, [pc, #504]	; (8002880 <HAL_RCC_ClockConfig+0x208>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d910      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002694:	4b7a      	ldr	r3, [pc, #488]	; (8002880 <HAL_RCC_ClockConfig+0x208>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f023 0207 	bic.w	r2, r3, #7
 800269c:	4978      	ldr	r1, [pc, #480]	; (8002880 <HAL_RCC_ClockConfig+0x208>)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026a4:	4b76      	ldr	r3, [pc, #472]	; (8002880 <HAL_RCC_ClockConfig+0x208>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0e0      	b.n	8002878 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d020      	beq.n	8002704 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026ce:	4b6d      	ldr	r3, [pc, #436]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4a6c      	ldr	r2, [pc, #432]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 80026d4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026d8:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e6:	4b67      	ldr	r3, [pc, #412]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4a66      	ldr	r2, [pc, #408]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 80026ec:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026f0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f2:	4b64      	ldr	r3, [pc, #400]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	4961      	ldr	r1, [pc, #388]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d06a      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d107      	bne.n	8002728 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002718:	4b5a      	ldr	r3, [pc, #360]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d115      	bne.n	8002750 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0a7      	b.n	8002878 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d107      	bne.n	8002740 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002730:	4b54      	ldr	r3, [pc, #336]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d109      	bne.n	8002750 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e09b      	b.n	8002878 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	4b50      	ldr	r3, [pc, #320]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e093      	b.n	8002878 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002750:	4b4c      	ldr	r3, [pc, #304]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f023 0203 	bic.w	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4949      	ldr	r1, [pc, #292]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002762:	f7fe fb37 	bl	8000dd4 <HAL_GetTick>
 8002766:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d112      	bne.n	8002796 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002772:	f7fe fb2f 	bl	8000dd4 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e077      	b.n	8002878 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002788:	4b3e      	ldr	r3, [pc, #248]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 030c 	and.w	r3, r3, #12
 8002790:	2b04      	cmp	r3, #4
 8002792:	d1ee      	bne.n	8002772 <HAL_RCC_ClockConfig+0xfa>
 8002794:	e027      	b.n	80027e6 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d11d      	bne.n	80027da <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7fe fb18 	bl	8000dd4 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e060      	b.n	8002878 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b6:	4b33      	ldr	r3, [pc, #204]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d1ee      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x128>
 80027c2:	e010      	b.n	80027e6 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c4:	f7fe fb06 	bl	8000dd4 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e04e      	b.n	8002878 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1ee      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80027e6:	4b26      	ldr	r3, [pc, #152]	; (8002880 <HAL_RCC_ClockConfig+0x208>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d210      	bcs.n	8002816 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f4:	4b22      	ldr	r3, [pc, #136]	; (8002880 <HAL_RCC_ClockConfig+0x208>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f023 0207 	bic.w	r2, r3, #7
 80027fc:	4920      	ldr	r1, [pc, #128]	; (8002880 <HAL_RCC_ClockConfig+0x208>)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	4313      	orrs	r3, r2
 8002802:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002804:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <HAL_RCC_ClockConfig+0x208>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d001      	beq.n	8002816 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e030      	b.n	8002878 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	4915      	ldr	r1, [pc, #84]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d009      	beq.n	8002854 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002840:	4b10      	ldr	r3, [pc, #64]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	490d      	ldr	r1, [pc, #52]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002854:	f000 f81c 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 8002858:	4601      	mov	r1, r0
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_RCC_ClockConfig+0x20c>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	4a08      	ldr	r2, [pc, #32]	; (8002888 <HAL_RCC_ClockConfig+0x210>)
 8002866:	5cd3      	ldrb	r3, [r2, r3]
 8002868:	fa21 f303 	lsr.w	r3, r1, r3
 800286c:	4a07      	ldr	r2, [pc, #28]	; (800288c <HAL_RCC_ClockConfig+0x214>)
 800286e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002870:	2000      	movs	r0, #0
 8002872:	f005 ffdd 	bl	8008830 <HAL_InitTick>
  
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40022000 	.word	0x40022000
 8002884:	40021000 	.word	0x40021000
 8002888:	0800db00 	.word	0x0800db00
 800288c:	20000128 	.word	0x20000128

08002890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b490      	push	{r4, r7}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002896:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002898:	1d3c      	adds	r4, r7, #4
 800289a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800289c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028a0:	4b28      	ldr	r3, [pc, #160]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028ba:	4b23      	ldr	r3, [pc, #140]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d002      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x40>
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d003      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0x46>
 80028ce:	e02d      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028d0:	4b1e      	ldr	r3, [pc, #120]	; (800294c <HAL_RCC_GetSysClockFreq+0xbc>)
 80028d2:	623b      	str	r3, [r7, #32]
      break;
 80028d4:	e02d      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	0c9b      	lsrs	r3, r3, #18
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028e2:	4413      	add	r3, r2
 80028e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028f4:	4b14      	ldr	r3, [pc, #80]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	0c5b      	lsrs	r3, r3, #17
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002902:	4413      	add	r3, r2
 8002904:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002908:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	4a0f      	ldr	r2, [pc, #60]	; (800294c <HAL_RCC_GetSysClockFreq+0xbc>)
 800290e:	fb02 f203 	mul.w	r2, r2, r3
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
 800291a:	e004      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002920:	fb02 f303 	mul.w	r3, r2, r3
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	623b      	str	r3, [r7, #32]
      break;
 800292a:	e002      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b07      	ldr	r3, [pc, #28]	; (800294c <HAL_RCC_GetSysClockFreq+0xbc>)
 800292e:	623b      	str	r3, [r7, #32]
      break;
 8002930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002932:	6a3b      	ldr	r3, [r7, #32]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3728      	adds	r7, #40	; 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bc90      	pop	{r4, r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	0800d9d8 	.word	0x0800d9d8
 8002944:	0800d9e8 	.word	0x0800d9e8
 8002948:	40021000 	.word	0x40021000
 800294c:	007a1200 	.word	0x007a1200
 8002950:	003d0900 	.word	0x003d0900

08002954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002958:	4b02      	ldr	r3, [pc, #8]	; (8002964 <HAL_RCC_GetHCLKFreq+0x10>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	20000128 	.word	0x20000128

08002968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800296c:	f7ff fff2 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 8002970:	4601      	mov	r1, r0
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4a03      	ldr	r2, [pc, #12]	; (800298c <HAL_RCC_GetPCLK1Freq+0x24>)
 800297e:	5cd3      	ldrb	r3, [r2, r3]
 8002980:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	0800db10 	.word	0x0800db10

08002990 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	220f      	movs	r2, #15
 800299e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HAL_RCC_GetClockConfig+0x58>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0203 	and.w	r2, r3, #3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80029ac:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <HAL_RCC_GetClockConfig+0x58>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCC_GetClockConfig+0x58>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <HAL_RCC_GetClockConfig+0x58>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	08db      	lsrs	r3, r3, #3
 80029ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	611a      	str	r2, [r3, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_RCC_GetClockConfig+0x5c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0207 	and.w	r2, r3, #7
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40022000 	.word	0x40022000

080029f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <RCC_Delay+0x34>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <RCC_Delay+0x38>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0a5b      	lsrs	r3, r3, #9
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002a0c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1e5a      	subs	r2, r3, #1
 8002a12:	60fa      	str	r2, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f9      	bne.n	8002a0c <RCC_Delay+0x1c>
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000128 	.word	0x20000128
 8002a28:	10624dd3 	.word	0x10624dd3

08002a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d07d      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4c:	4b4f      	ldr	r3, [pc, #316]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10d      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a58:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	4a4b      	ldr	r2, [pc, #300]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a62:	61d3      	str	r3, [r2, #28]
 8002a64:	4b49      	ldr	r3, [pc, #292]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a70:	2301      	movs	r3, #1
 8002a72:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d118      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a80:	4b43      	ldr	r3, [pc, #268]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a42      	ldr	r2, [pc, #264]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8c:	f7fe f9a2 	bl	8000dd4 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a92:	e008      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a94:	f7fe f99e 	bl	8000dd4 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e06d      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa6:	4b3a      	ldr	r3, [pc, #232]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ab2:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aba:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d02e      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d027      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ad0:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ada:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ae0:	4b2c      	ldr	r3, [pc, #176]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ae6:	4a29      	ldr	r2, [pc, #164]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d014      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe f96d 	bl	8000dd4 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7fe f969 	bl	8000dd4 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e036      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0ee      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b20:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4917      	ldr	r1, [pc, #92]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d105      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b38:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	490b      	ldr	r1, [pc, #44]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	4904      	ldr	r1, [pc, #16]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40007000 	.word	0x40007000
 8002b94:	42420440 	.word	0x42420440

08002b98 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e01d      	b.n	8002be6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f005 ff6a 	bl	8008a98 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	f000 fa2a 	bl	8003030 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0201 	orr.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d122      	bne.n	8002c7e <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d11b      	bne.n	8002c7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f06f 0202 	mvn.w	r2, #2
 8002c4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f9c8 	bl	8002ffa <HAL_TIM_IC_CaptureCallback>
 8002c6a:	e005      	b.n	8002c78 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f9bb 	bl	8002fe8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f9ca 	bl	800300c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d122      	bne.n	8002cd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d11b      	bne.n	8002cd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f06f 0204 	mvn.w	r2, #4
 8002ca2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f99e 	bl	8002ffa <HAL_TIM_IC_CaptureCallback>
 8002cbe:	e005      	b.n	8002ccc <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f991 	bl	8002fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f9a0 	bl	800300c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d122      	bne.n	8002d26 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d11b      	bne.n	8002d26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f06f 0208 	mvn.w	r2, #8
 8002cf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f974 	bl	8002ffa <HAL_TIM_IC_CaptureCallback>
 8002d12:	e005      	b.n	8002d20 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f967 	bl	8002fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f976 	bl	800300c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	d122      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2b10      	cmp	r3, #16
 8002d40:	d11b      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f06f 0210 	mvn.w	r2, #16
 8002d4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2208      	movs	r2, #8
 8002d50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f94a 	bl	8002ffa <HAL_TIM_IC_CaptureCallback>
 8002d66:	e005      	b.n	8002d74 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f93d 	bl	8002fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f94c 	bl	800300c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d10e      	bne.n	8002da6 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d107      	bne.n	8002da6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f06f 0201 	mvn.w	r2, #1
 8002d9e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f005 fb21 	bl	80083e8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db0:	2b80      	cmp	r3, #128	; 0x80
 8002db2:	d10e      	bne.n	8002dd2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbe:	2b80      	cmp	r3, #128	; 0x80
 8002dc0:	d107      	bne.n	8002dd2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fa87 	bl	80032e0 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ddc:	2b40      	cmp	r3, #64	; 0x40
 8002dde:	d10e      	bne.n	8002dfe <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b40      	cmp	r3, #64	; 0x40
 8002dec:	d107      	bne.n	8002dfe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002df6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f910 	bl	800301e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d10e      	bne.n	8002e2a <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d107      	bne.n	8002e2a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f06f 0220 	mvn.w	r2, #32
 8002e22:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fa52 	bl	80032ce <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_TIM_ConfigClockSource+0x1c>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e0c8      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x1ae>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e6c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e74:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b40      	cmp	r3, #64	; 0x40
 8002e84:	d077      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x144>
 8002e86:	2b40      	cmp	r3, #64	; 0x40
 8002e88:	d80e      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x76>
 8002e8a:	2b10      	cmp	r3, #16
 8002e8c:	f000 808a 	beq.w	8002fa4 <HAL_TIM_ConfigClockSource+0x172>
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d802      	bhi.n	8002e9a <HAL_TIM_ConfigClockSource+0x68>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d07e      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8002e98:	e099      	b.n	8002fce <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	f000 8089 	beq.w	8002fb2 <HAL_TIM_ConfigClockSource+0x180>
 8002ea0:	2b30      	cmp	r3, #48	; 0x30
 8002ea2:	f000 808d 	beq.w	8002fc0 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8002ea6:	e092      	b.n	8002fce <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8002ea8:	2b70      	cmp	r3, #112	; 0x70
 8002eaa:	d016      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0xa8>
 8002eac:	2b70      	cmp	r3, #112	; 0x70
 8002eae:	d804      	bhi.n	8002eba <HAL_TIM_ConfigClockSource+0x88>
 8002eb0:	2b50      	cmp	r3, #80	; 0x50
 8002eb2:	d040      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0x104>
 8002eb4:	2b60      	cmp	r3, #96	; 0x60
 8002eb6:	d04e      	beq.n	8002f56 <HAL_TIM_ConfigClockSource+0x124>
    break;
 8002eb8:	e089      	b.n	8002fce <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8002eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ebe:	d003      	beq.n	8002ec8 <HAL_TIM_ConfigClockSource+0x96>
 8002ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec4:	d024      	beq.n	8002f10 <HAL_TIM_ConfigClockSource+0xde>
    break;
 8002ec6:	e082      	b.n	8002fce <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0207 	bic.w	r2, r2, #7
 8002ed6:	609a      	str	r2, [r3, #8]
    break;
 8002ed8:	e079      	b.n	8002fce <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6899      	ldr	r1, [r3, #8]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f000 f98b 	bl	8003204 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002efc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	609a      	str	r2, [r3, #8]
    break;
 8002f0e:	e05e      	b.n	8002fce <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	6899      	ldr	r1, [r3, #8]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f000 f970 	bl	8003204 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f32:	609a      	str	r2, [r3, #8]
    break;
 8002f34:	e04b      	b.n	8002fce <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f000 f8da 	bl	80030fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2150      	movs	r1, #80	; 0x50
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f939 	bl	80031c6 <TIM_ITRx_SetConfig>
    break;
 8002f54:	e03b      	b.n	8002fce <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f000 f8fc 	bl	8003160 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2160      	movs	r1, #96	; 0x60
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f929 	bl	80031c6 <TIM_ITRx_SetConfig>
    break;
 8002f74:	e02b      	b.n	8002fce <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6859      	ldr	r1, [r3, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	461a      	mov	r2, r3
 8002f84:	f000 f8ba 	bl	80030fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2140      	movs	r1, #64	; 0x40
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f919 	bl	80031c6 <TIM_ITRx_SetConfig>
    break;
 8002f94:	e01b      	b.n	8002fce <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f912 	bl	80031c6 <TIM_ITRx_SetConfig>
    break;
 8002fa2:	e014      	b.n	8002fce <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2110      	movs	r1, #16
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f90b 	bl	80031c6 <TIM_ITRx_SetConfig>
    break;
 8002fb0:	e00d      	b.n	8002fce <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2120      	movs	r1, #32
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 f904 	bl	80031c6 <TIM_ITRx_SetConfig>
    break;
 8002fbe:	e006      	b.n	8002fce <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2130      	movs	r1, #48	; 0x30
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 f8fd 	bl	80031c6 <TIM_ITRx_SetConfig>
    break;
 8002fcc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr

08002ffa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr

0800301e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a2a      	ldr	r2, [pc, #168]	; (80030f0 <TIM_Base_SetConfig+0xc0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00b      	beq.n	8003064 <TIM_Base_SetConfig+0x34>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003052:	d007      	beq.n	8003064 <TIM_Base_SetConfig+0x34>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a27      	ldr	r2, [pc, #156]	; (80030f4 <TIM_Base_SetConfig+0xc4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d003      	beq.n	8003064 <TIM_Base_SetConfig+0x34>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a26      	ldr	r2, [pc, #152]	; (80030f8 <TIM_Base_SetConfig+0xc8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d108      	bne.n	8003076 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <TIM_Base_SetConfig+0xc0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00b      	beq.n	8003096 <TIM_Base_SetConfig+0x66>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d007      	beq.n	8003096 <TIM_Base_SetConfig+0x66>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <TIM_Base_SetConfig+0xc4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d003      	beq.n	8003096 <TIM_Base_SetConfig+0x66>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <TIM_Base_SetConfig+0xc8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d108      	bne.n	80030a8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ae:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a07      	ldr	r2, [pc, #28]	; (80030f0 <TIM_Base_SetConfig+0xc0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d103      	bne.n	80030e0 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	615a      	str	r2, [r3, #20]
}
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	40012c00 	.word	0x40012c00
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40000800 	.word	0x40000800

080030fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f023 0201 	bic.w	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800312e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f023 030a 	bic.w	r3, r3, #10
 8003140:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f023 0210 	bic.w	r2, r3, #16
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003192:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	031b      	lsls	r3, r3, #12
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	621a      	str	r2, [r3, #32]
}
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	460b      	mov	r3, r1
 80031d0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e2:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80031e4:	887b      	ldrh	r3, [r7, #2]
 80031e6:	f043 0307 	orr.w	r3, r3, #7
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	609a      	str	r2, [r3, #8]
}
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	021a      	lsls	r2, r3, #8
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	431a      	orrs	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4313      	orrs	r3, r2
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	609a      	str	r2, [r3, #8]
}
 800323c:	bf00      	nop
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800325a:	2302      	movs	r3, #2
 800325c:	e032      	b.n	80032c4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800327c:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800329e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr

080032ce <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr

080032f2 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80032f2:	b084      	sub	sp, #16
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	f107 0014 	add.w	r0, r7, #20
 8003300:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	b004      	add	sp, #16
 8003310:	4770      	bx	lr

08003312 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003312:	b480      	push	{r7}
 8003314:	b085      	sub	sp, #20
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 800331e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003322:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	b29b      	uxth	r3, r3
 8003330:	4313      	orrs	r3, r2
 8003332:	b29a      	uxth	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8003352:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8003356:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	b29b      	uxth	r3, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	b29b      	uxth	r3, r3
 8003368:	4013      	ands	r3, r2
 800336a:	b29a      	uxth	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr

0800337e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	460b      	mov	r3, r1
 8003388:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003396:	b084      	sub	sp, #16
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	f107 0014 	add.w	r0, r7, #20
 80033a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff ffa2 	bl	8003312 <USB_EnableGlobalInt>
    
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033da:	b004      	add	sp, #16
 80033dc:	4770      	bx	lr
	...

080033e0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033e0:	b490      	push	{r4, r7}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	78db      	ldrb	r3, [r3, #3]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d85f      	bhi.n	80034b2 <USB_ActivateEndpoint+0xd2>
 80033f2:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <USB_ActivateEndpoint+0x18>)
 80033f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f8:	08003409 	.word	0x08003409
 80033fc:	08003487 	.word	0x08003487
 8003400:	08003435 	.word	0x08003435
 8003404:	0800345b 	.word	0x0800345b
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800341a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341e:	b29a      	uxth	r2, r3
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342e:	b292      	uxth	r2, r2
 8003430:	801a      	strh	r2, [r3, #0]
    break;
 8003432:	e03f      	b.n	80034b4 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	7812      	ldrb	r2, [r2, #0]
 8003448:	0092      	lsls	r2, r2, #2
 800344a:	440a      	add	r2, r1
 800344c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003454:	b29b      	uxth	r3, r3
 8003456:	8013      	strh	r3, [r2, #0]
    break;
 8003458:	e02c      	b.n	80034b4 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800346c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003470:	b29a      	uxth	r2, r3
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8003480:	b292      	uxth	r2, r2
 8003482:	801a      	strh	r2, [r3, #0]
    break;
 8003484:	e016      	b.n	80034b4 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349c:	b29a      	uxth	r2, r3
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034ac:	b292      	uxth	r2, r2
 80034ae:	801a      	strh	r2, [r3, #0]
    break;
 80034b0:	e000      	b.n	80034b4 <USB_ActivateEndpoint+0xd4>
  default:
      break;
 80034b2:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80034c6:	4013      	ands	r3, r2
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	4313      	orrs	r3, r2
 80034d2:	b299      	uxth	r1, r3
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	441a      	add	r2, r3
 80034de:	4b75      	ldr	r3, [pc, #468]	; (80036b4 <USB_ActivateEndpoint+0x2d4>)
 80034e0:	430b      	orrs	r3, r1
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	7a9b      	ldrb	r3, [r3, #10]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f040 80e8 	bne.w	80036c0 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	785b      	ldrb	r3, [r3, #1]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d04c      	beq.n	8003592 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	889b      	ldrh	r3, [r3, #4]
 80034fc:	085b      	lsrs	r3, r3, #1
 80034fe:	b29b      	uxth	r3, r3
 8003500:	0059      	lsls	r1, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003508:	b29b      	uxth	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	005a      	lsls	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800351e:	460a      	mov	r2, r1
 8003520:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	d013      	beq.n	8003560 <USB_ActivateEndpoint+0x180>
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b29a      	uxth	r2, r3
 8003546:	f640 730f 	movw	r3, #3855	; 0xf0f
 800354a:	4013      	ands	r3, r2
 800354c:	b299      	uxth	r1, r3
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	441a      	add	r2, r3
 8003558:	4b57      	ldr	r3, [pc, #348]	; (80036b8 <USB_ActivateEndpoint+0x2d8>)
 800355a:	430b      	orrs	r3, r1
 800355c:	b29b      	uxth	r3, r3
 800355e:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b29b      	uxth	r3, r3
 800356e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003576:	b29c      	uxth	r4, r3
 8003578:	f084 0320 	eor.w	r3, r4, #32
 800357c:	b29c      	uxth	r4, r3
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	441a      	add	r2, r3
 8003588:	4b4a      	ldr	r3, [pc, #296]	; (80036b4 <USB_ActivateEndpoint+0x2d4>)
 800358a:	4323      	orrs	r3, r4
 800358c:	b29b      	uxth	r3, r3
 800358e:	8013      	strh	r3, [r2, #0]
 8003590:	e1d9      	b.n	8003946 <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	889b      	ldrh	r3, [r3, #4]
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	b29b      	uxth	r3, r3
 800359a:	0059      	lsls	r1, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	3304      	adds	r3, #4
 80035b0:	005a      	lsls	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035ba:	460a      	mov	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	461a      	mov	r2, r3
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4413      	add	r3, r2
 80035d0:	3306      	adds	r3, #6
 80035d2:	005a      	lsls	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b3e      	cmp	r3, #62	; 0x3e
 80035e4:	d918      	bls.n	8003618 <USB_ActivateEndpoint+0x238>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	81fb      	strh	r3, [r7, #14]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d102      	bne.n	8003600 <USB_ActivateEndpoint+0x220>
 80035fa:	89fb      	ldrh	r3, [r7, #14]
 80035fc:	3b01      	subs	r3, #1
 80035fe:	81fb      	strh	r3, [r7, #14]
 8003600:	89fb      	ldrh	r3, [r7, #14]
 8003602:	029b      	lsls	r3, r3, #10
 8003604:	b29b      	uxth	r3, r3
 8003606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800360a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800360e:	b29b      	uxth	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e012      	b.n	800363e <USB_ActivateEndpoint+0x25e>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	085b      	lsrs	r3, r3, #1
 800361e:	81fb      	strh	r3, [r7, #14]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <USB_ActivateEndpoint+0x252>
 800362c:	89fb      	ldrh	r3, [r7, #14]
 800362e:	3301      	adds	r3, #1
 8003630:	81fb      	strh	r3, [r7, #14]
 8003632:	89fb      	ldrh	r3, [r7, #14]
 8003634:	029b      	lsls	r3, r3, #10
 8003636:	b29b      	uxth	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <USB_ActivateEndpoint+0x29c>
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	b29a      	uxth	r2, r3
 8003662:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003666:	4013      	ands	r3, r2
 8003668:	b299      	uxth	r1, r3
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	441a      	add	r2, r3
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <USB_ActivateEndpoint+0x2dc>)
 8003676:	430b      	orrs	r3, r1
 8003678:	b29b      	uxth	r3, r3
 800367a:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	b29c      	uxth	r4, r3
 8003694:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003698:	b29c      	uxth	r4, r3
 800369a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800369e:	b29c      	uxth	r4, r3
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	441a      	add	r2, r3
 80036aa:	4b02      	ldr	r3, [pc, #8]	; (80036b4 <USB_ActivateEndpoint+0x2d4>)
 80036ac:	4323      	orrs	r3, r4
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	8013      	strh	r3, [r2, #0]
 80036b2:	e148      	b.n	8003946 <USB_ActivateEndpoint+0x566>
 80036b4:	ffff8080 	.word	0xffff8080
 80036b8:	ffff80c0 	.word	0xffff80c0
 80036bc:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	f640 630f 	movw	r3, #3599	; 0xe0f
 80036d2:	4013      	ands	r3, r2
 80036d4:	b299      	uxth	r1, r3
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	441a      	add	r2, r3
 80036e0:	4b9c      	ldr	r3, [pc, #624]	; (8003954 <USB_ActivateEndpoint+0x574>)
 80036e2:	430b      	orrs	r3, r1
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	88db      	ldrh	r3, [r3, #6]
 80036ec:	085b      	lsrs	r3, r3, #1
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	0059      	lsls	r1, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	005a      	lsls	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800370e:	460a      	mov	r2, r1
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	891b      	ldrh	r3, [r3, #8]
 8003716:	085b      	lsrs	r3, r3, #1
 8003718:	b29b      	uxth	r3, r3
 800371a:	0059      	lsls	r1, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003722:	b29b      	uxth	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	4413      	add	r3, r2
 800372e:	3304      	adds	r3, #4
 8003730:	005a      	lsls	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4413      	add	r3, r2
 8003736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800373a:	460a      	mov	r2, r1
 800373c:	601a      	str	r2, [r3, #0]
    
    if (ep->is_in==0)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f040 8083 	bne.w	800384e <USB_ActivateEndpoint+0x46e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	b29b      	uxth	r3, r3
 8003756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d013      	beq.n	8003786 <USB_ActivateEndpoint+0x3a6>
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b29a      	uxth	r2, r3
 800376c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003770:	4013      	ands	r3, r2
 8003772:	b299      	uxth	r1, r3
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	441a      	add	r2, r3
 800377e:	4b76      	ldr	r3, [pc, #472]	; (8003958 <USB_ActivateEndpoint+0x578>)
 8003780:	430b      	orrs	r3, r1
 8003782:	b29b      	uxth	r3, r3
 8003784:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	b29b      	uxth	r3, r3
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	d013      	beq.n	80037c4 <USB_ActivateEndpoint+0x3e4>
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	f640 730f 	movw	r3, #3855	; 0xf0f
 80037ae:	4013      	ands	r3, r2
 80037b0:	b299      	uxth	r1, r3
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	441a      	add	r2, r3
 80037bc:	4b67      	ldr	r3, [pc, #412]	; (800395c <USB_ActivateEndpoint+0x57c>)
 80037be:	430b      	orrs	r3, r1
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80037d6:	4013      	ands	r3, r2
 80037d8:	b299      	uxth	r1, r3
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	441a      	add	r2, r3
 80037e4:	4b5d      	ldr	r3, [pc, #372]	; (800395c <USB_ActivateEndpoint+0x57c>)
 80037e6:	430b      	orrs	r3, r1
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003802:	b29c      	uxth	r4, r3
 8003804:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003808:	b29c      	uxth	r4, r3
 800380a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800380e:	b29c      	uxth	r4, r3
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	441a      	add	r2, r3
 800381a:	4b51      	ldr	r3, [pc, #324]	; (8003960 <USB_ActivateEndpoint+0x580>)
 800381c:	4323      	orrs	r3, r4
 800381e:	b29b      	uxth	r3, r3
 8003820:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003838:	b29c      	uxth	r4, r3
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	441a      	add	r2, r3
 8003844:	4b46      	ldr	r3, [pc, #280]	; (8003960 <USB_ActivateEndpoint+0x580>)
 8003846:	4323      	orrs	r3, r4
 8003848:	b29b      	uxth	r3, r3
 800384a:	8013      	strh	r3, [r2, #0]
 800384c:	e07b      	b.n	8003946 <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	b29b      	uxth	r3, r3
 800385c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d013      	beq.n	800388c <USB_ActivateEndpoint+0x4ac>
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	b29a      	uxth	r2, r3
 8003872:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003876:	4013      	ands	r3, r2
 8003878:	b299      	uxth	r1, r3
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	441a      	add	r2, r3
 8003884:	4b34      	ldr	r3, [pc, #208]	; (8003958 <USB_ActivateEndpoint+0x578>)
 8003886:	430b      	orrs	r3, r1
 8003888:	b29b      	uxth	r3, r3
 800388a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d013      	beq.n	80038ca <USB_ActivateEndpoint+0x4ea>
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80038b4:	4013      	ands	r3, r2
 80038b6:	b299      	uxth	r1, r3
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	441a      	add	r2, r3
 80038c2:	4b26      	ldr	r3, [pc, #152]	; (800395c <USB_ActivateEndpoint+0x57c>)
 80038c4:	430b      	orrs	r3, r1
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80038dc:	4013      	ands	r3, r2
 80038de:	b299      	uxth	r1, r3
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	441a      	add	r2, r3
 80038ea:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <USB_ActivateEndpoint+0x578>)
 80038ec:	430b      	orrs	r3, r1
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003908:	b29c      	uxth	r4, r3
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	441a      	add	r2, r3
 8003914:	4b12      	ldr	r3, [pc, #72]	; (8003960 <USB_ActivateEndpoint+0x580>)
 8003916:	4323      	orrs	r3, r4
 8003918:	b29b      	uxth	r3, r3
 800391a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b29b      	uxth	r3, r3
 800392a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800392e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003932:	b29c      	uxth	r4, r3
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	441a      	add	r2, r3
 800393e:	4b08      	ldr	r3, [pc, #32]	; (8003960 <USB_ActivateEndpoint+0x580>)
 8003940:	4323      	orrs	r3, r4
 8003942:	b29b      	uxth	r3, r3
 8003944:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bc90      	pop	{r4, r7}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	ffff8180 	.word	0xffff8180
 8003958:	ffffc080 	.word	0xffffc080
 800395c:	ffff80c0 	.word	0xffff80c0
 8003960:	ffff8080 	.word	0xffff8080

08003964 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003964:	b490      	push	{r4, r7}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	7a9b      	ldrb	r3, [r3, #10]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d16d      	bne.n	8003a52 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	785b      	ldrb	r3, [r3, #1]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d034      	beq.n	80039e8 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d013      	beq.n	80039bc <USB_DeactivateEndpoint+0x58>
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80039a6:	4013      	ands	r3, r2
 80039a8:	b299      	uxth	r1, r3
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	441a      	add	r2, r3
 80039b4:	4b68      	ldr	r3, [pc, #416]	; (8003b58 <USB_DeactivateEndpoint+0x1f4>)
 80039b6:	430b      	orrs	r3, r1
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d2:	b29c      	uxth	r4, r3
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	4b5f      	ldr	r3, [pc, #380]	; (8003b5c <USB_DeactivateEndpoint+0x1f8>)
 80039e0:	4323      	orrs	r3, r4
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	8013      	strh	r3, [r2, #0]
 80039e6:	e139      	b.n	8003c5c <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d013      	beq.n	8003a26 <USB_DeactivateEndpoint+0xc2>
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003a10:	4013      	ands	r3, r2
 8003a12:	b299      	uxth	r1, r3
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	441a      	add	r2, r3
 8003a1e:	4b50      	ldr	r3, [pc, #320]	; (8003b60 <USB_DeactivateEndpoint+0x1fc>)
 8003a20:	430b      	orrs	r3, r1
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3c:	b29c      	uxth	r4, r3
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	441a      	add	r2, r3
 8003a48:	4b44      	ldr	r3, [pc, #272]	; (8003b5c <USB_DeactivateEndpoint+0x1f8>)
 8003a4a:	4323      	orrs	r3, r4
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	8013      	strh	r3, [r2, #0]
 8003a50:	e104      	b.n	8003c5c <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	785b      	ldrb	r3, [r3, #1]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 8084 	bne.w	8003b64 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d013      	beq.n	8003a9a <USB_DeactivateEndpoint+0x136>
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003a84:	4013      	ands	r3, r2
 8003a86:	b299      	uxth	r1, r3
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	441a      	add	r2, r3
 8003a92:	4b33      	ldr	r3, [pc, #204]	; (8003b60 <USB_DeactivateEndpoint+0x1fc>)
 8003a94:	430b      	orrs	r3, r1
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d013      	beq.n	8003ad8 <USB_DeactivateEndpoint+0x174>
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	b299      	uxth	r1, r3
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	441a      	add	r2, r3
 8003ad0:	4b21      	ldr	r3, [pc, #132]	; (8003b58 <USB_DeactivateEndpoint+0x1f4>)
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003aea:	4013      	ands	r3, r2
 8003aec:	b299      	uxth	r1, r3
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	441a      	add	r2, r3
 8003af8:	4b17      	ldr	r3, [pc, #92]	; (8003b58 <USB_DeactivateEndpoint+0x1f4>)
 8003afa:	430b      	orrs	r3, r1
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b16:	b29c      	uxth	r4, r3
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	441a      	add	r2, r3
 8003b22:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <USB_DeactivateEndpoint+0x1f8>)
 8003b24:	4323      	orrs	r3, r4
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b40:	b29c      	uxth	r4, r3
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	441a      	add	r2, r3
 8003b4c:	4b03      	ldr	r3, [pc, #12]	; (8003b5c <USB_DeactivateEndpoint+0x1f8>)
 8003b4e:	4323      	orrs	r3, r4
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	8013      	strh	r3, [r2, #0]
 8003b54:	e082      	b.n	8003c5c <USB_DeactivateEndpoint+0x2f8>
 8003b56:	bf00      	nop
 8003b58:	ffff80c0 	.word	0xffff80c0
 8003b5c:	ffff8080 	.word	0xffff8080
 8003b60:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d013      	beq.n	8003ba2 <USB_DeactivateEndpoint+0x23e>
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	b299      	uxth	r1, r3
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	441a      	add	r2, r3
 8003b9a:	4b33      	ldr	r3, [pc, #204]	; (8003c68 <USB_DeactivateEndpoint+0x304>)
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d013      	beq.n	8003be0 <USB_DeactivateEndpoint+0x27c>
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003bca:	4013      	ands	r3, r2
 8003bcc:	b299      	uxth	r1, r3
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	441a      	add	r2, r3
 8003bd8:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <USB_DeactivateEndpoint+0x308>)
 8003bda:	430b      	orrs	r3, r1
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	b299      	uxth	r1, r3
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	441a      	add	r2, r3
 8003c00:	4b19      	ldr	r3, [pc, #100]	; (8003c68 <USB_DeactivateEndpoint+0x304>)
 8003c02:	430b      	orrs	r3, r1
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1e:	b29c      	uxth	r4, r3
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	441a      	add	r2, r3
 8003c2a:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <USB_DeactivateEndpoint+0x30c>)
 8003c2c:	4323      	orrs	r3, r4
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c48:	b29c      	uxth	r4, r3
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	441a      	add	r2, r3
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <USB_DeactivateEndpoint+0x30c>)
 8003c56:	4323      	orrs	r3, r4
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc90      	pop	{r4, r7}
 8003c66:	4770      	bx	lr
 8003c68:	ffffc080 	.word	0xffffc080
 8003c6c:	ffff80c0 	.word	0xffff80c0
 8003c70:	ffff8080 	.word	0xffff8080

08003c74 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b08d      	sub	sp, #52	; 0x34
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	785b      	ldrb	r3, [r3, #1]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	f040 8149 	bne.w	8003f24 <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d909      	bls.n	8003cb2 <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	699a      	ldr	r2, [r3, #24]
 8003ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003caa:	1ad2      	subs	r2, r2, r3
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	619a      	str	r2, [r3, #24]
 8003cb0:	e005      	b.n	8003cbe <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	7a9b      	ldrb	r3, [r3, #10]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d11b      	bne.n	8003cfe <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6959      	ldr	r1, [r3, #20]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	889a      	ldrh	r2, [r3, #4]
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fb7d 	bl	80043d2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4413      	add	r3, r2
 8003cea:	3302      	adds	r3, #2
 8003cec:	005a      	lsls	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	e0f6      	b.n	8003eec <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d059      	beq.n	8003dc8 <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	785b      	ldrb	r3, [r3, #1]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d13b      	bne.n	8003d94 <USB_EPStartXfer+0x120>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	461a      	mov	r2, r3
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3306      	adds	r3, #6
 8003d30:	005a      	lsls	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	2b3e      	cmp	r3, #62	; 0x3e
 8003d40:	d916      	bls.n	8003d70 <USB_EPStartXfer+0xfc>
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	f003 031f 	and.w	r3, r3, #31
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <USB_EPStartXfer+0xe4>
 8003d52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d54:	3b01      	subs	r3, #1
 8003d56:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d5a:	029b      	lsls	r3, r3, #10
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	461a      	mov	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e027      	b.n	8003dc0 <USB_EPStartXfer+0x14c>
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	085b      	lsrs	r3, r3, #1
 8003d74:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <USB_EPStartXfer+0x112>
 8003d80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d82:	3301      	adds	r3, #1
 8003d84:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d88:	029b      	lsls	r3, r3, #10
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e015      	b.n	8003dc0 <USB_EPStartXfer+0x14c>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	785b      	ldrb	r3, [r3, #1]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d111      	bne.n	8003dc0 <USB_EPStartXfer+0x14c>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4413      	add	r3, r2
 8003dae:	3302      	adds	r3, #2
 8003db0:	005a      	lsls	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	891b      	ldrh	r3, [r3, #8]
 8003dc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003dc6:	e058      	b.n	8003e7a <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d13b      	bne.n	8003e48 <USB_EPStartXfer+0x1d4>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4413      	add	r3, r2
 8003de2:	3302      	adds	r3, #2
 8003de4:	005a      	lsls	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	2b3e      	cmp	r3, #62	; 0x3e
 8003df4:	d916      	bls.n	8003e24 <USB_EPStartXfer+0x1b0>
 8003df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d102      	bne.n	8003e0c <USB_EPStartXfer+0x198>
 8003e06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e0e:	029b      	lsls	r3, r3, #10
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e027      	b.n	8003e74 <USB_EPStartXfer+0x200>
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <USB_EPStartXfer+0x1c6>
 8003e34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e36:	3301      	adds	r3, #1
 8003e38:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e3c:	029b      	lsls	r3, r3, #10
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e015      	b.n	8003e74 <USB_EPStartXfer+0x200>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	785b      	ldrb	r3, [r3, #1]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d111      	bne.n	8003e74 <USB_EPStartXfer+0x200>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	461a      	mov	r2, r3
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	3302      	adds	r3, #2
 8003e64:	005a      	lsls	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e6e:	461a      	mov	r2, r3
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	88db      	ldrh	r3, [r3, #6]
 8003e78:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6959      	ldr	r1, [r3, #20]
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 faa4 	bl	80043d2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d114      	bne.n	8003ebc <USB_EPStartXfer+0x248>
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	b299      	uxth	r1, r3
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	441a      	add	r2, r3
 8003eb2:	4b92      	ldr	r3, [pc, #584]	; (80040fc <USB_EPStartXfer+0x488>)
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	8013      	strh	r3, [r2, #0]
 8003eba:	e017      	b.n	8003eec <USB_EPStartXfer+0x278>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	785b      	ldrb	r3, [r3, #1]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d113      	bne.n	8003eec <USB_EPStartXfer+0x278>
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	b299      	uxth	r1, r3
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	441a      	add	r2, r3
 8003ee4:	4b86      	ldr	r3, [pc, #536]	; (8004100 <USB_EPStartXfer+0x48c>)
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f02:	b29c      	uxth	r4, r3
 8003f04:	f084 0310 	eor.w	r3, r4, #16
 8003f08:	b29c      	uxth	r4, r3
 8003f0a:	f084 0320 	eor.w	r3, r4, #32
 8003f0e:	b29c      	uxth	r4, r3
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	441a      	add	r2, r3
 8003f1a:	4b7a      	ldr	r3, [pc, #488]	; (8004104 <USB_EPStartXfer+0x490>)
 8003f1c:	4323      	orrs	r3, r4
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	8013      	strh	r3, [r2, #0]
 8003f22:	e122      	b.n	800416a <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	699a      	ldr	r2, [r3, #24]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d909      	bls.n	8003f44 <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3c:	1ad2      	subs	r2, r2, r3
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	619a      	str	r2, [r3, #24]
 8003f42:	e005      	b.n	8003f50 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	7a9b      	ldrb	r3, [r3, #10]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d13b      	bne.n	8003fd0 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	3306      	adds	r3, #6
 8003f6c:	005a      	lsls	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	2b3e      	cmp	r3, #62	; 0x3e
 8003f7c:	d916      	bls.n	8003fac <USB_EPStartXfer+0x338>
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	847b      	strh	r3, [r7, #34]	; 0x22
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d102      	bne.n	8003f94 <USB_EPStartXfer+0x320>
 8003f8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f90:	3b01      	subs	r3, #1
 8003f92:	847b      	strh	r3, [r7, #34]	; 0x22
 8003f94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f96:	029b      	lsls	r3, r3, #10
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e0c3      	b.n	8004134 <USB_EPStartXfer+0x4c0>
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	847b      	strh	r3, [r7, #34]	; 0x22
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <USB_EPStartXfer+0x34e>
 8003fbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	847b      	strh	r3, [r7, #34]	; 0x22
 8003fc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fc4:	029b      	lsls	r3, r3, #10
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	e0b1      	b.n	8004134 <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	785b      	ldrb	r3, [r3, #1]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d13b      	bne.n	8004050 <USB_EPStartXfer+0x3dc>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4413      	add	r3, r2
 8003fea:	3302      	adds	r3, #2
 8003fec:	005a      	lsls	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffa:	2b3e      	cmp	r3, #62	; 0x3e
 8003ffc:	d916      	bls.n	800402c <USB_EPStartXfer+0x3b8>
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	843b      	strh	r3, [r7, #32]
 8004004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	2b00      	cmp	r3, #0
 800400c:	d102      	bne.n	8004014 <USB_EPStartXfer+0x3a0>
 800400e:	8c3b      	ldrh	r3, [r7, #32]
 8004010:	3b01      	subs	r3, #1
 8004012:	843b      	strh	r3, [r7, #32]
 8004014:	8c3b      	ldrh	r3, [r7, #32]
 8004016:	029b      	lsls	r3, r3, #10
 8004018:	b29b      	uxth	r3, r3
 800401a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800401e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004022:	b29b      	uxth	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e027      	b.n	800407c <USB_EPStartXfer+0x408>
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	843b      	strh	r3, [r7, #32]
 8004032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <USB_EPStartXfer+0x3ce>
 800403c:	8c3b      	ldrh	r3, [r7, #32]
 800403e:	3301      	adds	r3, #1
 8004040:	843b      	strh	r3, [r7, #32]
 8004042:	8c3b      	ldrh	r3, [r7, #32]
 8004044:	029b      	lsls	r3, r3, #10
 8004046:	b29b      	uxth	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	e015      	b.n	800407c <USB_EPStartXfer+0x408>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	785b      	ldrb	r3, [r3, #1]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d111      	bne.n	800407c <USB_EPStartXfer+0x408>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800405e:	b29b      	uxth	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4413      	add	r3, r2
 800406a:	3302      	adds	r3, #2
 800406c:	005a      	lsls	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004076:	461a      	mov	r2, r3
 8004078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	785b      	ldrb	r3, [r3, #1]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d141      	bne.n	8004108 <USB_EPStartXfer+0x494>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800408a:	b29b      	uxth	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	3306      	adds	r3, #6
 8004098:	005a      	lsls	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a6:	2b3e      	cmp	r3, #62	; 0x3e
 80040a8:	d916      	bls.n	80040d8 <USB_EPStartXfer+0x464>
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	83fb      	strh	r3, [r7, #30]
 80040b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <USB_EPStartXfer+0x44c>
 80040ba:	8bfb      	ldrh	r3, [r7, #30]
 80040bc:	3b01      	subs	r3, #1
 80040be:	83fb      	strh	r3, [r7, #30]
 80040c0:	8bfb      	ldrh	r3, [r7, #30]
 80040c2:	029b      	lsls	r3, r3, #10
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e02d      	b.n	8004134 <USB_EPStartXfer+0x4c0>
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	83fb      	strh	r3, [r7, #30]
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <USB_EPStartXfer+0x47a>
 80040e8:	8bfb      	ldrh	r3, [r7, #30]
 80040ea:	3301      	adds	r3, #1
 80040ec:	83fb      	strh	r3, [r7, #30]
 80040ee:	8bfb      	ldrh	r3, [r7, #30]
 80040f0:	029b      	lsls	r3, r3, #10
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	e01b      	b.n	8004134 <USB_EPStartXfer+0x4c0>
 80040fc:	ffff80c0 	.word	0xffff80c0
 8004100:	ffffc080 	.word	0xffffc080
 8004104:	ffff8080 	.word	0xffff8080
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	785b      	ldrb	r3, [r3, #1]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d111      	bne.n	8004134 <USB_EPStartXfer+0x4c0>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004116:	b29b      	uxth	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	3302      	adds	r3, #2
 8004124:	005a      	lsls	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800412e:	461a      	mov	r2, r3
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	b29b      	uxth	r3, r3
 8004142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414a:	b29c      	uxth	r4, r3
 800414c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004150:	b29c      	uxth	r4, r3
 8004152:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004156:	b29c      	uxth	r4, r3
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	441a      	add	r2, r3
 8004162:	4b04      	ldr	r3, [pc, #16]	; (8004174 <USB_EPStartXfer+0x500>)
 8004164:	4323      	orrs	r3, r4
 8004166:	b29b      	uxth	r3, r3
 8004168:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3734      	adds	r7, #52	; 0x34
 8004170:	46bd      	mov	sp, r7
 8004172:	bd90      	pop	{r4, r7, pc}
 8004174:	ffff8080 	.word	0xffff8080

08004178 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8004178:	b490      	push	{r4, r7}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d118      	bne.n	80041bc <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	b29b      	uxth	r3, r3
 8004198:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 800419c:	401c      	ands	r4, r3
 800419e:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 80041a2:	f084 0410 	eor.w	r4, r4, #16
 80041a6:	b2a1      	uxth	r1, r4
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	441a      	add	r2, r3
 80041b2:	4b20      	ldr	r3, [pc, #128]	; (8004234 <USB_EPSetStall+0xbc>)
 80041b4:	430b      	orrs	r3, r1
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	8013      	strh	r3, [r2, #0]
 80041ba:	e034      	b.n	8004226 <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	785b      	ldrb	r3, [r3, #1]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d018      	beq.n	80041f6 <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041da:	b29c      	uxth	r4, r3
 80041dc:	f084 0310 	eor.w	r3, r4, #16
 80041e0:	b29c      	uxth	r4, r3
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	441a      	add	r2, r3
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <USB_EPSetStall+0xbc>)
 80041ee:	4323      	orrs	r3, r4
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	8013      	strh	r3, [r2, #0]
 80041f4:	e017      	b.n	8004226 <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420c:	b29c      	uxth	r4, r3
 800420e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004212:	b29c      	uxth	r4, r3
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	4b05      	ldr	r3, [pc, #20]	; (8004234 <USB_EPSetStall+0xbc>)
 8004220:	4323      	orrs	r3, r4
 8004222:	b29b      	uxth	r3, r3
 8004224:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bc90      	pop	{r4, r7}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	ffff8080 	.word	0xffff8080

08004238 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004238:	b490      	push	{r4, r7}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	785b      	ldrb	r3, [r3, #1]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d03a      	beq.n	80042c0 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	b29b      	uxth	r3, r3
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d013      	beq.n	8004288 <USB_EPClearStall+0x50>
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	b29a      	uxth	r2, r3
 800426e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004272:	4013      	ands	r3, r2
 8004274:	b299      	uxth	r1, r3
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	441a      	add	r2, r3
 8004280:	4b2f      	ldr	r3, [pc, #188]	; (8004340 <USB_EPClearStall+0x108>)
 8004282:	430b      	orrs	r3, r1
 8004284:	b29b      	uxth	r3, r3
 8004286:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	b29b      	uxth	r3, r3
 8004296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429e:	b29c      	uxth	r4, r3
 80042a0:	f084 0310 	eor.w	r3, r4, #16
 80042a4:	b29c      	uxth	r4, r3
 80042a6:	f084 0320 	eor.w	r3, r4, #32
 80042aa:	b29c      	uxth	r4, r3
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	441a      	add	r2, r3
 80042b6:	4b23      	ldr	r3, [pc, #140]	; (8004344 <USB_EPClearStall+0x10c>)
 80042b8:	4323      	orrs	r3, r4
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	8013      	strh	r3, [r2, #0]
 80042be:	e039      	b.n	8004334 <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d013      	beq.n	80042fe <USB_EPClearStall+0xc6>
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	f640 730f 	movw	r3, #3855	; 0xf0f
 80042e8:	4013      	ands	r3, r2
 80042ea:	b299      	uxth	r1, r3
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	441a      	add	r2, r3
 80042f6:	4b14      	ldr	r3, [pc, #80]	; (8004348 <USB_EPClearStall+0x110>)
 80042f8:	430b      	orrs	r3, r1
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004314:	b29c      	uxth	r4, r3
 8004316:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800431a:	b29c      	uxth	r4, r3
 800431c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004320:	b29c      	uxth	r4, r3
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	441a      	add	r2, r3
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <USB_EPClearStall+0x10c>)
 800432e:	4323      	orrs	r3, r4
 8004330:	b29b      	uxth	r3, r3
 8004332:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bc90      	pop	{r4, r7}
 800433e:	4770      	bx	lr
 8004340:	ffff80c0 	.word	0xffff80c0
 8004344:	ffff8080 	.word	0xffff8080
 8004348:	ffffc080 	.word	0xffffc080

0800434c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2280      	movs	r2, #128	; 0x80
 8004362:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr

08004372 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr

08004386 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 800439a:	b480      	push	{r7}
 800439c:	b085      	sub	sp, #20
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80043b0:	68fb      	ldr	r3, [r7, #12]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b08b      	sub	sp, #44	; 0x2c
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	4611      	mov	r1, r2
 80043de:	461a      	mov	r2, r3
 80043e0:	460b      	mov	r3, r1
 80043e2:	80fb      	strh	r3, [r7, #6]
 80043e4:	4613      	mov	r3, r2
 80043e6:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80043e8:	88bb      	ldrh	r3, [r7, #4]
 80043ea:	3301      	adds	r3, #1
 80043ec:	105b      	asrs	r3, r3, #1
 80043ee:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
 80043f4:	2300      	movs	r3, #0
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	461a      	mov	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4413      	add	r3, r2
 800440a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800440e:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
 8004414:	e01b      	b.n	800444e <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	3301      	adds	r3, #1
 8004420:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	461a      	mov	r2, r3
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	1c9a      	adds	r2, r3, #2
 8004434:	623a      	str	r2, [r7, #32]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	b292      	uxth	r2, r2
 800443a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	3302      	adds	r3, #2
 8004440:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	3301      	adds	r3, #1
 8004446:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	3b01      	subs	r3, #1
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e0      	bne.n	8004416 <USB_WritePMA+0x44>
  }
}
 8004454:	bf00      	nop
 8004456:	372c      	adds	r7, #44	; 0x2c
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr

0800445e <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800445e:	b480      	push	{r7}
 8004460:	b089      	sub	sp, #36	; 0x24
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	4611      	mov	r1, r2
 800446a:	461a      	mov	r2, r3
 800446c:	460b      	mov	r3, r1
 800446e:	80fb      	strh	r3, [r7, #6]
 8004470:	4613      	mov	r3, r2
 8004472:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8004474:	88bb      	ldrh	r3, [r7, #4]
 8004476:	3301      	adds	r3, #1
 8004478:	105b      	asrs	r3, r3, #1
 800447a:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 8004480:	2300      	movs	r3, #0
 8004482:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	461a      	mov	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004492:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	e00e      	b.n	80044b8 <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	1d1a      	adds	r2, r3, #4
 800449e:	61ba      	str	r2, [r7, #24]
 80044a0:	6819      	ldr	r1, [r3, #0]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	60ba      	str	r2, [r7, #8]
 80044a8:	b28a      	uxth	r2, r1
 80044aa:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	3301      	adds	r3, #1
 80044b0:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1ed      	bne.n	800449a <USB_ReadPMA+0x3c>
  }
}
 80044be:	bf00      	nop
 80044c0:	3724      	adds	r7, #36	; 0x24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr

080044c8 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80044d4:	2300      	movs	r3, #0
 80044d6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	7c1b      	ldrb	r3, [r3, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10e      	bne.n	80044fe <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80044e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044e4:	2202      	movs	r2, #2
 80044e6:	2181      	movs	r1, #129	; 0x81
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f004 fd0e 	bl	8008f0a <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80044ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044f2:	2202      	movs	r2, #2
 80044f4:	2101      	movs	r1, #1
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f004 fd07 	bl	8008f0a <USBD_LL_OpenEP>
 80044fc:	e00b      	b.n	8004516 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80044fe:	2340      	movs	r3, #64	; 0x40
 8004500:	2202      	movs	r2, #2
 8004502:	2181      	movs	r1, #129	; 0x81
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f004 fd00 	bl	8008f0a <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800450a:	2340      	movs	r3, #64	; 0x40
 800450c:	2202      	movs	r2, #2
 800450e:	2101      	movs	r1, #1
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f004 fcfa 	bl	8008f0a <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8004516:	2308      	movs	r3, #8
 8004518:	2203      	movs	r2, #3
 800451a:	2182      	movs	r1, #130	; 0x82
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f004 fcf4 	bl	8008f0a <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004522:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004526:	f004 fe11 	bl	800914c <USBD_static_malloc>
 800452a:	4602      	mov	r2, r0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	e026      	b.n	8004590 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004548:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2200      	movs	r2, #0
 8004558:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2200      	movs	r2, #0
 8004560:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	7c1b      	ldrb	r3, [r3, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d109      	bne.n	8004580 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004576:	2101      	movs	r1, #1
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f004 fdb0 	bl	80090de <USBD_LL_PrepareReceive>
 800457e:	e007      	b.n	8004590 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004586:	2340      	movs	r3, #64	; 0x40
 8004588:	2101      	movs	r1, #1
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f004 fda7 	bl	80090de <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8004590:	7bfb      	ldrb	r3, [r7, #15]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	460b      	mov	r3, r1
 80045a4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 80045aa:	2181      	movs	r1, #129	; 0x81
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f004 fcd2 	bl	8008f56 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 80045b2:	2101      	movs	r1, #1
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f004 fcce 	bl	8008f56 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 80045ba:	2182      	movs	r1, #130	; 0x82
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f004 fcca 	bl	8008f56 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00e      	beq.n	80045ea <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80045dc:	4618      	mov	r0, r3
 80045de:	f004 fdc1 	bl	8009164 <USBD_static_free>
    pdev->pClassData = NULL;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004604:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800460e:	2b00      	cmp	r3, #0
 8004610:	d03a      	beq.n	8004688 <USBD_CDC_Setup+0x94>
 8004612:	2b20      	cmp	r3, #32
 8004614:	d000      	beq.n	8004618 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8004616:	e043      	b.n	80046a0 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	88db      	ldrh	r3, [r3, #6]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d029      	beq.n	8004674 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	b25b      	sxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	da11      	bge.n	800464e <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004636:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	88d2      	ldrh	r2, [r2, #6]
 800463c:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 800463e:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	88db      	ldrh	r3, [r3, #6]
 8004644:	461a      	mov	r2, r3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f001 f80e 	bl	8005668 <USBD_CtlSendData>
    break;
 800464c:	e029      	b.n	80046a2 <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	785a      	ldrb	r2, [r3, #1]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	88db      	ldrh	r3, [r3, #6]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 8004664:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	88db      	ldrh	r3, [r3, #6]
 800466a:	461a      	mov	r2, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f001 f829 	bl	80056c4 <USBD_CtlPrepareRx>
    break;
 8004672:	e016      	b.n	80046a2 <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	7850      	ldrb	r0, [r2, #1]
 8004680:	2200      	movs	r2, #0
 8004682:	6839      	ldr	r1, [r7, #0]
 8004684:	4798      	blx	r3
    break;
 8004686:	e00c      	b.n	80046a2 <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	785b      	ldrb	r3, [r3, #1]
 800468c:	2b0a      	cmp	r3, #10
 800468e:	d001      	beq.n	8004694 <USBD_CDC_Setup+0xa0>
 8004690:	2b0b      	cmp	r3, #11
      break;
 8004692:	e005      	b.n	80046a0 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 8004694:	2201      	movs	r2, #1
 8004696:	4905      	ldr	r1, [pc, #20]	; (80046ac <USBD_CDC_Setup+0xb8>)
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 ffe5 	bl	8005668 <USBD_CtlSendData>
      break;
 800469e:	bf00      	nop
    break;
 80046a0:	bf00      	nop
  }
  return USBD_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000378 	.word	0x20000378

080046b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80046c2:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	e000      	b.n	80046dc <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 80046da:	2302      	movs	r3, #2
  }
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	460b      	mov	r3, r1
 80046f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80046f8:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80046fa:	78fb      	ldrb	r3, [r7, #3]
 80046fc:	4619      	mov	r1, r3
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f004 fd10 	bl	8009124 <USBD_LL_GetRxDataSize>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00d      	beq.n	8004732 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800472a:	4611      	mov	r1, r2
 800472c:	4798      	blx	r3

    return USBD_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	e000      	b.n	8004734 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004732:	2302      	movs	r3, #2
  }
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800474a:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d015      	beq.n	8004782 <USBD_CDC_EP0_RxReady+0x46>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800475c:	2bff      	cmp	r3, #255	; 0xff
 800475e:	d010      	beq.n	8004782 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800476e:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004776:	b292      	uxth	r2, r2
 8004778:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	22ff      	movs	r2, #255	; 0xff
 800477e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2243      	movs	r2, #67	; 0x43
 8004798:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800479a:	4b03      	ldr	r3, [pc, #12]	; (80047a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	2000008c 	.word	0x2000008c

080047ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2243      	movs	r2, #67	; 0x43
 80047b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80047ba:	4b03      	ldr	r3, [pc, #12]	; (80047c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80047bc:	4618      	mov	r0, r3
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	20000048 	.word	0x20000048

080047cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2243      	movs	r2, #67	; 0x43
 80047d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80047da:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	200000d0 	.word	0x200000d0

080047ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	220a      	movs	r2, #10
 80047f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80047fa:	4b03      	ldr	r3, [pc, #12]	; (8004808 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20000004 	.word	0x20000004

0800480c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004816:	2302      	movs	r3, #2
 8004818:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8004828:	2300      	movs	r3, #0
 800482a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	4613      	mov	r3, r2
 8004844:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800484c:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8004856:	88fa      	ldrh	r2, [r7, #6]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr

0800486a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800486a:	b480      	push	{r7}
 800486c:	b085      	sub	sp, #20
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800487a:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr

08004890 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800489e:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d017      	beq.n	80048da <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d110      	bne.n	80048d6 <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2181      	movs	r1, #129	; 0x81
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f004 fbe3 	bl	8009098 <USBD_LL_Transmit>
      
      return USBD_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	e002      	b.n	80048dc <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 80048da:	2302      	movs	r3, #2
  }
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80048f2:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d017      	beq.n	800492e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	7c1b      	ldrb	r3, [r3, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d109      	bne.n	800491a <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800490c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004910:	2101      	movs	r1, #1
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f004 fbe3 	bl	80090de <USBD_LL_PrepareReceive>
 8004918:	e007      	b.n	800492a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004920:	2340      	movs	r3, #64	; 0x40
 8004922:	2101      	movs	r1, #1
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f004 fbda 	bl	80090de <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800492e:	2302      	movs	r3, #2
  }
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	4613      	mov	r3, r2
 8004944:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800494c:	2302      	movs	r3, #2
 800494e:	e01a      	b.n	8004986 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	79fa      	ldrb	r2, [r7, #7]
 800497c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f004 fa4e 	bl	8008e20 <USBD_LL_Init>
  
  return USBD_OK; 
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d006      	beq.n	80049b0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	73fb      	strb	r3, [r7, #15]
 80049ae:	e001      	b.n	80049b4 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80049b0:	2302      	movs	r3, #2
 80049b2:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr

080049c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f004 fa83 	bl	8008ed4 <USBD_LL_Start>
  
  return USBD_OK;  
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr

080049ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80049f8:	2302      	movs	r3, #2
 80049fa:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00c      	beq.n	8004a20 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	78fa      	ldrb	r2, [r7, #3]
 8004a10:	4611      	mov	r1, r2
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	4798      	blx	r3
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	460b      	mov	r3, r1
 8004a34:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	78fa      	ldrb	r2, [r7, #3]
 8004a40:	4611      	mov	r1, r2
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	4798      	blx	r3
  return USBD_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fd59 	bl	800551a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004a76:	461a      	mov	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004a84:	f003 031f 	and.w	r3, r3, #31
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d00b      	beq.n	8004aa4 <USBD_LL_SetupStage+0x54>
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d011      	beq.n	8004ab4 <USBD_LL_SetupStage+0x64>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d117      	bne.n	8004ac4 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f987 	bl	8004db0 <USBD_StdDevReq>
    break;
 8004aa2:	e01a      	b.n	8004ada <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f9cf 	bl	8004e50 <USBD_StdItfReq>
    break;
 8004ab2:	e012      	b.n	8004ada <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004aba:	4619      	mov	r1, r3
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f9fa 	bl	8004eb6 <USBD_StdEPReq>
    break;
 8004ac2:	e00a      	b.n	8004ada <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004aca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f004 fa5e 	bl	8008f94 <USBD_LL_StallEP>
    break;
 8004ad8:	bf00      	nop
  }  
  return USBD_OK;  
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	460b      	mov	r3, r1
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004af2:	7afb      	ldrb	r3, [r7, #11]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d138      	bne.n	8004b6a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004afe:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d142      	bne.n	8004b90 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d914      	bls.n	8004b40 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	1ad2      	subs	r2, r2, r3
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	bf28      	it	cs
 8004b30:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	461a      	mov	r2, r3
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 fde1 	bl	8005700 <USBD_CtlContinueRx>
 8004b3e:	e027      	b.n	8004b90 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d105      	bne.n	8004b62 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 fdde 	bl	8005724 <USBD_CtlSendStatus>
 8004b68:	e012      	b.n	8004b90 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00c      	beq.n	8004b90 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d107      	bne.n	8004b90 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	7afa      	ldrb	r2, [r7, #11]
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	4798      	blx	r3
  }  
  return USBD_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8004ba8:	7afb      	ldrb	r3, [r7, #11]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d16c      	bne.n	8004c88 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3314      	adds	r3, #20
 8004bb2:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d157      	bne.n	8004c6e <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d915      	bls.n	8004bf6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	1ad2      	subs	r2, r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	461a      	mov	r2, r3
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fd5c 	bl	80056a0 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004be8:	2300      	movs	r3, #0
 8004bea:	2200      	movs	r2, #0
 8004bec:	2100      	movs	r1, #0
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f004 fa75 	bl	80090de <USBD_LL_PrepareReceive>
 8004bf4:	e03b      	b.n	8004c6e <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	68d2      	ldr	r2, [r2, #12]
 8004bfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c02:	fb02 f201 	mul.w	r2, r2, r1
 8004c06:	1a9b      	subs	r3, r3, r2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d11c      	bne.n	8004c46 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d316      	bcc.n	8004c46 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d20f      	bcs.n	8004c46 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004c26:	2200      	movs	r2, #0
 8004c28:	2100      	movs	r1, #0
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fd38 	bl	80056a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004c38:	2300      	movs	r3, #0
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f004 fa4d 	bl	80090de <USBD_LL_PrepareReceive>
 8004c44:	e013      	b.n	8004c6e <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d105      	bne.n	8004c68 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 fd6e 	bl	800574a <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d11a      	bne.n	8004cae <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f7ff fead 	bl	80049d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8004c86:	e012      	b.n	8004cae <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00c      	beq.n	8004cae <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d107      	bne.n	8004cae <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	7afa      	ldrb	r2, [r7, #11]
 8004ca8:	4611      	mov	r1, r2
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	4798      	blx	r3
  }  
  return USBD_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004cc0:	2340      	movs	r3, #64	; 0x40
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f004 f91f 	bl	8008f0a <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2240      	movs	r2, #64	; 0x40
 8004cd0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004cd4:	2340      	movs	r3, #64	; 0x40
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2180      	movs	r1, #128	; 0x80
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f004 f915 	bl	8008f0a <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2240      	movs	r2, #64	; 0x40
 8004ce4:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d009      	beq.n	8004d0c <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6852      	ldr	r2, [r2, #4]
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	4611      	mov	r1, r2
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	4798      	blx	r3
 
  
  return USBD_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	78fa      	ldrb	r2, [r7, #3]
 8004d26:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr

08004d34 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr

08004d5c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr

08004d7c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d10b      	bne.n	8004da6 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	2b09      	cmp	r3, #9
 8004dc4:	d839      	bhi.n	8004e3a <USBD_StdDevReq+0x8a>
 8004dc6:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <USBD_StdDevReq+0x1c>)
 8004dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dcc:	08004e1d 	.word	0x08004e1d
 8004dd0:	08004e31 	.word	0x08004e31
 8004dd4:	08004e3b 	.word	0x08004e3b
 8004dd8:	08004e27 	.word	0x08004e27
 8004ddc:	08004e3b 	.word	0x08004e3b
 8004de0:	08004dff 	.word	0x08004dff
 8004de4:	08004df5 	.word	0x08004df5
 8004de8:	08004e3b 	.word	0x08004e3b
 8004dec:	08004e13 	.word	0x08004e13
 8004df0:	08004e09 	.word	0x08004e09
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8004df4:	6839      	ldr	r1, [r7, #0]
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f936 	bl	8005068 <USBD_GetDescriptor>
    break;
 8004dfc:	e022      	b.n	8004e44 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8004dfe:	6839      	ldr	r1, [r7, #0]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fa25 	bl	8005250 <USBD_SetAddress>
    break;
 8004e06:	e01d      	b.n	8004e44 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8004e08:	6839      	ldr	r1, [r7, #0]
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fa5e 	bl	80052cc <USBD_SetConfig>
    break;
 8004e10:	e018      	b.n	8004e44 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8004e12:	6839      	ldr	r1, [r7, #0]
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fae1 	bl	80053dc <USBD_GetConfig>
    break;
 8004e1a:	e013      	b.n	8004e44 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8004e1c:	6839      	ldr	r1, [r7, #0]
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fb0e 	bl	8005440 <USBD_GetStatus>
    break;
 8004e24:	e00e      	b.n	8004e44 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8004e26:	6839      	ldr	r1, [r7, #0]
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fb33 	bl	8005494 <USBD_SetFeature>
    break;
 8004e2e:	e009      	b.n	8004e44 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8004e30:	6839      	ldr	r1, [r7, #0]
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fb49 	bl	80054ca <USBD_ClrFeature>
    break;
 8004e38:	e004      	b.n	8004e44 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8004e3a:	6839      	ldr	r1, [r7, #0]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fba8 	bl	8005592 <USBD_CtlError>
    break;
 8004e42:	bf00      	nop
  }
  
  return ret;
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop

08004e50 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d11b      	bne.n	8004ea0 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	889b      	ldrh	r3, [r3, #4]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d811      	bhi.n	8004e96 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	6839      	ldr	r1, [r7, #0]
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	88db      	ldrh	r3, [r3, #6]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d110      	bne.n	8004eaa <USBD_StdItfReq+0x5a>
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10d      	bne.n	8004eaa <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fc48 	bl	8005724 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8004e94:	e009      	b.n	8004eaa <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8004e96:	6839      	ldr	r1, [r7, #0]
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fb7a 	bl	8005592 <USBD_CtlError>
    break;
 8004e9e:	e004      	b.n	8004eaa <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fb75 	bl	8005592 <USBD_CtlError>
    break;
 8004ea8:	e000      	b.n	8004eac <USBD_StdItfReq+0x5c>
    break;
 8004eaa:	bf00      	nop
  }
  return USBD_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b084      	sub	sp, #16
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	889b      	ldrh	r3, [r3, #4]
 8004ec8:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d108      	bne.n	8004ee8 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	6839      	ldr	r1, [r7, #0]
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	4798      	blx	r3
    
    return USBD_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	e0ba      	b.n	800505e <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	785b      	ldrb	r3, [r3, #1]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d039      	beq.n	8004f64 <USBD_StdEPReq+0xae>
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d002      	beq.n	8004efa <USBD_StdEPReq+0x44>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d06b      	beq.n	8004fd0 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8004ef8:	e0b0      	b.n	800505c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d002      	beq.n	8004f0a <USBD_StdEPReq+0x54>
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d00c      	beq.n	8004f22 <USBD_StdEPReq+0x6c>
 8004f08:	e025      	b.n	8004f56 <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004f0a:	7bbb      	ldrb	r3, [r7, #14]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d027      	beq.n	8004f60 <USBD_StdEPReq+0xaa>
 8004f10:	7bbb      	ldrb	r3, [r7, #14]
 8004f12:	2b80      	cmp	r3, #128	; 0x80
 8004f14:	d024      	beq.n	8004f60 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8004f16:	7bbb      	ldrb	r3, [r7, #14]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f004 f83a 	bl	8008f94 <USBD_LL_StallEP>
      break;	
 8004f20:	e01e      	b.n	8004f60 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	885b      	ldrh	r3, [r3, #2]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004f2a:	7bbb      	ldrb	r3, [r7, #14]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <USBD_StdEPReq+0x8a>
 8004f30:	7bbb      	ldrb	r3, [r7, #14]
 8004f32:	2b80      	cmp	r3, #128	; 0x80
 8004f34:	d004      	beq.n	8004f40 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8004f36:	7bbb      	ldrb	r3, [r7, #14]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f004 f82a 	bl	8008f94 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	6839      	ldr	r1, [r7, #0]
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fbe8 	bl	8005724 <USBD_CtlSendStatus>
      break;
 8004f54:	e005      	b.n	8004f62 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fb1a 	bl	8005592 <USBD_CtlError>
      break;    
 8004f5e:	e000      	b.n	8004f62 <USBD_StdEPReq+0xac>
      break;	
 8004f60:	bf00      	nop
    break;
 8004f62:	e07b      	b.n	800505c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d002      	beq.n	8004f74 <USBD_StdEPReq+0xbe>
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d00c      	beq.n	8004f8c <USBD_StdEPReq+0xd6>
 8004f72:	e024      	b.n	8004fbe <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004f74:	7bbb      	ldrb	r3, [r7, #14]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d026      	beq.n	8004fc8 <USBD_StdEPReq+0x112>
 8004f7a:	7bbb      	ldrb	r3, [r7, #14]
 8004f7c:	2b80      	cmp	r3, #128	; 0x80
 8004f7e:	d023      	beq.n	8004fc8 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8004f80:	7bbb      	ldrb	r3, [r7, #14]
 8004f82:	4619      	mov	r1, r3
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f004 f805 	bl	8008f94 <USBD_LL_StallEP>
      break;	
 8004f8a:	e01d      	b.n	8004fc8 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	885b      	ldrh	r3, [r3, #2]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d11b      	bne.n	8004fcc <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8004f94:	7bbb      	ldrb	r3, [r7, #14]
 8004f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004f9e:	7bbb      	ldrb	r3, [r7, #14]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f004 f815 	bl	8008fd2 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	6839      	ldr	r1, [r7, #0]
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fbb4 	bl	8005724 <USBD_CtlSendStatus>
      break;
 8004fbc:	e006      	b.n	8004fcc <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8004fbe:	6839      	ldr	r1, [r7, #0]
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fae6 	bl	8005592 <USBD_CtlError>
      break;    
 8004fc6:	e002      	b.n	8004fce <USBD_StdEPReq+0x118>
      break;	
 8004fc8:	bf00      	nop
 8004fca:	e047      	b.n	800505c <USBD_StdEPReq+0x1a6>
      break;
 8004fcc:	bf00      	nop
    break;
 8004fce:	e045      	b.n	800505c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d002      	beq.n	8004fe0 <USBD_StdEPReq+0x12a>
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d00b      	beq.n	8004ff6 <USBD_StdEPReq+0x140>
 8004fde:	e036      	b.n	800504e <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8004fe0:	7bbb      	ldrb	r3, [r7, #14]
 8004fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d036      	beq.n	8005058 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8004fea:	7bbb      	ldrb	r3, [r7, #14]
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f003 ffd0 	bl	8008f94 <USBD_LL_StallEP>
      break;	
 8004ff4:	e030      	b.n	8005058 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004ff6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	da08      	bge.n	8005010 <USBD_StdEPReq+0x15a>
 8004ffe:	7bbb      	ldrb	r3, [r7, #14]
 8005000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005004:	3301      	adds	r3, #1
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	4413      	add	r3, r2
 800500c:	3304      	adds	r3, #4
 800500e:	e007      	b.n	8005020 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8005010:	7bbb      	ldrb	r3, [r7, #14]
 8005012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005016:	3310      	adds	r3, #16
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	4413      	add	r3, r2
 800501e:	3304      	adds	r3, #4
 8005020:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005022:	7bbb      	ldrb	r3, [r7, #14]
 8005024:	4619      	mov	r1, r3
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f003 fff2 	bl	8009010 <USBD_LL_IsStallEP>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2201      	movs	r2, #1
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	e002      	b.n	8005040 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8005040:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8005042:	2202      	movs	r2, #2
 8005044:	4619      	mov	r1, r3
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fb0e 	bl	8005668 <USBD_CtlSendData>
      break;
 800504c:	e005      	b.n	800505a <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fa9e 	bl	8005592 <USBD_CtlError>
      break;
 8005056:	e000      	b.n	800505a <USBD_StdEPReq+0x1a4>
      break;	
 8005058:	bf00      	nop
    break;
 800505a:	bf00      	nop
  }
  return ret;
 800505c:	7bfb      	ldrb	r3, [r7, #15]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	885b      	ldrh	r3, [r3, #2]
 8005076:	0a1b      	lsrs	r3, r3, #8
 8005078:	b29b      	uxth	r3, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	2b06      	cmp	r3, #6
 800507e:	f200 80c9 	bhi.w	8005214 <USBD_GetDescriptor+0x1ac>
 8005082:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <USBD_GetDescriptor+0x20>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	080050a5 	.word	0x080050a5
 800508c:	080050bd 	.word	0x080050bd
 8005090:	080050fd 	.word	0x080050fd
 8005094:	08005215 	.word	0x08005215
 8005098:	08005215 	.word	0x08005215
 800509c:	080051c1 	.word	0x080051c1
 80050a0:	080051e7 	.word	0x080051e7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	7c12      	ldrb	r2, [r2, #16]
 80050b0:	f107 010a 	add.w	r1, r7, #10
 80050b4:	4610      	mov	r0, r2
 80050b6:	4798      	blx	r3
 80050b8:	60f8      	str	r0, [r7, #12]
    break;
 80050ba:	e0b0      	b.n	800521e <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	7c1b      	ldrb	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10d      	bne.n	80050e0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	f107 020a 	add.w	r2, r7, #10
 80050d0:	4610      	mov	r0, r2
 80050d2:	4798      	blx	r3
 80050d4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	3301      	adds	r3, #1
 80050da:	2202      	movs	r2, #2
 80050dc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80050de:	e09e      	b.n	800521e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	f107 020a 	add.w	r2, r7, #10
 80050ec:	4610      	mov	r0, r2
 80050ee:	4798      	blx	r3
 80050f0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3301      	adds	r3, #1
 80050f6:	2202      	movs	r2, #2
 80050f8:	701a      	strb	r2, [r3, #0]
    break;
 80050fa:	e090      	b.n	800521e <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	885b      	ldrh	r3, [r3, #2]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b05      	cmp	r3, #5
 8005104:	d856      	bhi.n	80051b4 <USBD_GetDescriptor+0x14c>
 8005106:	a201      	add	r2, pc, #4	; (adr r2, 800510c <USBD_GetDescriptor+0xa4>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	08005125 	.word	0x08005125
 8005110:	0800513d 	.word	0x0800513d
 8005114:	08005155 	.word	0x08005155
 8005118:	0800516d 	.word	0x0800516d
 800511c:	08005185 	.word	0x08005185
 8005120:	0800519d 	.word	0x0800519d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	7c12      	ldrb	r2, [r2, #16]
 8005130:	f107 010a 	add.w	r1, r7, #10
 8005134:	4610      	mov	r0, r2
 8005136:	4798      	blx	r3
 8005138:	60f8      	str	r0, [r7, #12]
      break;
 800513a:	e040      	b.n	80051be <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	7c12      	ldrb	r2, [r2, #16]
 8005148:	f107 010a 	add.w	r1, r7, #10
 800514c:	4610      	mov	r0, r2
 800514e:	4798      	blx	r3
 8005150:	60f8      	str	r0, [r7, #12]
      break;
 8005152:	e034      	b.n	80051be <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	7c12      	ldrb	r2, [r2, #16]
 8005160:	f107 010a 	add.w	r1, r7, #10
 8005164:	4610      	mov	r0, r2
 8005166:	4798      	blx	r3
 8005168:	60f8      	str	r0, [r7, #12]
      break;
 800516a:	e028      	b.n	80051be <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	7c12      	ldrb	r2, [r2, #16]
 8005178:	f107 010a 	add.w	r1, r7, #10
 800517c:	4610      	mov	r0, r2
 800517e:	4798      	blx	r3
 8005180:	60f8      	str	r0, [r7, #12]
      break;
 8005182:	e01c      	b.n	80051be <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	7c12      	ldrb	r2, [r2, #16]
 8005190:	f107 010a 	add.w	r1, r7, #10
 8005194:	4610      	mov	r0, r2
 8005196:	4798      	blx	r3
 8005198:	60f8      	str	r0, [r7, #12]
      break;
 800519a:	e010      	b.n	80051be <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	7c12      	ldrb	r2, [r2, #16]
 80051a8:	f107 010a 	add.w	r1, r7, #10
 80051ac:	4610      	mov	r0, r2
 80051ae:	4798      	blx	r3
 80051b0:	60f8      	str	r0, [r7, #12]
      break;
 80051b2:	e004      	b.n	80051be <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 80051b4:	6839      	ldr	r1, [r7, #0]
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f9eb 	bl	8005592 <USBD_CtlError>
      return;
 80051bc:	e044      	b.n	8005248 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 80051be:	e02e      	b.n	800521e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	7c1b      	ldrb	r3, [r3, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d109      	bne.n	80051dc <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80051ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d0:	f107 020a 	add.w	r2, r7, #10
 80051d4:	4610      	mov	r0, r2
 80051d6:	4798      	blx	r3
 80051d8:	60f8      	str	r0, [r7, #12]
      break;
 80051da:	e020      	b.n	800521e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80051dc:	6839      	ldr	r1, [r7, #0]
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f9d7 	bl	8005592 <USBD_CtlError>
      return;
 80051e4:	e030      	b.n	8005248 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	7c1b      	ldrb	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10d      	bne.n	800520a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	f107 020a 	add.w	r2, r7, #10
 80051fa:	4610      	mov	r0, r2
 80051fc:	4798      	blx	r3
 80051fe:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3301      	adds	r3, #1
 8005204:	2207      	movs	r2, #7
 8005206:	701a      	strb	r2, [r3, #0]
      break; 
 8005208:	e009      	b.n	800521e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f9c0 	bl	8005592 <USBD_CtlError>
      return;
 8005212:	e019      	b.n	8005248 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f9bb 	bl	8005592 <USBD_CtlError>
    return;
 800521c:	e014      	b.n	8005248 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800521e:	897b      	ldrh	r3, [r7, #10]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d011      	beq.n	8005248 <USBD_GetDescriptor+0x1e0>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	88db      	ldrh	r3, [r3, #6]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00d      	beq.n	8005248 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	88da      	ldrh	r2, [r3, #6]
 8005230:	897b      	ldrh	r3, [r7, #10]
 8005232:	4293      	cmp	r3, r2
 8005234:	bf28      	it	cs
 8005236:	4613      	movcs	r3, r2
 8005238:	b29b      	uxth	r3, r3
 800523a:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 800523c:	897b      	ldrh	r3, [r7, #10]
 800523e:	461a      	mov	r2, r3
 8005240:	68f9      	ldr	r1, [r7, #12]
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fa10 	bl	8005668 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop

08005250 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	889b      	ldrh	r3, [r3, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d12c      	bne.n	80052bc <USBD_SetAddress+0x6c>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	88db      	ldrh	r3, [r3, #6]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d128      	bne.n	80052bc <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	885b      	ldrh	r3, [r3, #2]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005274:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800527c:	2b03      	cmp	r3, #3
 800527e:	d104      	bne.n	800528a <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8005280:	6839      	ldr	r1, [r7, #0]
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f985 	bl	8005592 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005288:	e01c      	b.n	80052c4 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	7bfa      	ldrb	r2, [r7, #15]
 800528e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	4619      	mov	r1, r3
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f003 fedf 	bl	800905a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fa41 	bl	8005724 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80052b0:	e008      	b.n	80052c4 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80052ba:	e003      	b.n	80052c4 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 80052bc:	6839      	ldr	r1, [r7, #0]
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f967 	bl	8005592 <USBD_CtlError>
  } 
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	885b      	ldrh	r3, [r3, #2]
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	4b3e      	ldr	r3, [pc, #248]	; (80053d8 <USBD_SetConfig+0x10c>)
 80052de:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80052e0:	4b3d      	ldr	r3, [pc, #244]	; (80053d8 <USBD_SetConfig+0x10c>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d904      	bls.n	80052f2 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f951 	bl	8005592 <USBD_CtlError>
 80052f0:	e06f      	b.n	80053d2 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d002      	beq.n	8005302 <USBD_SetConfig+0x36>
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d023      	beq.n	8005348 <USBD_SetConfig+0x7c>
 8005300:	e062      	b.n	80053c8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8005302:	4b35      	ldr	r3, [pc, #212]	; (80053d8 <USBD_SetConfig+0x10c>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d01a      	beq.n	8005340 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800530a:	4b33      	ldr	r3, [pc, #204]	; (80053d8 <USBD_SetConfig+0x10c>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2203      	movs	r2, #3
 8005318:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800531c:	4b2e      	ldr	r3, [pc, #184]	; (80053d8 <USBD_SetConfig+0x10c>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	4619      	mov	r1, r3
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff fb62 	bl	80049ec <USBD_SetClassConfig>
 8005328:	4603      	mov	r3, r0
 800532a:	2b02      	cmp	r3, #2
 800532c:	d104      	bne.n	8005338 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800532e:	6839      	ldr	r1, [r7, #0]
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f92e 	bl	8005592 <USBD_CtlError>
          return;
 8005336:	e04c      	b.n	80053d2 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f9f3 	bl	8005724 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800533e:	e048      	b.n	80053d2 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f9ef 	bl	8005724 <USBD_CtlSendStatus>
      break;
 8005346:	e044      	b.n	80053d2 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8005348:	4b23      	ldr	r3, [pc, #140]	; (80053d8 <USBD_SetConfig+0x10c>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d112      	bne.n	8005376 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8005358:	4b1f      	ldr	r3, [pc, #124]	; (80053d8 <USBD_SetConfig+0x10c>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8005362:	4b1d      	ldr	r3, [pc, #116]	; (80053d8 <USBD_SetConfig+0x10c>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fb5e 	bl	8004a2a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f9d8 	bl	8005724 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005374:	e02d      	b.n	80053d2 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8005376:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <USBD_SetConfig+0x10c>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	429a      	cmp	r2, r3
 8005382:	d01d      	beq.n	80053c0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	b2db      	uxtb	r3, r3
 800538a:	4619      	mov	r1, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff fb4c 	bl	8004a2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005392:	4b11      	ldr	r3, [pc, #68]	; (80053d8 <USBD_SetConfig+0x10c>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <USBD_SetConfig+0x10c>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	4619      	mov	r1, r3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7ff fb22 	bl	80049ec <USBD_SetClassConfig>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d104      	bne.n	80053b8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 80053ae:	6839      	ldr	r1, [r7, #0]
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f8ee 	bl	8005592 <USBD_CtlError>
          return;
 80053b6:	e00c      	b.n	80053d2 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f9b3 	bl	8005724 <USBD_CtlSendStatus>
      break;
 80053be:	e008      	b.n	80053d2 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f9af 	bl	8005724 <USBD_CtlSendStatus>
      break;
 80053c6:	e004      	b.n	80053d2 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f8e1 	bl	8005592 <USBD_CtlError>
      break;
 80053d0:	bf00      	nop
    }
  }
}
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	20000379 	.word	0x20000379

080053dc <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	88db      	ldrh	r3, [r3, #6]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d004      	beq.n	80053f8 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 80053ee:	6839      	ldr	r1, [r7, #0]
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f8ce 	bl	8005592 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80053f6:	e01f      	b.n	8005438 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d002      	beq.n	8005408 <USBD_GetConfig+0x2c>
 8005402:	2b03      	cmp	r3, #3
 8005404:	d00b      	beq.n	800541e <USBD_GetConfig+0x42>
 8005406:	e012      	b.n	800542e <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8005412:	2201      	movs	r2, #1
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f926 	bl	8005668 <USBD_CtlSendData>
      break;
 800541c:	e00c      	b.n	8005438 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8005422:	2201      	movs	r2, #1
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f91e 	bl	8005668 <USBD_CtlSendData>
      break;
 800542c:	e004      	b.n	8005438 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f8ae 	bl	8005592 <USBD_CtlError>
      break;
 8005436:	bf00      	nop
}
 8005438:	bf00      	nop
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005450:	3b02      	subs	r3, #2
 8005452:	2b01      	cmp	r3, #1
 8005454:	d815      	bhi.n	8005482 <USBD_GetStatus+0x42>
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
#else
    pdev->dev_config_status = 0;                                   
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	60da      	str	r2, [r3, #12]
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f043 0202 	orr.w	r2, r3, #2
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8005476:	2202      	movs	r2, #2
 8005478:	4619      	mov	r1, r3
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f8f4 	bl	8005668 <USBD_CtlSendData>
                      2);
    break;
 8005480:	e004      	b.n	800548c <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f884 	bl	8005592 <USBD_CtlError>
    break;
 800548a:	bf00      	nop
  }
}
 800548c:	bf00      	nop
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	885b      	ldrh	r3, [r3, #2]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d10d      	bne.n	80054c2 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	6839      	ldr	r1, [r7, #0]
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f931 	bl	8005724 <USBD_CtlSendStatus>
  }

}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b082      	sub	sp, #8
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80054da:	3b02      	subs	r3, #2
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d812      	bhi.n	8005506 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	885b      	ldrh	r3, [r3, #2]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d113      	bne.n	8005510 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	6839      	ldr	r1, [r7, #0]
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f910 	bl	8005724 <USBD_CtlSendStatus>
    }
    break;
 8005504:	e004      	b.n	8005510 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f842 	bl	8005592 <USBD_CtlError>
    break;
 800550e:	e000      	b.n	8005512 <USBD_ClrFeature+0x48>
    break;
 8005510:	bf00      	nop
  }
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781a      	ldrb	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	785a      	ldrb	r2, [r3, #1]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	3302      	adds	r3, #2
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	b29a      	uxth	r2, r3
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	3303      	adds	r3, #3
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	021b      	lsls	r3, r3, #8
 8005546:	b29b      	uxth	r3, r3
 8005548:	4413      	add	r3, r2
 800554a:	b29a      	uxth	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	3304      	adds	r3, #4
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	b29a      	uxth	r2, r3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	3305      	adds	r3, #5
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	b29b      	uxth	r3, r3
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	b29b      	uxth	r3, r3
 8005564:	4413      	add	r3, r2
 8005566:	b29a      	uxth	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	3306      	adds	r3, #6
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	b29a      	uxth	r2, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	3307      	adds	r3, #7
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	b29b      	uxth	r3, r3
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	b29b      	uxth	r3, r3
 8005580:	4413      	add	r3, r2
 8005582:	b29a      	uxth	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	80da      	strh	r2, [r3, #6]

}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	bc80      	pop	{r7}
 8005590:	4770      	bx	lr

08005592 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800559c:	2180      	movs	r1, #128	; 0x80
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f003 fcf8 	bl	8008f94 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80055a4:	2100      	movs	r1, #0
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f003 fcf4 	bl	8008f94 <USBD_LL_StallEP>
}
 80055ac:	bf00      	nop
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 80055c0:	2300      	movs	r3, #0
 80055c2:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d033      	beq.n	8005632 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 f835 	bl	800563a <USBD_GetLen>
 80055d0:	4603      	mov	r3, r0
 80055d2:	3301      	adds	r3, #1
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	881a      	ldrh	r2, [r3, #0]
 80055e2:	7dfb      	ldrb	r3, [r7, #23]
 80055e4:	1c59      	adds	r1, r3, #1
 80055e6:	75f9      	strb	r1, [r7, #23]
 80055e8:	4619      	mov	r1, r3
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	440b      	add	r3, r1
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	75fa      	strb	r2, [r7, #23]
 80055f8:	461a      	mov	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	4413      	add	r3, r2
 80055fe:	2203      	movs	r2, #3
 8005600:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8005602:	e012      	b.n	800562a <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	60fa      	str	r2, [r7, #12]
 800560a:	7dfa      	ldrb	r2, [r7, #23]
 800560c:	1c51      	adds	r1, r2, #1
 800560e:	75f9      	strb	r1, [r7, #23]
 8005610:	4611      	mov	r1, r2
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	440a      	add	r2, r1
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	75fa      	strb	r2, [r7, #23]
 8005620:	461a      	mov	r2, r3
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4413      	add	r3, r2
 8005626:	2200      	movs	r2, #0
 8005628:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e8      	bne.n	8005604 <USBD_GetString+0x50>
    }
  } 
}
 8005632:	bf00      	nop
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8005646:	e005      	b.n	8005654 <USBD_GetLen+0x1a>
    {
        len++;
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	3301      	adds	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
        buf++;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3301      	adds	r3, #1
 8005652:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f5      	bne.n	8005648 <USBD_GetLen+0xe>
    }

    return len;
 800565c:	7bfb      	ldrb	r3, [r7, #15]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	bc80      	pop	{r7}
 8005666:	4770      	bx	lr

08005668 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	4613      	mov	r3, r2
 8005674:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2202      	movs	r2, #2
 800567a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800567e:	88fa      	ldrh	r2, [r7, #6]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8005684:	88fa      	ldrh	r2, [r7, #6]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	2100      	movs	r1, #0
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f003 fd01 	bl	8009098 <USBD_LL_Transmit>
  
  return USBD_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80056ae:	88fb      	ldrh	r3, [r7, #6]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	2100      	movs	r1, #0
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f003 fcef 	bl	8009098 <USBD_LL_Transmit>
  
  return USBD_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	4613      	mov	r3, r2
 80056d0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2203      	movs	r2, #3
 80056d6:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80056da:	88fa      	ldrh	r2, [r7, #6]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 80056e2:	88fa      	ldrh	r2, [r7, #6]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80056ea:	88fb      	ldrh	r3, [r7, #6]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	2100      	movs	r1, #0
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f003 fcf4 	bl	80090de <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	4613      	mov	r3, r2
 800570c:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 800570e:	88fb      	ldrh	r3, [r7, #6]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	2100      	movs	r1, #0
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f003 fce2 	bl	80090de <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2204      	movs	r2, #4
 8005730:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8005734:	2300      	movs	r3, #0
 8005736:	2200      	movs	r2, #0
 8005738:	2100      	movs	r1, #0
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f003 fcac 	bl	8009098 <USBD_LL_Transmit>
  
  return USBD_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2205      	movs	r2, #5
 8005756:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800575a:	2300      	movs	r3, #0
 800575c:	2200      	movs	r2, #0
 800575e:	2100      	movs	r1, #0
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f003 fcbc 	bl	80090de <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	4603      	mov	r3, r0
 8005778:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800577e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005782:	2b84      	cmp	r3, #132	; 0x84
 8005784:	d005      	beq.n	8005792 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005786:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4413      	add	r3, r2
 800578e:	3303      	adds	r3, #3
 8005790:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005792:	68fb      	ldr	r3, [r7, #12]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr

0800579e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057a4:	f3ef 8305 	mrs	r3, IPSR
 80057a8:	607b      	str	r3, [r7, #4]
  return(result);
 80057aa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bf14      	ite	ne
 80057b0:	2301      	movne	r3, #1
 80057b2:	2300      	moveq	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80057c4:	f001 fa20 	bl	8006c08 <vTaskStartScheduler>
  
  return osOK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	bd80      	pop	{r7, pc}

080057ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80057ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057d0:	b087      	sub	sp, #28
 80057d2:	af02      	add	r7, sp, #8
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685c      	ldr	r4, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057e4:	b29e      	uxth	r6, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff ffbf 	bl	8005770 <makeFreeRtosPriority>
 80057f2:	4602      	mov	r2, r0
 80057f4:	f107 030c 	add.w	r3, r7, #12
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	9200      	str	r2, [sp, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	4632      	mov	r2, r6
 8005800:	4629      	mov	r1, r5
 8005802:	4620      	mov	r0, r4
 8005804:	f001 f88b 	bl	800691e <xTaskCreate>
 8005808:	4603      	mov	r3, r0
 800580a:	2b01      	cmp	r3, #1
 800580c:	d001      	beq.n	8005812 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	e000      	b.n	8005814 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8005812:	68fb      	ldr	r3, [r7, #12]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800581c <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  taskYIELD();
 8005820:	4b06      	ldr	r3, [pc, #24]	; (800583c <osThreadYield+0x20>)
 8005822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
  
  return osOK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	e000ed04 	.word	0xe000ed04

08005840 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <osDelay+0x16>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	e000      	b.n	8005858 <osDelay+0x18>
 8005856:	2301      	movs	r3, #1
 8005858:	4618      	mov	r0, r3
 800585a:	f001 f9a1 	bl	8006ba0 <vTaskDelay>
  
  return osOK;
 800585e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af02      	add	r7, sp, #8
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8005876:	2300      	movs	r3, #0
 8005878:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800587a:	f7ff ff90 	bl	800579e <inHandlerMode>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01c      	beq.n	80058be <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8005884:	6839      	ldr	r1, [r7, #0]
 8005886:	f107 0208 	add.w	r2, r7, #8
 800588a:	f107 030c 	add.w	r3, r7, #12
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	4613      	mov	r3, r2
 8005892:	2201      	movs	r2, #1
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 ffdf 	bl	8007858 <xTaskGenericNotifyFromISR>
 800589a:	4603      	mov	r3, r0
 800589c:	2b01      	cmp	r3, #1
 800589e:	d002      	beq.n	80058a6 <osSignalSet+0x3e>
      return 0x80000000;
 80058a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058a4:	e019      	b.n	80058da <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d015      	beq.n	80058d8 <osSignalSet+0x70>
 80058ac:	4b0d      	ldr	r3, [pc, #52]	; (80058e4 <osSignalSet+0x7c>)
 80058ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	e00c      	b.n	80058d8 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80058be:	6839      	ldr	r1, [r7, #0]
 80058c0:	f107 0308 	add.w	r3, r7, #8
 80058c4:	2201      	movs	r2, #1
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f001 ff1e 	bl	8007708 <xTaskGenericNotify>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d002      	beq.n	80058d8 <osSignalSet+0x70>
    return 0x80000000;
 80058d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058d6:	e000      	b.n	80058da <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80058d8:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	e000ed04 	.word	0xe000ed04

080058e8 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80058e8:	b590      	push	{r4, r7, lr}
 80058ea:	b089      	sub	sp, #36	; 0x24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80058f4:	2300      	movs	r3, #0
 80058f6:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80058f8:	2300      	movs	r3, #0
 80058fa:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d103      	bne.n	800590c <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8005904:	f04f 33ff 	mov.w	r3, #4294967295
 8005908:	61fb      	str	r3, [r7, #28]
 800590a:	e009      	b.n	8005920 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d006      	beq.n	8005920 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <osSignalWait+0x38>
      ticks = 1;
 800591c:	2301      	movs	r3, #1
 800591e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8005920:	f7ff ff3d 	bl	800579e <inHandlerMode>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800592a:	2382      	movs	r3, #130	; 0x82
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	e01b      	b.n	8005968 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8005930:	68b9      	ldr	r1, [r7, #8]
 8005932:	f107 0310 	add.w	r3, r7, #16
 8005936:	1d1a      	adds	r2, r3, #4
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	2000      	movs	r0, #0
 800593c:	f001 fe84 	bl	8007648 <xTaskNotifyWait>
 8005940:	4603      	mov	r3, r0
 8005942:	2b01      	cmp	r3, #1
 8005944:	d008      	beq.n	8005958 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <osSignalWait+0x6a>
 800594c:	2300      	movs	r3, #0
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	e00a      	b.n	8005968 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8005952:	2340      	movs	r3, #64	; 0x40
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	e007      	b.n	8005968 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2b00      	cmp	r3, #0
 800595c:	da02      	bge.n	8005964 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800595e:	2386      	movs	r3, #134	; 0x86
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	e001      	b.n	8005968 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8005964:	2308      	movs	r3, #8
 8005966:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	461c      	mov	r4, r3
 800596c:	f107 0310 	add.w	r3, r7, #16
 8005970:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005974:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	3724      	adds	r7, #36	; 0x24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd90      	pop	{r4, r7, pc}

08005980 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	3303      	adds	r3, #3
 800598e:	f023 0303 	bic.w	r3, r3, #3
 8005992:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8005994:	2014      	movs	r0, #20
 8005996:	f002 fa4d 	bl	8007e34 <pvPortMalloc>
 800599a:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d046      	beq.n	8005a30 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2200      	movs	r2, #0
 80059b4:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f002 fa3a 	bl	8007e34 <pvPortMalloc>
 80059c0:	4602      	mov	r2, r0
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d02b      	beq.n	8005a26 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	fb02 f303 	mul.w	r3, r2, r3
 80059d8:	4618      	mov	r0, r3
 80059da:	f002 fa2b 	bl	8007e34 <pvPortMalloc>
 80059de:	4602      	mov	r2, r0
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d011      	beq.n	8005a10 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80059ec:	2300      	movs	r3, #0
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	e008      	b.n	8005a04 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4413      	add	r3, r2
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	3301      	adds	r3, #1
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d3f1      	bcc.n	80059f2 <osPoolCreate+0x72>
 8005a0e:	e00f      	b.n	8005a30 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f002 fa1f 	bl	8007e58 <vPortFree>
        vPortFree(thePool);
 8005a1a:	6978      	ldr	r0, [r7, #20]
 8005a1c:	f002 fa1c 	bl	8007e58 <vPortFree>
        thePool = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	e004      	b.n	8005a30 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8005a26:	6978      	ldr	r0, [r7, #20]
 8005a28:	f002 fa16 	bl	8007e58 <vPortFree>
      thePool = NULL;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8005a30:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b08a      	sub	sp, #40	; 0x28
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8005a4a:	f7ff fea8 	bl	800579e <inHandlerMode>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00e      	beq.n	8005a72 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a54:	f3ef 8211 	mrs	r2, BASEPRI
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	617a      	str	r2, [r7, #20]
 8005a6a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a6c:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a70:	e001      	b.n	8005a76 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8005a72:	f002 f8ef 	bl	8007c54 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
 8005a7a:	e029      	b.n	8005ad0 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	69fa      	ldr	r2, [r7, #28]
 8005a82:	4413      	add	r3, r2
 8005a84:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d301      	bcc.n	8005a94 <osPoolAlloc+0x5a>
      index = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d113      	bne.n	8005aca <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	2201      	movs	r2, #1
 8005aac:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	fb02 f303 	mul.w	r3, r2, r3
 8005abe:	440b      	add	r3, r1
 8005ac0:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	611a      	str	r2, [r3, #16]
      break;
 8005ac8:	e007      	b.n	8005ada <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	3301      	adds	r3, #1
 8005ace:	61fb      	str	r3, [r7, #28]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	69fa      	ldr	r2, [r7, #28]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d3d0      	bcc.n	8005a7c <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8005ada:	f7ff fe60 	bl	800579e <inHandlerMode>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d005      	beq.n	8005af0 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	e001      	b.n	8005af4 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8005af0:	f002 f8de 	bl	8007cb0 <vPortExitCritical>
  }
  
  return p;
 8005af4:	6a3b      	ldr	r3, [r7, #32]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3728      	adds	r7, #40	; 0x28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <osPoolFree+0x14>
    return osErrorParameter;
 8005b0e:	2380      	movs	r3, #128	; 0x80
 8005b10:	e030      	b.n	8005b74 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <osPoolFree+0x1e>
    return osErrorParameter;
 8005b18:	2380      	movs	r3, #128	; 0x80
 8005b1a:	e02b      	b.n	8005b74 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d201      	bcs.n	8005b2a <osPoolFree+0x2c>
    return osErrorParameter;
 8005b26:	2380      	movs	r3, #128	; 0x80
 8005b28:	e024      	b.n	8005b74 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6812      	ldr	r2, [r2, #0]
 8005b30:	1a9b      	subs	r3, r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b3e:	fb02 f201 	mul.w	r2, r2, r1
 8005b42:	1a9b      	subs	r3, r3, r2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <osPoolFree+0x4e>
    return osErrorParameter;
 8005b48:	2380      	movs	r3, #128	; 0x80
 8005b4a:	e013      	b.n	8005b74 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b56:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d301      	bcc.n	8005b66 <osPoolFree+0x68>
    return osErrorParameter;
 8005b62:	2380      	movs	r3, #128	; 0x80
 8005b64:	e006      	b.n	8005b74 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	2200      	movs	r2, #0
 8005b70:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr

08005b7e <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8005b7e:	b590      	push	{r4, r7, lr}
 8005b80:	b087      	sub	sp, #28
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689c      	ldr	r4, [r3, #8]
 8005b9c:	200c      	movs	r0, #12
 8005b9e:	f002 f949 	bl	8007e34 <pvPortMalloc>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <osMailCreate+0x36>
    return NULL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	e038      	b.n	8005c26 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	681c      	ldr	r4, [r3, #0]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2104      	movs	r1, #4
 8005bcc:	f000 fa22 	bl	8006014 <xQueueGenericCreate>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d107      	bne.n	8005bf0 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f002 f936 	bl	8007e58 <vPortFree>
    return NULL;
 8005bec:	2300      	movs	r3, #0
 8005bee:	e01a      	b.n	8005c26 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	681c      	ldr	r4, [r3, #0]
 8005bf6:	f107 030c 	add.w	r3, r7, #12
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff fec0 	bl	8005980 <osPoolCreate>
 8005c00:	4603      	mov	r3, r0
 8005c02:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d107      	bne.n	8005c20 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f002 f91e 	bl	8007e58 <vPortFree>
    return NULL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e002      	b.n	8005c26 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd90      	pop	{r4, r7, pc}

08005c2e <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <osMailAlloc+0x14>
    return NULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e006      	b.n	8005c50 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff fef7 	bl	8005a3a <osPoolAlloc>
 8005c4c:	60f8      	str	r0, [r7, #12]
  
  return p;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <osMailPut+0x14>
    return osErrorParameter;
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	e02c      	b.n	8005cc6 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8005c70:	f7ff fd95 	bl	800579e <inHandlerMode>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d018      	beq.n	8005cac <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6858      	ldr	r0, [r3, #4]
 8005c7e:	f107 020c 	add.w	r2, r7, #12
 8005c82:	4639      	mov	r1, r7
 8005c84:	2300      	movs	r3, #0
 8005c86:	f000 fb17 	bl	80062b8 <xQueueGenericSendFromISR>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d001      	beq.n	8005c94 <osMailPut+0x3c>
      return osErrorOS;
 8005c90:	23ff      	movs	r3, #255	; 0xff
 8005c92:	e018      	b.n	8005cc6 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d014      	beq.n	8005cc4 <osMailPut+0x6c>
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <osMailPut+0x78>)
 8005c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	e00b      	b.n	8005cc4 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6858      	ldr	r0, [r3, #4]
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f000 fa05 	bl	80060c4 <xQueueGenericSend>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d001      	beq.n	8005cc4 <osMailPut+0x6c>
      return osErrorOS;
 8005cc0:	23ff      	movs	r3, #255	; 0xff
 8005cc2:	e000      	b.n	8005cc6 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	e000ed04 	.word	0xe000ed04

08005cd4 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8005cd4:	b590      	push	{r4, r7, lr}
 8005cd6:	b08b      	sub	sp, #44	; 0x2c
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8005cea:	2380      	movs	r3, #128	; 0x80
 8005cec:	617b      	str	r3, [r7, #20]
    return event;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	461c      	mov	r4, r3
 8005cf2:	f107 0314 	add.w	r3, r7, #20
 8005cf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005cfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005cfe:	e056      	b.n	8005dae <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0e:	d103      	bne.n	8005d18 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8005d10:	f04f 33ff 	mov.w	r3, #4294967295
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
 8005d16:	e009      	b.n	8005d2c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d006      	beq.n	8005d2c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <osMailGet+0x58>
      ticks = 1;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005d2c:	f7ff fd37 	bl	800579e <inHandlerMode>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d01d      	beq.n	8005d72 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	6858      	ldr	r0, [r3, #4]
 8005d3a:	f107 0220 	add.w	r2, r7, #32
 8005d3e:	f107 0314 	add.w	r3, r7, #20
 8005d42:	3304      	adds	r3, #4
 8005d44:	4619      	mov	r1, r3
 8005d46:	f000 fc5d 	bl	8006604 <xQueueReceiveFromISR>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d102      	bne.n	8005d56 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8005d50:	2320      	movs	r3, #32
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	e001      	b.n	8005d5a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01e      	beq.n	8005d9e <osMailGet+0xca>
 8005d60:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <osMailGet+0xe4>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	e015      	b.n	8005d9e <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	6858      	ldr	r0, [r3, #4]
 8005d76:	f107 0314 	add.w	r3, r7, #20
 8005d7a:	1d19      	adds	r1, r3, #4
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d80:	f000 fb2e 	bl	80063e0 <xQueueGenericReceive>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d102      	bne.n	8005d90 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8005d8a:	2320      	movs	r3, #32
 8005d8c:	617b      	str	r3, [r7, #20]
 8005d8e:	e006      	b.n	8005d9e <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <osMailGet+0xc6>
 8005d96:	2300      	movs	r3, #0
 8005d98:	e000      	b.n	8005d9c <osMailGet+0xc8>
 8005d9a:	2340      	movs	r3, #64	; 0x40
 8005d9c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	461c      	mov	r4, r3
 8005da2:	f107 0314 	add.w	r3, r7, #20
 8005da6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005daa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	372c      	adds	r7, #44	; 0x2c
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd90      	pop	{r4, r7, pc}
 8005db6:	bf00      	nop
 8005db8:	e000ed04 	.word	0xe000ed04

08005dbc <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <osMailFree+0x14>
    return osErrorParameter;
 8005dcc:	2380      	movs	r3, #128	; 0x80
 8005dce:	e006      	b.n	8005dde <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	6839      	ldr	r1, [r7, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff fe91 	bl	8005afe <osPoolFree>
 8005ddc:	4603      	mov	r3, r0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f103 0208 	add.w	r2, r3, #8
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f103 0208 	add.w	r2, r3, #8
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f103 0208 	add.w	r2, r3, #8
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr

08005e24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc80      	pop	{r7}
 8005e3a:	4770      	bx	lr

08005e3c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	601a      	str	r2, [r3, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr

08005e82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e82:	b480      	push	{r7}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e98:	d103      	bne.n	8005ea2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	e00c      	b.n	8005ebc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	e002      	b.n	8005eb0 <vListInsert+0x2e>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d2f6      	bcs.n	8005eaa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	601a      	str	r2, [r3, #0]
}
 8005ee8:	bf00      	nop
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr

08005ef2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	6892      	ldr	r2, [r2, #8]
 8005f08:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6852      	ldr	r2, [r2, #4]
 8005f12:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d103      	bne.n	8005f26 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	1e5a      	subs	r2, r3, #1
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr

08005f44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d109      	bne.n	8005f6c <xQueueGenericReset+0x28>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	e7fe      	b.n	8005f6a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005f6c:	f001 fe72 	bl	8007c54 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f78:	68f9      	ldr	r1, [r7, #12]
 8005f7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f7c:	fb01 f303 	mul.w	r3, r1, r3
 8005f80:	441a      	add	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	68f9      	ldr	r1, [r7, #12]
 8005fa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fa2:	fb01 f303 	mul.w	r3, r1, r3
 8005fa6:	441a      	add	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	22ff      	movs	r2, #255	; 0xff
 8005fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	22ff      	movs	r2, #255	; 0xff
 8005fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d114      	bne.n	8005fec <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d01a      	beq.n	8006000 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3310      	adds	r3, #16
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 f852 	bl	8007078 <xTaskRemoveFromEventList>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d012      	beq.n	8006000 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005fda:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <xQueueGenericReset+0xcc>)
 8005fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	e009      	b.n	8006000 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3310      	adds	r3, #16
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff fef8 	bl	8005de6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3324      	adds	r3, #36	; 0x24
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7ff fef3 	bl	8005de6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006000:	f001 fe56 	bl	8007cb0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006004:	2301      	movs	r3, #1
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	e000ed04 	.word	0xe000ed04

08006014 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	; 0x28
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d109      	bne.n	800603c <xQueueGenericCreate+0x28>
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	613b      	str	r3, [r7, #16]
 800603a:	e7fe      	b.n	800603a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d102      	bne.n	8006048 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006042:	2300      	movs	r3, #0
 8006044:	61fb      	str	r3, [r7, #28]
 8006046:	e004      	b.n	8006052 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	fb02 f303 	mul.w	r3, r2, r3
 8006050:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	3348      	adds	r3, #72	; 0x48
 8006056:	4618      	mov	r0, r3
 8006058:	f001 feec 	bl	8007e34 <pvPortMalloc>
 800605c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	3348      	adds	r3, #72	; 0x48
 8006068:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800606a:	79fa      	ldrb	r2, [r7, #7]
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	4613      	mov	r3, r2
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 f805 	bl	8006086 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800607c:	69bb      	ldr	r3, [r7, #24]
	}
 800607e:	4618      	mov	r0, r3
 8006080:	3720      	adds	r7, #32
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	60f8      	str	r0, [r7, #12]
 800608e:	60b9      	str	r1, [r7, #8]
 8006090:	607a      	str	r2, [r7, #4]
 8006092:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d103      	bne.n	80060a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	e002      	b.n	80060a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060b4:	2101      	movs	r1, #1
 80060b6:	69b8      	ldr	r0, [r7, #24]
 80060b8:	f7ff ff44 	bl	8005f44 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08e      	sub	sp, #56	; 0x38
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060d2:	2300      	movs	r3, #0
 80060d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d109      	bne.n	80060f4 <xQueueGenericSend+0x30>
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060f2:	e7fe      	b.n	80060f2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d103      	bne.n	8006102 <xQueueGenericSend+0x3e>
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <xQueueGenericSend+0x42>
 8006102:	2301      	movs	r3, #1
 8006104:	e000      	b.n	8006108 <xQueueGenericSend+0x44>
 8006106:	2300      	movs	r3, #0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d109      	bne.n	8006120 <xQueueGenericSend+0x5c>
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
 800611e:	e7fe      	b.n	800611e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d103      	bne.n	800612e <xQueueGenericSend+0x6a>
 8006126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <xQueueGenericSend+0x6e>
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <xQueueGenericSend+0x70>
 8006132:	2300      	movs	r3, #0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d109      	bne.n	800614c <xQueueGenericSend+0x88>
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	623b      	str	r3, [r7, #32]
 800614a:	e7fe      	b.n	800614a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800614c:	f001 f950 	bl	80073f0 <xTaskGetSchedulerState>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d102      	bne.n	800615c <xQueueGenericSend+0x98>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <xQueueGenericSend+0x9c>
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <xQueueGenericSend+0x9e>
 8006160:	2300      	movs	r3, #0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d109      	bne.n	800617a <xQueueGenericSend+0xb6>
 8006166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	61fb      	str	r3, [r7, #28]
 8006178:	e7fe      	b.n	8006178 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800617a:	f001 fd6b 	bl	8007c54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006186:	429a      	cmp	r2, r3
 8006188:	d302      	bcc.n	8006190 <xQueueGenericSend+0xcc>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b02      	cmp	r3, #2
 800618e:	d129      	bne.n	80061e4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006196:	f000 fab2 	bl	80066fe <prvCopyDataToQueue>
 800619a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d010      	beq.n	80061c6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	3324      	adds	r3, #36	; 0x24
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 ff65 	bl	8007078 <xTaskRemoveFromEventList>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d013      	beq.n	80061dc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061b4:	4b3f      	ldr	r3, [pc, #252]	; (80062b4 <xQueueGenericSend+0x1f0>)
 80061b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	e00a      	b.n	80061dc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d007      	beq.n	80061dc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061cc:	4b39      	ldr	r3, [pc, #228]	; (80062b4 <xQueueGenericSend+0x1f0>)
 80061ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061dc:	f001 fd68 	bl	8007cb0 <vPortExitCritical>
				return pdPASS;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e063      	b.n	80062ac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d103      	bne.n	80061f2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061ea:	f001 fd61 	bl	8007cb0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e05c      	b.n	80062ac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d106      	bne.n	8006206 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80061f8:	f107 0314 	add.w	r3, r7, #20
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 ff9d 	bl	800713c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006202:	2301      	movs	r3, #1
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006206:	f001 fd53 	bl	8007cb0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800620a:	f000 fd4b 	bl	8006ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800620e:	f001 fd21 	bl	8007c54 <vPortEnterCritical>
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006218:	b25b      	sxtb	r3, r3
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621e:	d103      	bne.n	8006228 <xQueueGenericSend+0x164>
 8006220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800622e:	b25b      	sxtb	r3, r3
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006234:	d103      	bne.n	800623e <xQueueGenericSend+0x17a>
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800623e:	f001 fd37 	bl	8007cb0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006242:	1d3a      	adds	r2, r7, #4
 8006244:	f107 0314 	add.w	r3, r7, #20
 8006248:	4611      	mov	r1, r2
 800624a:	4618      	mov	r0, r3
 800624c:	f000 ff98 	bl	8007180 <xTaskCheckForTimeOut>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d124      	bne.n	80062a0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006256:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006258:	f000 fb49 	bl	80068ee <prvIsQueueFull>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d018      	beq.n	8006294 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	3310      	adds	r3, #16
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	4611      	mov	r1, r2
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fee0 	bl	8007030 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006272:	f000 fad4 	bl	800681e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006276:	f000 fd23 	bl	8006cc0 <xTaskResumeAll>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	f47f af7c 	bne.w	800617a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006282:	4b0c      	ldr	r3, [pc, #48]	; (80062b4 <xQueueGenericSend+0x1f0>)
 8006284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	e772      	b.n	800617a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006296:	f000 fac2 	bl	800681e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800629a:	f000 fd11 	bl	8006cc0 <xTaskResumeAll>
 800629e:	e76c      	b.n	800617a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062a2:	f000 fabc 	bl	800681e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062a6:	f000 fd0b 	bl	8006cc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062aa:	2300      	movs	r3, #0
		}
	}
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3738      	adds	r7, #56	; 0x38
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	e000ed04 	.word	0xe000ed04

080062b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08e      	sub	sp, #56	; 0x38
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d109      	bne.n	80062e4 <xQueueGenericSendFromISR+0x2c>
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
 80062e2:	e7fe      	b.n	80062e2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d103      	bne.n	80062f2 <xQueueGenericSendFromISR+0x3a>
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <xQueueGenericSendFromISR+0x3e>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <xQueueGenericSendFromISR+0x40>
 80062f6:	2300      	movs	r3, #0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d109      	bne.n	8006310 <xQueueGenericSendFromISR+0x58>
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	623b      	str	r3, [r7, #32]
 800630e:	e7fe      	b.n	800630e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d103      	bne.n	800631e <xQueueGenericSendFromISR+0x66>
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631a:	2b01      	cmp	r3, #1
 800631c:	d101      	bne.n	8006322 <xQueueGenericSendFromISR+0x6a>
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <xQueueGenericSendFromISR+0x6c>
 8006322:	2300      	movs	r3, #0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d109      	bne.n	800633c <xQueueGenericSendFromISR+0x84>
 8006328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	e7fe      	b.n	800633a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800633c:	f001 fd3e 	bl	8007dbc <vPortValidateInterruptPriority>
	__asm volatile
 8006340:	f3ef 8211 	mrs	r2, BASEPRI
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	61ba      	str	r2, [r7, #24]
 8006356:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006358:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800635a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006364:	429a      	cmp	r2, r3
 8006366:	d302      	bcc.n	800636e <xQueueGenericSendFromISR+0xb6>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2b02      	cmp	r3, #2
 800636c:	d12c      	bne.n	80063c8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	68b9      	ldr	r1, [r7, #8]
 800637c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800637e:	f000 f9be 	bl	80066fe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006382:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638a:	d112      	bne.n	80063b2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	2b00      	cmp	r3, #0
 8006392:	d016      	beq.n	80063c2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006396:	3324      	adds	r3, #36	; 0x24
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fe6d 	bl	8007078 <xTaskRemoveFromEventList>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00e      	beq.n	80063c2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00b      	beq.n	80063c2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	e007      	b.n	80063c2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063b6:	3301      	adds	r3, #1
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	b25a      	sxtb	r2, r3
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063c2:	2301      	movs	r3, #1
 80063c4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80063c6:	e001      	b.n	80063cc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063c8:	2300      	movs	r3, #0
 80063ca:	637b      	str	r3, [r7, #52]	; 0x34
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	613b      	str	r3, [r7, #16]
	__asm volatile
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3738      	adds	r7, #56	; 0x38
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08e      	sub	sp, #56	; 0x38
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80063ee:	2300      	movs	r3, #0
 80063f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d109      	bne.n	8006410 <xQueueGenericReceive+0x30>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
 800640e:	e7fe      	b.n	800640e <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d103      	bne.n	800641e <xQueueGenericReceive+0x3e>
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <xQueueGenericReceive+0x42>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <xQueueGenericReceive+0x44>
 8006422:	2300      	movs	r3, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d109      	bne.n	800643c <xQueueGenericReceive+0x5c>
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	623b      	str	r3, [r7, #32]
 800643a:	e7fe      	b.n	800643a <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800643c:	f000 ffd8 	bl	80073f0 <xTaskGetSchedulerState>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <xQueueGenericReceive+0x6c>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <xQueueGenericReceive+0x70>
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <xQueueGenericReceive+0x72>
 8006450:	2300      	movs	r3, #0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <xQueueGenericReceive+0x8a>
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	61fb      	str	r3, [r7, #28]
 8006468:	e7fe      	b.n	8006468 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800646a:	f001 fbf3 	bl	8007c54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006472:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	2b00      	cmp	r3, #0
 8006478:	d046      	beq.n	8006508 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006484:	f000 f9a5 	bl	80067d2 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d121      	bne.n	80064d2 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006490:	1e5a      	subs	r2, r3, #1
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800649e:	f001 f8bf 	bl	8007620 <pvTaskIncrementMutexHeldCount>
 80064a2:	4602      	mov	r2, r0
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d027      	beq.n	8006500 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	3310      	adds	r3, #16
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fddf 	bl	8007078 <xTaskRemoveFromEventList>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d01f      	beq.n	8006500 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80064c0:	4b4f      	ldr	r3, [pc, #316]	; (8006600 <xQueueGenericReceive+0x220>)
 80064c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	e016      	b.n	8006500 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064d6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00f      	beq.n	8006500 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e2:	3324      	adds	r3, #36	; 0x24
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fdc7 	bl	8007078 <xTaskRemoveFromEventList>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80064f0:	4b43      	ldr	r3, [pc, #268]	; (8006600 <xQueueGenericReceive+0x220>)
 80064f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8006500:	f001 fbd6 	bl	8007cb0 <vPortExitCritical>
				return pdPASS;
 8006504:	2301      	movs	r3, #1
 8006506:	e077      	b.n	80065f8 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d103      	bne.n	8006516 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800650e:	f001 fbcf 	bl	8007cb0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006512:	2300      	movs	r3, #0
 8006514:	e070      	b.n	80065f8 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006518:	2b00      	cmp	r3, #0
 800651a:	d106      	bne.n	800652a <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800651c:	f107 0314 	add.w	r3, r7, #20
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fe0b 	bl	800713c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006526:	2301      	movs	r3, #1
 8006528:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800652a:	f001 fbc1 	bl	8007cb0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800652e:	f000 fbb9 	bl	8006ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006532:	f001 fb8f 	bl	8007c54 <vPortEnterCritical>
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800653c:	b25b      	sxtb	r3, r3
 800653e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006542:	d103      	bne.n	800654c <xQueueGenericReceive+0x16c>
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006552:	b25b      	sxtb	r3, r3
 8006554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006558:	d103      	bne.n	8006562 <xQueueGenericReceive+0x182>
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006562:	f001 fba5 	bl	8007cb0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006566:	1d3a      	adds	r2, r7, #4
 8006568:	f107 0314 	add.w	r3, r7, #20
 800656c:	4611      	mov	r1, r2
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fe06 	bl	8007180 <xTaskCheckForTimeOut>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d131      	bne.n	80065de <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800657a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800657c:	f000 f9a1 	bl	80068c2 <prvIsQueueEmpty>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d025      	beq.n	80065d2 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d108      	bne.n	80065a0 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 800658e:	f001 fb61 	bl	8007c54 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	4618      	mov	r0, r3
 8006598:	f000 ff48 	bl	800742c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800659c:	f001 fb88 	bl	8007cb0 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a2:	3324      	adds	r3, #36	; 0x24
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	4611      	mov	r1, r2
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fd41 	bl	8007030 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065b0:	f000 f935 	bl	800681e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065b4:	f000 fb84 	bl	8006cc0 <xTaskResumeAll>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f47f af55 	bne.w	800646a <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 80065c0:	4b0f      	ldr	r3, [pc, #60]	; (8006600 <xQueueGenericReceive+0x220>)
 80065c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	e74b      	b.n	800646a <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065d4:	f000 f923 	bl	800681e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065d8:	f000 fb72 	bl	8006cc0 <xTaskResumeAll>
 80065dc:	e745      	b.n	800646a <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80065de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065e0:	f000 f91d 	bl	800681e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065e4:	f000 fb6c 	bl	8006cc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ea:	f000 f96a 	bl	80068c2 <prvIsQueueEmpty>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f43f af3a 	beq.w	800646a <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3738      	adds	r7, #56	; 0x38
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	e000ed04 	.word	0xe000ed04

08006604 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08e      	sub	sp, #56	; 0x38
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	2b00      	cmp	r3, #0
 8006618:	d109      	bne.n	800662e <xQueueReceiveFromISR+0x2a>
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	623b      	str	r3, [r7, #32]
 800662c:	e7fe      	b.n	800662c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d103      	bne.n	800663c <xQueueReceiveFromISR+0x38>
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <xQueueReceiveFromISR+0x3c>
 800663c:	2301      	movs	r3, #1
 800663e:	e000      	b.n	8006642 <xQueueReceiveFromISR+0x3e>
 8006640:	2300      	movs	r3, #0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d109      	bne.n	800665a <xQueueReceiveFromISR+0x56>
 8006646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	61fb      	str	r3, [r7, #28]
 8006658:	e7fe      	b.n	8006658 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800665a:	f001 fbaf 	bl	8007dbc <vPortValidateInterruptPriority>
	__asm volatile
 800665e:	f3ef 8211 	mrs	r2, BASEPRI
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	61ba      	str	r2, [r7, #24]
 8006674:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006676:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006678:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006682:	2b00      	cmp	r3, #0
 8006684:	d02f      	beq.n	80066e6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800668c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006694:	f000 f89d 	bl	80067d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	1e5a      	subs	r2, r3, #1
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80066a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80066a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a8:	d112      	bne.n	80066d0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d016      	beq.n	80066e0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	3310      	adds	r3, #16
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fcde 	bl	8007078 <xTaskRemoveFromEventList>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00e      	beq.n	80066e0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00b      	beq.n	80066e0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	e007      	b.n	80066e0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80066d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066d4:	3301      	adds	r3, #1
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	b25a      	sxtb	r2, r3
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80066e0:	2301      	movs	r3, #1
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34
 80066e4:	e001      	b.n	80066ea <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
 80066ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3738      	adds	r7, #56	; 0x38
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b086      	sub	sp, #24
 8006702:	af00      	add	r7, sp, #0
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800670a:	2300      	movs	r3, #0
 800670c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10d      	bne.n	8006738 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d14d      	bne.n	80067c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	4618      	mov	r0, r3
 800672a:	f000 fef5 	bl	8007518 <xTaskPriorityDisinherit>
 800672e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	605a      	str	r2, [r3, #4]
 8006736:	e043      	b.n	80067c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d119      	bne.n	8006772 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6898      	ldr	r0, [r3, #8]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	461a      	mov	r2, r3
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	f002 ff83 	bl	8009654 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	441a      	add	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	429a      	cmp	r2, r3
 8006766:	d32b      	bcc.n	80067c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	609a      	str	r2, [r3, #8]
 8006770:	e026      	b.n	80067c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	68d8      	ldr	r0, [r3, #12]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	461a      	mov	r2, r3
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	f002 ff69 	bl	8009654 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	425b      	negs	r3, r3
 800678c:	441a      	add	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d207      	bcs.n	80067ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	425b      	negs	r3, r3
 80067a8:	441a      	add	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d105      	bne.n	80067c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	3b01      	subs	r3, #1
 80067be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80067c8:	697b      	ldr	r3, [r7, #20]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d018      	beq.n	8006816 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ec:	441a      	add	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d303      	bcc.n	8006806 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68d9      	ldr	r1, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	461a      	mov	r2, r3
 8006810:	6838      	ldr	r0, [r7, #0]
 8006812:	f002 ff1f 	bl	8009654 <memcpy>
	}
}
 8006816:	bf00      	nop
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006826:	f001 fa15 	bl	8007c54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006830:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006832:	e011      	b.n	8006858 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	2b00      	cmp	r3, #0
 800683a:	d012      	beq.n	8006862 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	3324      	adds	r3, #36	; 0x24
 8006840:	4618      	mov	r0, r3
 8006842:	f000 fc19 	bl	8007078 <xTaskRemoveFromEventList>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800684c:	f000 fcf6 	bl	800723c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	3b01      	subs	r3, #1
 8006854:	b2db      	uxtb	r3, r3
 8006856:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800685c:	2b00      	cmp	r3, #0
 800685e:	dce9      	bgt.n	8006834 <prvUnlockQueue+0x16>
 8006860:	e000      	b.n	8006864 <prvUnlockQueue+0x46>
					break;
 8006862:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	22ff      	movs	r2, #255	; 0xff
 8006868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800686c:	f001 fa20 	bl	8007cb0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006870:	f001 f9f0 	bl	8007c54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800687a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800687c:	e011      	b.n	80068a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d012      	beq.n	80068ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	3310      	adds	r3, #16
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fbf4 	bl	8007078 <xTaskRemoveFromEventList>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006896:	f000 fcd1 	bl	800723c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800689a:	7bbb      	ldrb	r3, [r7, #14]
 800689c:	3b01      	subs	r3, #1
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	dce9      	bgt.n	800687e <prvUnlockQueue+0x60>
 80068aa:	e000      	b.n	80068ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	22ff      	movs	r2, #255	; 0xff
 80068b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80068b6:	f001 f9fb 	bl	8007cb0 <vPortExitCritical>
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068ca:	f001 f9c3 	bl	8007c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d102      	bne.n	80068dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068d6:	2301      	movs	r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	e001      	b.n	80068e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068dc:	2300      	movs	r3, #0
 80068de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068e0:	f001 f9e6 	bl	8007cb0 <vPortExitCritical>

	return xReturn;
 80068e4:	68fb      	ldr	r3, [r7, #12]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068f6:	f001 f9ad 	bl	8007c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006902:	429a      	cmp	r2, r3
 8006904:	d102      	bne.n	800690c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006906:	2301      	movs	r3, #1
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	e001      	b.n	8006910 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006910:	f001 f9ce 	bl	8007cb0 <vPortExitCritical>

	return xReturn;
 8006914:	68fb      	ldr	r3, [r7, #12]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800691e:	b580      	push	{r7, lr}
 8006920:	b08c      	sub	sp, #48	; 0x30
 8006922:	af04      	add	r7, sp, #16
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	603b      	str	r3, [r7, #0]
 800692a:	4613      	mov	r3, r2
 800692c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800692e:	88fb      	ldrh	r3, [r7, #6]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4618      	mov	r0, r3
 8006934:	f001 fa7e 	bl	8007e34 <pvPortMalloc>
 8006938:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00e      	beq.n	800695e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006940:	20b4      	movs	r0, #180	; 0xb4
 8006942:	f001 fa77 	bl	8007e34 <pvPortMalloc>
 8006946:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	631a      	str	r2, [r3, #48]	; 0x30
 8006954:	e005      	b.n	8006962 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006956:	6978      	ldr	r0, [r7, #20]
 8006958:	f001 fa7e 	bl	8007e58 <vPortFree>
 800695c:	e001      	b.n	8006962 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800695e:	2300      	movs	r3, #0
 8006960:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d013      	beq.n	8006990 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006968:	88fa      	ldrh	r2, [r7, #6]
 800696a:	2300      	movs	r3, #0
 800696c:	9303      	str	r3, [sp, #12]
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	9302      	str	r3, [sp, #8]
 8006972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68b9      	ldr	r1, [r7, #8]
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 f80e 	bl	80069a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006984:	69f8      	ldr	r0, [r7, #28]
 8006986:	f000 f8a1 	bl	8006acc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800698a:	2301      	movs	r3, #1
 800698c:	61bb      	str	r3, [r7, #24]
 800698e:	e002      	b.n	8006996 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006990:	f04f 33ff 	mov.w	r3, #4294967295
 8006994:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006996:	69bb      	ldr	r3, [r7, #24]
	}
 8006998:	4618      	mov	r0, r3
 800699a:	3720      	adds	r7, #32
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b088      	sub	sp, #32
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069b8:	3b01      	subs	r3, #1
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	f023 0307 	bic.w	r3, r3, #7
 80069c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <prvInitialiseNewTask+0x46>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	e7fe      	b.n	80069e4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069e6:	2300      	movs	r3, #0
 80069e8:	61fb      	str	r3, [r7, #28]
 80069ea:	e012      	b.n	8006a12 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	4413      	add	r3, r2
 80069f2:	7819      	ldrb	r1, [r3, #0]
 80069f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	4413      	add	r3, r2
 80069fa:	3334      	adds	r3, #52	; 0x34
 80069fc:	460a      	mov	r2, r1
 80069fe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	4413      	add	r3, r2
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d006      	beq.n	8006a1a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	61fb      	str	r3, [r7, #28]
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	2b0f      	cmp	r3, #15
 8006a16:	d9e9      	bls.n	80069ec <prvInitialiseNewTask+0x4c>
 8006a18:	e000      	b.n	8006a1c <prvInitialiseNewTask+0x7c>
		{
			break;
 8006a1a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	2b06      	cmp	r3, #6
 8006a28:	d901      	bls.n	8006a2e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a2a:	2306      	movs	r3, #6
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a38:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	3304      	adds	r3, #4
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7ff f9ed 	bl	8005e24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	3318      	adds	r3, #24
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7ff f9e8 	bl	8005e24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	f1c3 0207 	rsb	r2, r3, #7
 8006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	334c      	adds	r3, #76	; 0x4c
 8006a7e:	2260      	movs	r2, #96	; 0x60
 8006a80:	2100      	movs	r1, #0
 8006a82:	4618      	mov	r0, r3
 8006a84:	f002 fdf1 	bl	800966a <memset>
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	4a0d      	ldr	r2, [pc, #52]	; (8006ac0 <prvInitialiseNewTask+0x120>)
 8006a8c:	651a      	str	r2, [r3, #80]	; 0x50
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	4a0c      	ldr	r2, [pc, #48]	; (8006ac4 <prvInitialiseNewTask+0x124>)
 8006a92:	655a      	str	r2, [r3, #84]	; 0x54
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	4a0c      	ldr	r2, [pc, #48]	; (8006ac8 <prvInitialiseNewTask+0x128>)
 8006a98:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	68f9      	ldr	r1, [r7, #12]
 8006a9e:	69b8      	ldr	r0, [r7, #24]
 8006aa0:	f001 f80c 	bl	8007abc <pxPortInitialiseStack>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ab6:	bf00      	nop
 8006ab8:	3720      	adds	r7, #32
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	0800db38 	.word	0x0800db38
 8006ac4:	0800db58 	.word	0x0800db58
 8006ac8:	0800db18 	.word	0x0800db18

08006acc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ad4:	f001 f8be 	bl	8007c54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ad8:	4b2a      	ldr	r3, [pc, #168]	; (8006b84 <prvAddNewTaskToReadyList+0xb8>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3301      	adds	r3, #1
 8006ade:	4a29      	ldr	r2, [pc, #164]	; (8006b84 <prvAddNewTaskToReadyList+0xb8>)
 8006ae0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ae2:	4b29      	ldr	r3, [pc, #164]	; (8006b88 <prvAddNewTaskToReadyList+0xbc>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d109      	bne.n	8006afe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006aea:	4a27      	ldr	r2, [pc, #156]	; (8006b88 <prvAddNewTaskToReadyList+0xbc>)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006af0:	4b24      	ldr	r3, [pc, #144]	; (8006b84 <prvAddNewTaskToReadyList+0xb8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d110      	bne.n	8006b1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006af8:	f000 fbc4 	bl	8007284 <prvInitialiseTaskLists>
 8006afc:	e00d      	b.n	8006b1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006afe:	4b23      	ldr	r3, [pc, #140]	; (8006b8c <prvAddNewTaskToReadyList+0xc0>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d109      	bne.n	8006b1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b06:	4b20      	ldr	r3, [pc, #128]	; (8006b88 <prvAddNewTaskToReadyList+0xbc>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d802      	bhi.n	8006b1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b14:	4a1c      	ldr	r2, [pc, #112]	; (8006b88 <prvAddNewTaskToReadyList+0xbc>)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b1a:	4b1d      	ldr	r3, [pc, #116]	; (8006b90 <prvAddNewTaskToReadyList+0xc4>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	4a1b      	ldr	r2, [pc, #108]	; (8006b90 <prvAddNewTaskToReadyList+0xc4>)
 8006b22:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	2201      	movs	r2, #1
 8006b2a:	409a      	lsls	r2, r3
 8006b2c:	4b19      	ldr	r3, [pc, #100]	; (8006b94 <prvAddNewTaskToReadyList+0xc8>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	4a18      	ldr	r2, [pc, #96]	; (8006b94 <prvAddNewTaskToReadyList+0xc8>)
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4a15      	ldr	r2, [pc, #84]	; (8006b98 <prvAddNewTaskToReadyList+0xcc>)
 8006b44:	441a      	add	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3304      	adds	r3, #4
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	f7ff f975 	bl	8005e3c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b52:	f001 f8ad 	bl	8007cb0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b56:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <prvAddNewTaskToReadyList+0xc0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00e      	beq.n	8006b7c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b5e:	4b0a      	ldr	r3, [pc, #40]	; (8006b88 <prvAddNewTaskToReadyList+0xbc>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d207      	bcs.n	8006b7c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <prvAddNewTaskToReadyList+0xd0>)
 8006b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b7c:	bf00      	nop
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	2000047c 	.word	0x2000047c
 8006b88:	2000037c 	.word	0x2000037c
 8006b8c:	20000488 	.word	0x20000488
 8006b90:	20000498 	.word	0x20000498
 8006b94:	20000484 	.word	0x20000484
 8006b98:	20000380 	.word	0x20000380
 8006b9c:	e000ed04 	.word	0xe000ed04

08006ba0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d016      	beq.n	8006be0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006bb2:	4b13      	ldr	r3, [pc, #76]	; (8006c00 <vTaskDelay+0x60>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d009      	beq.n	8006bce <vTaskDelay+0x2e>
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	60bb      	str	r3, [r7, #8]
 8006bcc:	e7fe      	b.n	8006bcc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006bce:	f000 f869 	bl	8006ca4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 ff0b 	bl	80079f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006bda:	f000 f871 	bl	8006cc0 <xTaskResumeAll>
 8006bde:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d107      	bne.n	8006bf6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006be6:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <vTaskDelay+0x64>)
 8006be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bf6:	bf00      	nop
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	200004a4 	.word	0x200004a4
 8006c04:	e000ed04 	.word	0xe000ed04

08006c08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006c0e:	4b1d      	ldr	r3, [pc, #116]	; (8006c84 <vTaskStartScheduler+0x7c>)
 8006c10:	9301      	str	r3, [sp, #4]
 8006c12:	2300      	movs	r3, #0
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	2300      	movs	r3, #0
 8006c18:	2280      	movs	r2, #128	; 0x80
 8006c1a:	491b      	ldr	r1, [pc, #108]	; (8006c88 <vTaskStartScheduler+0x80>)
 8006c1c:	481b      	ldr	r0, [pc, #108]	; (8006c8c <vTaskStartScheduler+0x84>)
 8006c1e:	f7ff fe7e 	bl	800691e <xTaskCreate>
 8006c22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d11a      	bne.n	8006c60 <vTaskStartScheduler+0x58>
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	60bb      	str	r3, [r7, #8]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c3c:	4b14      	ldr	r3, [pc, #80]	; (8006c90 <vTaskStartScheduler+0x88>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	334c      	adds	r3, #76	; 0x4c
 8006c42:	4a14      	ldr	r2, [pc, #80]	; (8006c94 <vTaskStartScheduler+0x8c>)
 8006c44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c46:	4b14      	ldr	r3, [pc, #80]	; (8006c98 <vTaskStartScheduler+0x90>)
 8006c48:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c4e:	4b13      	ldr	r3, [pc, #76]	; (8006c9c <vTaskStartScheduler+0x94>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006c54:	4b12      	ldr	r3, [pc, #72]	; (8006ca0 <vTaskStartScheduler+0x98>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c5a:	f000 ff9d 	bl	8007b98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c5e:	e00d      	b.n	8006c7c <vTaskStartScheduler+0x74>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c66:	d109      	bne.n	8006c7c <vTaskStartScheduler+0x74>
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	607b      	str	r3, [r7, #4]
 8006c7a:	e7fe      	b.n	8006c7a <vTaskStartScheduler+0x72>
}
 8006c7c:	bf00      	nop
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	200004a0 	.word	0x200004a0
 8006c88:	0800d9ec 	.word	0x0800d9ec
 8006c8c:	08007255 	.word	0x08007255
 8006c90:	2000037c 	.word	0x2000037c
 8006c94:	2000018c 	.word	0x2000018c
 8006c98:	2000049c 	.word	0x2000049c
 8006c9c:	20000488 	.word	0x20000488
 8006ca0:	20000480 	.word	0x20000480

08006ca4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006ca8:	4b04      	ldr	r3, [pc, #16]	; (8006cbc <vTaskSuspendAll+0x18>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3301      	adds	r3, #1
 8006cae:	4a03      	ldr	r2, [pc, #12]	; (8006cbc <vTaskSuspendAll+0x18>)
 8006cb0:	6013      	str	r3, [r2, #0]
}
 8006cb2:	bf00      	nop
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bc80      	pop	{r7}
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	200004a4 	.word	0x200004a4

08006cc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006cce:	4b41      	ldr	r3, [pc, #260]	; (8006dd4 <xTaskResumeAll+0x114>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <xTaskResumeAll+0x2a>
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	e7fe      	b.n	8006ce8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cea:	f000 ffb3 	bl	8007c54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cee:	4b39      	ldr	r3, [pc, #228]	; (8006dd4 <xTaskResumeAll+0x114>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	4a37      	ldr	r2, [pc, #220]	; (8006dd4 <xTaskResumeAll+0x114>)
 8006cf6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cf8:	4b36      	ldr	r3, [pc, #216]	; (8006dd4 <xTaskResumeAll+0x114>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d161      	bne.n	8006dc4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d00:	4b35      	ldr	r3, [pc, #212]	; (8006dd8 <xTaskResumeAll+0x118>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d05d      	beq.n	8006dc4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d08:	e02e      	b.n	8006d68 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006d0a:	4b34      	ldr	r3, [pc, #208]	; (8006ddc <xTaskResumeAll+0x11c>)
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3318      	adds	r3, #24
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff f8eb 	bl	8005ef2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff f8e6 	bl	8005ef2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	409a      	lsls	r2, r3
 8006d2e:	4b2c      	ldr	r3, [pc, #176]	; (8006de0 <xTaskResumeAll+0x120>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	4a2a      	ldr	r2, [pc, #168]	; (8006de0 <xTaskResumeAll+0x120>)
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4a27      	ldr	r2, [pc, #156]	; (8006de4 <xTaskResumeAll+0x124>)
 8006d46:	441a      	add	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4610      	mov	r0, r2
 8006d50:	f7ff f874 	bl	8005e3c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d58:	4b23      	ldr	r3, [pc, #140]	; (8006de8 <xTaskResumeAll+0x128>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d302      	bcc.n	8006d68 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006d62:	4b22      	ldr	r3, [pc, #136]	; (8006dec <xTaskResumeAll+0x12c>)
 8006d64:	2201      	movs	r2, #1
 8006d66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d68:	4b1c      	ldr	r3, [pc, #112]	; (8006ddc <xTaskResumeAll+0x11c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1cc      	bne.n	8006d0a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d76:	f000 fb17 	bl	80073a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d7a:	4b1d      	ldr	r3, [pc, #116]	; (8006df0 <xTaskResumeAll+0x130>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d010      	beq.n	8006da8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d86:	f000 f837 	bl	8006df8 <xTaskIncrementTick>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006d90:	4b16      	ldr	r3, [pc, #88]	; (8006dec <xTaskResumeAll+0x12c>)
 8006d92:	2201      	movs	r2, #1
 8006d94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1f1      	bne.n	8006d86 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006da2:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <xTaskResumeAll+0x130>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006da8:	4b10      	ldr	r3, [pc, #64]	; (8006dec <xTaskResumeAll+0x12c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d009      	beq.n	8006dc4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006db0:	2301      	movs	r3, #1
 8006db2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006db4:	4b0f      	ldr	r3, [pc, #60]	; (8006df4 <xTaskResumeAll+0x134>)
 8006db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006dc4:	f000 ff74 	bl	8007cb0 <vPortExitCritical>

	return xAlreadyYielded;
 8006dc8:	68bb      	ldr	r3, [r7, #8]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	200004a4 	.word	0x200004a4
 8006dd8:	2000047c 	.word	0x2000047c
 8006ddc:	2000043c 	.word	0x2000043c
 8006de0:	20000484 	.word	0x20000484
 8006de4:	20000380 	.word	0x20000380
 8006de8:	2000037c 	.word	0x2000037c
 8006dec:	20000490 	.word	0x20000490
 8006df0:	2000048c 	.word	0x2000048c
 8006df4:	e000ed04 	.word	0xe000ed04

08006df8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e02:	4b50      	ldr	r3, [pc, #320]	; (8006f44 <xTaskIncrementTick+0x14c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f040 808c 	bne.w	8006f24 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8006e0c:	4b4e      	ldr	r3, [pc, #312]	; (8006f48 <xTaskIncrementTick+0x150>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3301      	adds	r3, #1
 8006e12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e14:	4a4c      	ldr	r2, [pc, #304]	; (8006f48 <xTaskIncrementTick+0x150>)
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d11f      	bne.n	8006e60 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e20:	4b4a      	ldr	r3, [pc, #296]	; (8006f4c <xTaskIncrementTick+0x154>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d009      	beq.n	8006e3e <xTaskIncrementTick+0x46>
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	603b      	str	r3, [r7, #0]
 8006e3c:	e7fe      	b.n	8006e3c <xTaskIncrementTick+0x44>
 8006e3e:	4b43      	ldr	r3, [pc, #268]	; (8006f4c <xTaskIncrementTick+0x154>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	4b42      	ldr	r3, [pc, #264]	; (8006f50 <xTaskIncrementTick+0x158>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a40      	ldr	r2, [pc, #256]	; (8006f4c <xTaskIncrementTick+0x154>)
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	4a40      	ldr	r2, [pc, #256]	; (8006f50 <xTaskIncrementTick+0x158>)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	4b40      	ldr	r3, [pc, #256]	; (8006f54 <xTaskIncrementTick+0x15c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3301      	adds	r3, #1
 8006e58:	4a3e      	ldr	r2, [pc, #248]	; (8006f54 <xTaskIncrementTick+0x15c>)
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	f000 faa4 	bl	80073a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e60:	4b3d      	ldr	r3, [pc, #244]	; (8006f58 <xTaskIncrementTick+0x160>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d34d      	bcc.n	8006f06 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e6a:	4b38      	ldr	r3, [pc, #224]	; (8006f4c <xTaskIncrementTick+0x154>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <xTaskIncrementTick+0x80>
 8006e74:	2301      	movs	r3, #1
 8006e76:	e000      	b.n	8006e7a <xTaskIncrementTick+0x82>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d004      	beq.n	8006e88 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e7e:	4b36      	ldr	r3, [pc, #216]	; (8006f58 <xTaskIncrementTick+0x160>)
 8006e80:	f04f 32ff 	mov.w	r2, #4294967295
 8006e84:	601a      	str	r2, [r3, #0]
					break;
 8006e86:	e03e      	b.n	8006f06 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e88:	4b30      	ldr	r3, [pc, #192]	; (8006f4c <xTaskIncrementTick+0x154>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d203      	bcs.n	8006ea8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ea0:	4a2d      	ldr	r2, [pc, #180]	; (8006f58 <xTaskIncrementTick+0x160>)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6013      	str	r3, [r2, #0]
						break;
 8006ea6:	e02e      	b.n	8006f06 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff f820 	bl	8005ef2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	3318      	adds	r3, #24
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff f817 	bl	8005ef2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	2201      	movs	r2, #1
 8006eca:	409a      	lsls	r2, r3
 8006ecc:	4b23      	ldr	r3, [pc, #140]	; (8006f5c <xTaskIncrementTick+0x164>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	4a22      	ldr	r2, [pc, #136]	; (8006f5c <xTaskIncrementTick+0x164>)
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eda:	4613      	mov	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4a1f      	ldr	r2, [pc, #124]	; (8006f60 <xTaskIncrementTick+0x168>)
 8006ee4:	441a      	add	r2, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	3304      	adds	r3, #4
 8006eea:	4619      	mov	r1, r3
 8006eec:	4610      	mov	r0, r2
 8006eee:	f7fe ffa5 	bl	8005e3c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef6:	4b1b      	ldr	r3, [pc, #108]	; (8006f64 <xTaskIncrementTick+0x16c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d3b4      	bcc.n	8006e6a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006f00:	2301      	movs	r3, #1
 8006f02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f04:	e7b1      	b.n	8006e6a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f06:	4b17      	ldr	r3, [pc, #92]	; (8006f64 <xTaskIncrementTick+0x16c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0c:	4914      	ldr	r1, [pc, #80]	; (8006f60 <xTaskIncrementTick+0x168>)
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	440b      	add	r3, r1
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d907      	bls.n	8006f2e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	e004      	b.n	8006f2e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f24:	4b10      	ldr	r3, [pc, #64]	; (8006f68 <xTaskIncrementTick+0x170>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	4a0f      	ldr	r2, [pc, #60]	; (8006f68 <xTaskIncrementTick+0x170>)
 8006f2c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f2e:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <xTaskIncrementTick+0x174>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006f36:	2301      	movs	r3, #1
 8006f38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f3a:	697b      	ldr	r3, [r7, #20]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3718      	adds	r7, #24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	200004a4 	.word	0x200004a4
 8006f48:	20000480 	.word	0x20000480
 8006f4c:	20000434 	.word	0x20000434
 8006f50:	20000438 	.word	0x20000438
 8006f54:	20000494 	.word	0x20000494
 8006f58:	2000049c 	.word	0x2000049c
 8006f5c:	20000484 	.word	0x20000484
 8006f60:	20000380 	.word	0x20000380
 8006f64:	2000037c 	.word	0x2000037c
 8006f68:	2000048c 	.word	0x2000048c
 8006f6c:	20000490 	.word	0x20000490

08006f70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f76:	4b28      	ldr	r3, [pc, #160]	; (8007018 <vTaskSwitchContext+0xa8>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f7e:	4b27      	ldr	r3, [pc, #156]	; (800701c <vTaskSwitchContext+0xac>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f84:	e043      	b.n	800700e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8006f86:	4b25      	ldr	r3, [pc, #148]	; (800701c <vTaskSwitchContext+0xac>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f8c:	4b24      	ldr	r3, [pc, #144]	; (8007020 <vTaskSwitchContext+0xb0>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	fab3 f383 	clz	r3, r3
 8006f98:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006f9a:	7afb      	ldrb	r3, [r7, #11]
 8006f9c:	f1c3 031f 	rsb	r3, r3, #31
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	4920      	ldr	r1, [pc, #128]	; (8007024 <vTaskSwitchContext+0xb4>)
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	440b      	add	r3, r1
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d109      	bne.n	8006fca <vTaskSwitchContext+0x5a>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	607b      	str	r3, [r7, #4]
 8006fc8:	e7fe      	b.n	8006fc8 <vTaskSwitchContext+0x58>
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4a13      	ldr	r2, [pc, #76]	; (8007024 <vTaskSwitchContext+0xb4>)
 8006fd6:	4413      	add	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	605a      	str	r2, [r3, #4]
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	3308      	adds	r3, #8
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d104      	bne.n	8006ffa <vTaskSwitchContext+0x8a>
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	605a      	str	r2, [r3, #4]
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	4a09      	ldr	r2, [pc, #36]	; (8007028 <vTaskSwitchContext+0xb8>)
 8007002:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007004:	4b08      	ldr	r3, [pc, #32]	; (8007028 <vTaskSwitchContext+0xb8>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	334c      	adds	r3, #76	; 0x4c
 800700a:	4a08      	ldr	r2, [pc, #32]	; (800702c <vTaskSwitchContext+0xbc>)
 800700c:	6013      	str	r3, [r2, #0]
}
 800700e:	bf00      	nop
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	bc80      	pop	{r7}
 8007016:	4770      	bx	lr
 8007018:	200004a4 	.word	0x200004a4
 800701c:	20000490 	.word	0x20000490
 8007020:	20000484 	.word	0x20000484
 8007024:	20000380 	.word	0x20000380
 8007028:	2000037c 	.word	0x2000037c
 800702c:	2000018c 	.word	0x2000018c

08007030 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d109      	bne.n	8007054 <vTaskPlaceOnEventList+0x24>
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	e7fe      	b.n	8007052 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007054:	4b07      	ldr	r3, [pc, #28]	; (8007074 <vTaskPlaceOnEventList+0x44>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3318      	adds	r3, #24
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7fe ff10 	bl	8005e82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007062:	2101      	movs	r1, #1
 8007064:	6838      	ldr	r0, [r7, #0]
 8007066:	f000 fcc3 	bl	80079f0 <prvAddCurrentTaskToDelayedList>
}
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	2000037c 	.word	0x2000037c

08007078 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d109      	bne.n	80070a2 <xTaskRemoveFromEventList+0x2a>
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	e7fe      	b.n	80070a0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	3318      	adds	r3, #24
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe ff23 	bl	8005ef2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070ac:	4b1d      	ldr	r3, [pc, #116]	; (8007124 <xTaskRemoveFromEventList+0xac>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d11c      	bne.n	80070ee <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	3304      	adds	r3, #4
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe ff1a 	bl	8005ef2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	2201      	movs	r2, #1
 80070c4:	409a      	lsls	r2, r3
 80070c6:	4b18      	ldr	r3, [pc, #96]	; (8007128 <xTaskRemoveFromEventList+0xb0>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	4a16      	ldr	r2, [pc, #88]	; (8007128 <xTaskRemoveFromEventList+0xb0>)
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d4:	4613      	mov	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4a13      	ldr	r2, [pc, #76]	; (800712c <xTaskRemoveFromEventList+0xb4>)
 80070de:	441a      	add	r2, r3
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	3304      	adds	r3, #4
 80070e4:	4619      	mov	r1, r3
 80070e6:	4610      	mov	r0, r2
 80070e8:	f7fe fea8 	bl	8005e3c <vListInsertEnd>
 80070ec:	e005      	b.n	80070fa <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	3318      	adds	r3, #24
 80070f2:	4619      	mov	r1, r3
 80070f4:	480e      	ldr	r0, [pc, #56]	; (8007130 <xTaskRemoveFromEventList+0xb8>)
 80070f6:	f7fe fea1 	bl	8005e3c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fe:	4b0d      	ldr	r3, [pc, #52]	; (8007134 <xTaskRemoveFromEventList+0xbc>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	429a      	cmp	r2, r3
 8007106:	d905      	bls.n	8007114 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007108:	2301      	movs	r3, #1
 800710a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800710c:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <xTaskRemoveFromEventList+0xc0>)
 800710e:	2201      	movs	r2, #1
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	e001      	b.n	8007118 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007114:	2300      	movs	r3, #0
 8007116:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007118:	697b      	ldr	r3, [r7, #20]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	200004a4 	.word	0x200004a4
 8007128:	20000484 	.word	0x20000484
 800712c:	20000380 	.word	0x20000380
 8007130:	2000043c 	.word	0x2000043c
 8007134:	2000037c 	.word	0x2000037c
 8007138:	20000490 	.word	0x20000490

0800713c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d109      	bne.n	800715e <vTaskSetTimeOutState+0x22>
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	e7fe      	b.n	800715c <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800715e:	4b06      	ldr	r3, [pc, #24]	; (8007178 <vTaskSetTimeOutState+0x3c>)
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <vTaskSetTimeOutState+0x40>)
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	605a      	str	r2, [r3, #4]
}
 800716e:	bf00      	nop
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr
 8007178:	20000494 	.word	0x20000494
 800717c:	20000480 	.word	0x20000480

08007180 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d109      	bne.n	80071a4 <xTaskCheckForTimeOut+0x24>
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	e7fe      	b.n	80071a2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d109      	bne.n	80071be <xTaskCheckForTimeOut+0x3e>
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	60bb      	str	r3, [r7, #8]
 80071bc:	e7fe      	b.n	80071bc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80071be:	f000 fd49 	bl	8007c54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071c2:	4b1c      	ldr	r3, [pc, #112]	; (8007234 <xTaskCheckForTimeOut+0xb4>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d0:	d102      	bne.n	80071d8 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	617b      	str	r3, [r7, #20]
 80071d6:	e026      	b.n	8007226 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	4b16      	ldr	r3, [pc, #88]	; (8007238 <xTaskCheckForTimeOut+0xb8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d007      	beq.n	80071f4 <xTaskCheckForTimeOut+0x74>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d302      	bcc.n	80071f4 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071ee:	2301      	movs	r3, #1
 80071f0:	617b      	str	r3, [r7, #20]
 80071f2:	e018      	b.n	8007226 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	1ad2      	subs	r2, r2, r3
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d20e      	bcs.n	8007222 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6859      	ldr	r1, [r3, #4]
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	1acb      	subs	r3, r1, r3
 8007210:	441a      	add	r2, r3
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7ff ff90 	bl	800713c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800721c:	2300      	movs	r3, #0
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	e001      	b.n	8007226 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8007222:	2301      	movs	r3, #1
 8007224:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007226:	f000 fd43 	bl	8007cb0 <vPortExitCritical>

	return xReturn;
 800722a:	697b      	ldr	r3, [r7, #20]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20000480 	.word	0x20000480
 8007238:	20000494 	.word	0x20000494

0800723c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007240:	4b03      	ldr	r3, [pc, #12]	; (8007250 <vTaskMissedYield+0x14>)
 8007242:	2201      	movs	r2, #1
 8007244:	601a      	str	r2, [r3, #0]
}
 8007246:	bf00      	nop
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	20000490 	.word	0x20000490

08007254 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800725c:	f000 f852 	bl	8007304 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007260:	4b06      	ldr	r3, [pc, #24]	; (800727c <prvIdleTask+0x28>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d9f9      	bls.n	800725c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007268:	4b05      	ldr	r3, [pc, #20]	; (8007280 <prvIdleTask+0x2c>)
 800726a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007278:	e7f0      	b.n	800725c <prvIdleTask+0x8>
 800727a:	bf00      	nop
 800727c:	20000380 	.word	0x20000380
 8007280:	e000ed04 	.word	0xe000ed04

08007284 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800728a:	2300      	movs	r3, #0
 800728c:	607b      	str	r3, [r7, #4]
 800728e:	e00c      	b.n	80072aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4a12      	ldr	r2, [pc, #72]	; (80072e4 <prvInitialiseTaskLists+0x60>)
 800729c:	4413      	add	r3, r2
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fe fda1 	bl	8005de6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3301      	adds	r3, #1
 80072a8:	607b      	str	r3, [r7, #4]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b06      	cmp	r3, #6
 80072ae:	d9ef      	bls.n	8007290 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072b0:	480d      	ldr	r0, [pc, #52]	; (80072e8 <prvInitialiseTaskLists+0x64>)
 80072b2:	f7fe fd98 	bl	8005de6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072b6:	480d      	ldr	r0, [pc, #52]	; (80072ec <prvInitialiseTaskLists+0x68>)
 80072b8:	f7fe fd95 	bl	8005de6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072bc:	480c      	ldr	r0, [pc, #48]	; (80072f0 <prvInitialiseTaskLists+0x6c>)
 80072be:	f7fe fd92 	bl	8005de6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072c2:	480c      	ldr	r0, [pc, #48]	; (80072f4 <prvInitialiseTaskLists+0x70>)
 80072c4:	f7fe fd8f 	bl	8005de6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072c8:	480b      	ldr	r0, [pc, #44]	; (80072f8 <prvInitialiseTaskLists+0x74>)
 80072ca:	f7fe fd8c 	bl	8005de6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072ce:	4b0b      	ldr	r3, [pc, #44]	; (80072fc <prvInitialiseTaskLists+0x78>)
 80072d0:	4a05      	ldr	r2, [pc, #20]	; (80072e8 <prvInitialiseTaskLists+0x64>)
 80072d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072d4:	4b0a      	ldr	r3, [pc, #40]	; (8007300 <prvInitialiseTaskLists+0x7c>)
 80072d6:	4a05      	ldr	r2, [pc, #20]	; (80072ec <prvInitialiseTaskLists+0x68>)
 80072d8:	601a      	str	r2, [r3, #0]
}
 80072da:	bf00      	nop
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20000380 	.word	0x20000380
 80072e8:	2000040c 	.word	0x2000040c
 80072ec:	20000420 	.word	0x20000420
 80072f0:	2000043c 	.word	0x2000043c
 80072f4:	20000450 	.word	0x20000450
 80072f8:	20000468 	.word	0x20000468
 80072fc:	20000434 	.word	0x20000434
 8007300:	20000438 	.word	0x20000438

08007304 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800730a:	e028      	b.n	800735e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800730c:	f7ff fcca 	bl	8006ca4 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8007310:	4b17      	ldr	r3, [pc, #92]	; (8007370 <prvCheckTasksWaitingTermination+0x6c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	bf0c      	ite	eq
 8007318:	2301      	moveq	r3, #1
 800731a:	2300      	movne	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8007320:	f7ff fcce 	bl	8006cc0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d119      	bne.n	800735e <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800732a:	f000 fc93 	bl	8007c54 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800732e:	4b10      	ldr	r3, [pc, #64]	; (8007370 <prvCheckTasksWaitingTermination+0x6c>)
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	3304      	adds	r3, #4
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe fdd9 	bl	8005ef2 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8007340:	4b0c      	ldr	r3, [pc, #48]	; (8007374 <prvCheckTasksWaitingTermination+0x70>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3b01      	subs	r3, #1
 8007346:	4a0b      	ldr	r2, [pc, #44]	; (8007374 <prvCheckTasksWaitingTermination+0x70>)
 8007348:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800734a:	4b0b      	ldr	r3, [pc, #44]	; (8007378 <prvCheckTasksWaitingTermination+0x74>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3b01      	subs	r3, #1
 8007350:	4a09      	ldr	r2, [pc, #36]	; (8007378 <prvCheckTasksWaitingTermination+0x74>)
 8007352:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8007354:	f000 fcac 	bl	8007cb0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8007358:	6838      	ldr	r0, [r7, #0]
 800735a:	f000 f80f 	bl	800737c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800735e:	4b06      	ldr	r3, [pc, #24]	; (8007378 <prvCheckTasksWaitingTermination+0x74>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1d2      	bne.n	800730c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007366:	bf00      	nop
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	20000450 	.word	0x20000450
 8007374:	2000047c 	.word	0x2000047c
 8007378:	20000464 	.word	0x20000464

0800737c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	334c      	adds	r3, #76	; 0x4c
 8007388:	4618      	mov	r0, r3
 800738a:	f003 f873 	bl	800a474 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fd60 	bl	8007e58 <vPortFree>
			vPortFree( pxTCB );
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fd5d 	bl	8007e58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800739e:	bf00      	nop
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073ae:	4b0e      	ldr	r3, [pc, #56]	; (80073e8 <prvResetNextTaskUnblockTime+0x40>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <prvResetNextTaskUnblockTime+0x14>
 80073b8:	2301      	movs	r3, #1
 80073ba:	e000      	b.n	80073be <prvResetNextTaskUnblockTime+0x16>
 80073bc:	2300      	movs	r3, #0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d004      	beq.n	80073cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073c2:	4b0a      	ldr	r3, [pc, #40]	; (80073ec <prvResetNextTaskUnblockTime+0x44>)
 80073c4:	f04f 32ff 	mov.w	r2, #4294967295
 80073c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073ca:	e008      	b.n	80073de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80073cc:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <prvResetNextTaskUnblockTime+0x40>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	4a04      	ldr	r2, [pc, #16]	; (80073ec <prvResetNextTaskUnblockTime+0x44>)
 80073dc:	6013      	str	r3, [r2, #0]
}
 80073de:	bf00      	nop
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bc80      	pop	{r7}
 80073e6:	4770      	bx	lr
 80073e8:	20000434 	.word	0x20000434
 80073ec:	2000049c 	.word	0x2000049c

080073f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073f6:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <xTaskGetSchedulerState+0x34>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d102      	bne.n	8007404 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073fe:	2301      	movs	r3, #1
 8007400:	607b      	str	r3, [r7, #4]
 8007402:	e008      	b.n	8007416 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007404:	4b08      	ldr	r3, [pc, #32]	; (8007428 <xTaskGetSchedulerState+0x38>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d102      	bne.n	8007412 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800740c:	2302      	movs	r3, #2
 800740e:	607b      	str	r3, [r7, #4]
 8007410:	e001      	b.n	8007416 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007412:	2300      	movs	r3, #0
 8007414:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007416:	687b      	ldr	r3, [r7, #4]
	}
 8007418:	4618      	mov	r0, r3
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	bc80      	pop	{r7}
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20000488 	.word	0x20000488
 8007428:	200004a4 	.word	0x200004a4

0800742c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d062      	beq.n	8007504 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007442:	4b32      	ldr	r3, [pc, #200]	; (800750c <vTaskPriorityInherit+0xe0>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	429a      	cmp	r2, r3
 800744a:	d25b      	bcs.n	8007504 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	2b00      	cmp	r3, #0
 8007452:	db06      	blt.n	8007462 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007454:	4b2d      	ldr	r3, [pc, #180]	; (800750c <vTaskPriorityInherit+0xe0>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745a:	f1c3 0207 	rsb	r2, r3, #7
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6959      	ldr	r1, [r3, #20]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4a27      	ldr	r2, [pc, #156]	; (8007510 <vTaskPriorityInherit+0xe4>)
 8007474:	4413      	add	r3, r2
 8007476:	4299      	cmp	r1, r3
 8007478:	d101      	bne.n	800747e <vTaskPriorityInherit+0x52>
 800747a:	2301      	movs	r3, #1
 800747c:	e000      	b.n	8007480 <vTaskPriorityInherit+0x54>
 800747e:	2300      	movs	r3, #0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d03a      	beq.n	80074fa <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	3304      	adds	r3, #4
 8007488:	4618      	mov	r0, r3
 800748a:	f7fe fd32 	bl	8005ef2 <uxListRemove>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d115      	bne.n	80074c0 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007498:	491d      	ldr	r1, [pc, #116]	; (8007510 <vTaskPriorityInherit+0xe4>)
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	440b      	add	r3, r1
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10a      	bne.n	80074c0 <vTaskPriorityInherit+0x94>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	2201      	movs	r2, #1
 80074b0:	fa02 f303 	lsl.w	r3, r2, r3
 80074b4:	43da      	mvns	r2, r3
 80074b6:	4b17      	ldr	r3, [pc, #92]	; (8007514 <vTaskPriorityInherit+0xe8>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4013      	ands	r3, r2
 80074bc:	4a15      	ldr	r2, [pc, #84]	; (8007514 <vTaskPriorityInherit+0xe8>)
 80074be:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074c0:	4b12      	ldr	r3, [pc, #72]	; (800750c <vTaskPriorityInherit+0xe0>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ce:	2201      	movs	r2, #1
 80074d0:	409a      	lsls	r2, r3
 80074d2:	4b10      	ldr	r3, [pc, #64]	; (8007514 <vTaskPriorityInherit+0xe8>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	4a0e      	ldr	r2, [pc, #56]	; (8007514 <vTaskPriorityInherit+0xe8>)
 80074da:	6013      	str	r3, [r2, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e0:	4613      	mov	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4a09      	ldr	r2, [pc, #36]	; (8007510 <vTaskPriorityInherit+0xe4>)
 80074ea:	441a      	add	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3304      	adds	r3, #4
 80074f0:	4619      	mov	r1, r3
 80074f2:	4610      	mov	r0, r2
 80074f4:	f7fe fca2 	bl	8005e3c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074f8:	e004      	b.n	8007504 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074fa:	4b04      	ldr	r3, [pc, #16]	; (800750c <vTaskPriorityInherit+0xe0>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8007504:	bf00      	nop
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	2000037c 	.word	0x2000037c
 8007510:	20000380 	.word	0x20000380
 8007514:	20000484 	.word	0x20000484

08007518 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d06c      	beq.n	8007608 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800752e:	4b39      	ldr	r3, [pc, #228]	; (8007614 <xTaskPriorityDisinherit+0xfc>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	429a      	cmp	r2, r3
 8007536:	d009      	beq.n	800754c <xTaskPriorityDisinherit+0x34>
 8007538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	60fb      	str	r3, [r7, #12]
 800754a:	e7fe      	b.n	800754a <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007550:	2b00      	cmp	r3, #0
 8007552:	d109      	bne.n	8007568 <xTaskPriorityDisinherit+0x50>
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	60bb      	str	r3, [r7, #8]
 8007566:	e7fe      	b.n	8007566 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800756c:	1e5a      	subs	r2, r3, #1
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757a:	429a      	cmp	r2, r3
 800757c:	d044      	beq.n	8007608 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007582:	2b00      	cmp	r3, #0
 8007584:	d140      	bne.n	8007608 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	3304      	adds	r3, #4
 800758a:	4618      	mov	r0, r3
 800758c:	f7fe fcb1 	bl	8005ef2 <uxListRemove>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d115      	bne.n	80075c2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800759a:	491f      	ldr	r1, [pc, #124]	; (8007618 <xTaskPriorityDisinherit+0x100>)
 800759c:	4613      	mov	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	440b      	add	r3, r1
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10a      	bne.n	80075c2 <xTaskPriorityDisinherit+0xaa>
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	2201      	movs	r2, #1
 80075b2:	fa02 f303 	lsl.w	r3, r2, r3
 80075b6:	43da      	mvns	r2, r3
 80075b8:	4b18      	ldr	r3, [pc, #96]	; (800761c <xTaskPriorityDisinherit+0x104>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4013      	ands	r3, r2
 80075be:	4a17      	ldr	r2, [pc, #92]	; (800761c <xTaskPriorityDisinherit+0x104>)
 80075c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	f1c3 0207 	rsb	r2, r3, #7
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075da:	2201      	movs	r2, #1
 80075dc:	409a      	lsls	r2, r3
 80075de:	4b0f      	ldr	r3, [pc, #60]	; (800761c <xTaskPriorityDisinherit+0x104>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	4a0d      	ldr	r2, [pc, #52]	; (800761c <xTaskPriorityDisinherit+0x104>)
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ec:	4613      	mov	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4a08      	ldr	r2, [pc, #32]	; (8007618 <xTaskPriorityDisinherit+0x100>)
 80075f6:	441a      	add	r2, r3
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	3304      	adds	r3, #4
 80075fc:	4619      	mov	r1, r3
 80075fe:	4610      	mov	r0, r2
 8007600:	f7fe fc1c 	bl	8005e3c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007604:	2301      	movs	r3, #1
 8007606:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007608:	697b      	ldr	r3, [r7, #20]
	}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	2000037c 	.word	0x2000037c
 8007618:	20000380 	.word	0x20000380
 800761c:	20000484 	.word	0x20000484

08007620 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007620:	b480      	push	{r7}
 8007622:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007624:	4b07      	ldr	r3, [pc, #28]	; (8007644 <pvTaskIncrementMutexHeldCount+0x24>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d004      	beq.n	8007636 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800762c:	4b05      	ldr	r3, [pc, #20]	; (8007644 <pvTaskIncrementMutexHeldCount+0x24>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007632:	3201      	adds	r2, #1
 8007634:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007636:	4b03      	ldr	r3, [pc, #12]	; (8007644 <pvTaskIncrementMutexHeldCount+0x24>)
 8007638:	681b      	ldr	r3, [r3, #0]
	}
 800763a:	4618      	mov	r0, r3
 800763c:	46bd      	mov	sp, r7
 800763e:	bc80      	pop	{r7}
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	2000037c 	.word	0x2000037c

08007648 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007656:	f000 fafd 	bl	8007c54 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800765a:	4b29      	ldr	r3, [pc, #164]	; (8007700 <xTaskNotifyWait+0xb8>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d01c      	beq.n	80076a2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007668:	4b25      	ldr	r3, [pc, #148]	; (8007700 <xTaskNotifyWait+0xb8>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	43d2      	mvns	r2, r2
 8007674:	400a      	ands	r2, r1
 8007676:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800767a:	4b21      	ldr	r3, [pc, #132]	; (8007700 <xTaskNotifyWait+0xb8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00b      	beq.n	80076a2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800768a:	2101      	movs	r1, #1
 800768c:	6838      	ldr	r0, [r7, #0]
 800768e:	f000 f9af 	bl	80079f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007692:	4b1c      	ldr	r3, [pc, #112]	; (8007704 <xTaskNotifyWait+0xbc>)
 8007694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80076a2:	f000 fb05 	bl	8007cb0 <vPortExitCritical>

		taskENTER_CRITICAL();
 80076a6:	f000 fad5 	bl	8007c54 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d005      	beq.n	80076bc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80076b0:	4b13      	ldr	r3, [pc, #76]	; (8007700 <xTaskNotifyWait+0xb8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80076bc:	4b10      	ldr	r3, [pc, #64]	; (8007700 <xTaskNotifyWait+0xb8>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d102      	bne.n	80076d0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]
 80076ce:	e00a      	b.n	80076e6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80076d0:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <xTaskNotifyWait+0xb8>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	43d2      	mvns	r2, r2
 80076dc:	400a      	ands	r2, r1
 80076de:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 80076e2:	2301      	movs	r3, #1
 80076e4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076e6:	4b06      	ldr	r3, [pc, #24]	; (8007700 <xTaskNotifyWait+0xb8>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 80076f0:	f000 fade 	bl	8007cb0 <vPortExitCritical>

		return xReturn;
 80076f4:	697b      	ldr	r3, [r7, #20]
	}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	2000037c 	.word	0x2000037c
 8007704:	e000ed04 	.word	0xe000ed04

08007708 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007708:	b580      	push	{r7, lr}
 800770a:	b08a      	sub	sp, #40	; 0x28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	4613      	mov	r3, r2
 8007716:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007718:	2301      	movs	r3, #1
 800771a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d109      	bne.n	8007736 <xTaskGenericNotify+0x2e>
 8007722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	61bb      	str	r3, [r7, #24]
 8007734:	e7fe      	b.n	8007734 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800773a:	f000 fa8b 	bl	8007c54 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d004      	beq.n	800774e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007754:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	2202      	movs	r2, #2
 800775a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800775e:	79fb      	ldrb	r3, [r7, #7]
 8007760:	2b04      	cmp	r3, #4
 8007762:	d82e      	bhi.n	80077c2 <xTaskGenericNotify+0xba>
 8007764:	a201      	add	r2, pc, #4	; (adr r2, 800776c <xTaskGenericNotify+0x64>)
 8007766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776a:	bf00      	nop
 800776c:	080077c3 	.word	0x080077c3
 8007770:	08007781 	.word	0x08007781
 8007774:	08007793 	.word	0x08007793
 8007778:	080077a3 	.word	0x080077a3
 800777c:	080077ad 	.word	0x080077ad
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	431a      	orrs	r2, r3
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8007790:	e017      	b.n	80077c2 <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80077a0:	e00f      	b.n	80077c2 <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80077aa:	e00a      	b.n	80077c2 <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80077ac:	7ffb      	ldrb	r3, [r7, #31]
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d004      	beq.n	80077bc <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80077ba:	e001      	b.n	80077c0 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 80077bc:	2300      	movs	r3, #0
 80077be:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80077c0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80077c2:	7ffb      	ldrb	r3, [r7, #31]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d138      	bne.n	800783a <xTaskGenericNotify+0x132>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	3304      	adds	r3, #4
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7fe fb90 	bl	8005ef2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d6:	2201      	movs	r2, #1
 80077d8:	409a      	lsls	r2, r3
 80077da:	4b1b      	ldr	r3, [pc, #108]	; (8007848 <xTaskGenericNotify+0x140>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4313      	orrs	r3, r2
 80077e0:	4a19      	ldr	r2, [pc, #100]	; (8007848 <xTaskGenericNotify+0x140>)
 80077e2:	6013      	str	r3, [r2, #0]
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e8:	4613      	mov	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4a16      	ldr	r2, [pc, #88]	; (800784c <xTaskGenericNotify+0x144>)
 80077f2:	441a      	add	r2, r3
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	3304      	adds	r3, #4
 80077f8:	4619      	mov	r1, r3
 80077fa:	4610      	mov	r0, r2
 80077fc:	f7fe fb1e 	bl	8005e3c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007804:	2b00      	cmp	r3, #0
 8007806:	d009      	beq.n	800781c <xTaskGenericNotify+0x114>
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	617b      	str	r3, [r7, #20]
 800781a:	e7fe      	b.n	800781a <xTaskGenericNotify+0x112>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	4b0b      	ldr	r3, [pc, #44]	; (8007850 <xTaskGenericNotify+0x148>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007826:	429a      	cmp	r2, r3
 8007828:	d907      	bls.n	800783a <xTaskGenericNotify+0x132>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800782a:	4b0a      	ldr	r3, [pc, #40]	; (8007854 <xTaskGenericNotify+0x14c>)
 800782c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800783a:	f000 fa39 	bl	8007cb0 <vPortExitCritical>

		return xReturn;
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007840:	4618      	mov	r0, r3
 8007842:	3728      	adds	r7, #40	; 0x28
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	20000484 	.word	0x20000484
 800784c:	20000380 	.word	0x20000380
 8007850:	2000037c 	.word	0x2000037c
 8007854:	e000ed04 	.word	0xe000ed04

08007858 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08e      	sub	sp, #56	; 0x38
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	603b      	str	r3, [r7, #0]
 8007864:	4613      	mov	r3, r2
 8007866:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007868:	2301      	movs	r3, #1
 800786a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d109      	bne.n	8007886 <xTaskGenericNotifyFromISR+0x2e>
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	627b      	str	r3, [r7, #36]	; 0x24
 8007884:	e7fe      	b.n	8007884 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007886:	f000 fa99 	bl	8007dbc <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800788e:	f3ef 8211 	mrs	r2, BASEPRI
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	623a      	str	r2, [r7, #32]
 80078a4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80078a6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d004      	beq.n	80078ba <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80078c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80078c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 80078cc:	79fb      	ldrb	r3, [r7, #7]
 80078ce:	2b04      	cmp	r3, #4
 80078d0:	d82e      	bhi.n	8007930 <xTaskGenericNotifyFromISR+0xd8>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <xTaskGenericNotifyFromISR+0x80>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	08007931 	.word	0x08007931
 80078dc:	080078ed 	.word	0x080078ed
 80078e0:	080078ff 	.word	0x080078ff
 80078e4:	0800790f 	.word	0x0800790f
 80078e8:	08007919 	.word	0x08007919
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	431a      	orrs	r2, r3
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80078fc:	e018      	b.n	8007930 <xTaskGenericNotifyFromISR+0xd8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80078fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007900:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007904:	1c5a      	adds	r2, r3, #1
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800790c:	e010      	b.n	8007930 <xTaskGenericNotifyFromISR+0xd8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8007916:	e00b      	b.n	8007930 <xTaskGenericNotifyFromISR+0xd8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007918:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800791c:	2b02      	cmp	r3, #2
 800791e:	d004      	beq.n	800792a <xTaskGenericNotifyFromISR+0xd2>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007928:	e001      	b.n	800792e <xTaskGenericNotifyFromISR+0xd6>
						xReturn = pdFAIL;
 800792a:	2300      	movs	r3, #0
 800792c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800792e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007930:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007934:	2b01      	cmp	r3, #1
 8007936:	d145      	bne.n	80079c4 <xTaskGenericNotifyFromISR+0x16c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793c:	2b00      	cmp	r3, #0
 800793e:	d009      	beq.n	8007954 <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	e7fe      	b.n	8007952 <xTaskGenericNotifyFromISR+0xfa>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007954:	4b20      	ldr	r3, [pc, #128]	; (80079d8 <xTaskGenericNotifyFromISR+0x180>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d11c      	bne.n	8007996 <xTaskGenericNotifyFromISR+0x13e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	3304      	adds	r3, #4
 8007960:	4618      	mov	r0, r3
 8007962:	f7fe fac6 	bl	8005ef2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796a:	2201      	movs	r2, #1
 800796c:	409a      	lsls	r2, r3
 800796e:	4b1b      	ldr	r3, [pc, #108]	; (80079dc <xTaskGenericNotifyFromISR+0x184>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4313      	orrs	r3, r2
 8007974:	4a19      	ldr	r2, [pc, #100]	; (80079dc <xTaskGenericNotifyFromISR+0x184>)
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797c:	4613      	mov	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4a16      	ldr	r2, [pc, #88]	; (80079e0 <xTaskGenericNotifyFromISR+0x188>)
 8007986:	441a      	add	r2, r3
 8007988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798a:	3304      	adds	r3, #4
 800798c:	4619      	mov	r1, r3
 800798e:	4610      	mov	r0, r2
 8007990:	f7fe fa54 	bl	8005e3c <vListInsertEnd>
 8007994:	e005      	b.n	80079a2 <xTaskGenericNotifyFromISR+0x14a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	3318      	adds	r3, #24
 800799a:	4619      	mov	r1, r3
 800799c:	4811      	ldr	r0, [pc, #68]	; (80079e4 <xTaskGenericNotifyFromISR+0x18c>)
 800799e:	f7fe fa4d 	bl	8005e3c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a6:	4b10      	ldr	r3, [pc, #64]	; (80079e8 <xTaskGenericNotifyFromISR+0x190>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d909      	bls.n	80079c4 <xTaskGenericNotifyFromISR+0x16c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80079b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <xTaskGenericNotifyFromISR+0x166>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80079b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079b8:	2201      	movs	r2, #1
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	e002      	b.n	80079c4 <xTaskGenericNotifyFromISR+0x16c>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 80079be:	4b0b      	ldr	r3, [pc, #44]	; (80079ec <xTaskGenericNotifyFromISR+0x194>)
 80079c0:	2201      	movs	r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80079ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3738      	adds	r7, #56	; 0x38
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	200004a4 	.word	0x200004a4
 80079dc:	20000484 	.word	0x20000484
 80079e0:	20000380 	.word	0x20000380
 80079e4:	2000043c 	.word	0x2000043c
 80079e8:	2000037c 	.word	0x2000037c
 80079ec:	20000490 	.word	0x20000490

080079f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079fa:	4b29      	ldr	r3, [pc, #164]	; (8007aa0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a00:	4b28      	ldr	r3, [pc, #160]	; (8007aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fe fa73 	bl	8005ef2 <uxListRemove>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10b      	bne.n	8007a2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007a12:	4b24      	ldr	r3, [pc, #144]	; (8007aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	2201      	movs	r2, #1
 8007a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1e:	43da      	mvns	r2, r3
 8007a20:	4b21      	ldr	r3, [pc, #132]	; (8007aa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4013      	ands	r3, r2
 8007a26:	4a20      	ldr	r2, [pc, #128]	; (8007aa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a30:	d10a      	bne.n	8007a48 <prvAddCurrentTaskToDelayedList+0x58>
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d007      	beq.n	8007a48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a38:	4b1a      	ldr	r3, [pc, #104]	; (8007aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4619      	mov	r1, r3
 8007a40:	481a      	ldr	r0, [pc, #104]	; (8007aac <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a42:	f7fe f9fb 	bl	8005e3c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a46:	e026      	b.n	8007a96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a50:	4b14      	ldr	r3, [pc, #80]	; (8007aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d209      	bcs.n	8007a74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a60:	4b13      	ldr	r3, [pc, #76]	; (8007ab0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	4b0f      	ldr	r3, [pc, #60]	; (8007aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3304      	adds	r3, #4
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	f7fe fa08 	bl	8005e82 <vListInsert>
}
 8007a72:	e010      	b.n	8007a96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a74:	4b0f      	ldr	r3, [pc, #60]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	4b0a      	ldr	r3, [pc, #40]	; (8007aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4610      	mov	r0, r2
 8007a82:	f7fe f9fe 	bl	8005e82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a86:	4b0c      	ldr	r3, [pc, #48]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d202      	bcs.n	8007a96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a90:	4a09      	ldr	r2, [pc, #36]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	6013      	str	r3, [r2, #0]
}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000480 	.word	0x20000480
 8007aa4:	2000037c 	.word	0x2000037c
 8007aa8:	20000484 	.word	0x20000484
 8007aac:	20000468 	.word	0x20000468
 8007ab0:	20000438 	.word	0x20000438
 8007ab4:	20000434 	.word	0x20000434
 8007ab8:	2000049c 	.word	0x2000049c

08007abc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3b04      	subs	r3, #4
 8007acc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3b04      	subs	r3, #4
 8007ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f023 0201 	bic.w	r2, r3, #1
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	3b04      	subs	r3, #4
 8007aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007aec:	4a08      	ldr	r2, [pc, #32]	; (8007b10 <pxPortInitialiseStack+0x54>)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3b14      	subs	r3, #20
 8007af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3b20      	subs	r3, #32
 8007b02:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b04:	68fb      	ldr	r3, [r7, #12]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bc80      	pop	{r7}
 8007b0e:	4770      	bx	lr
 8007b10:	08007b15 	.word	0x08007b15

08007b14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b1a:	4b0c      	ldr	r3, [pc, #48]	; (8007b4c <prvTaskExitError+0x38>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b22:	d009      	beq.n	8007b38 <prvTaskExitError+0x24>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	607b      	str	r3, [r7, #4]
 8007b36:	e7fe      	b.n	8007b36 <prvTaskExitError+0x22>
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8007b4a:	e7fe      	b.n	8007b4a <prvTaskExitError+0x36>
 8007b4c:	20000114 	.word	0x20000114

08007b50 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b50:	4b07      	ldr	r3, [pc, #28]	; (8007b70 <pxCurrentTCBConst2>)
 8007b52:	6819      	ldr	r1, [r3, #0]
 8007b54:	6808      	ldr	r0, [r1, #0]
 8007b56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007b5a:	f380 8809 	msr	PSP, r0
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f04f 0000 	mov.w	r0, #0
 8007b66:	f380 8811 	msr	BASEPRI, r0
 8007b6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007b6e:	4770      	bx	lr

08007b70 <pxCurrentTCBConst2>:
 8007b70:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop

08007b78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007b78:	4806      	ldr	r0, [pc, #24]	; (8007b94 <prvPortStartFirstTask+0x1c>)
 8007b7a:	6800      	ldr	r0, [r0, #0]
 8007b7c:	6800      	ldr	r0, [r0, #0]
 8007b7e:	f380 8808 	msr	MSP, r0
 8007b82:	b662      	cpsie	i
 8007b84:	b661      	cpsie	f
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	df00      	svc	0
 8007b90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b92:	bf00      	nop
 8007b94:	e000ed08 	.word	0xe000ed08

08007b98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b9e:	4b28      	ldr	r3, [pc, #160]	; (8007c40 <xPortStartScheduler+0xa8>)
 8007ba0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	22ff      	movs	r2, #255	; 0xff
 8007bae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bb8:	79fb      	ldrb	r3, [r7, #7]
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	4b20      	ldr	r3, [pc, #128]	; (8007c44 <xPortStartScheduler+0xac>)
 8007bc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bc6:	4b20      	ldr	r3, [pc, #128]	; (8007c48 <xPortStartScheduler+0xb0>)
 8007bc8:	2207      	movs	r2, #7
 8007bca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bcc:	e009      	b.n	8007be2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007bce:	4b1e      	ldr	r3, [pc, #120]	; (8007c48 <xPortStartScheduler+0xb0>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	4a1c      	ldr	r2, [pc, #112]	; (8007c48 <xPortStartScheduler+0xb0>)
 8007bd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bd8:	79fb      	ldrb	r3, [r7, #7]
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007be2:	79fb      	ldrb	r3, [r7, #7]
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bea:	2b80      	cmp	r3, #128	; 0x80
 8007bec:	d0ef      	beq.n	8007bce <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bee:	4b16      	ldr	r3, [pc, #88]	; (8007c48 <xPortStartScheduler+0xb0>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	021b      	lsls	r3, r3, #8
 8007bf4:	4a14      	ldr	r2, [pc, #80]	; (8007c48 <xPortStartScheduler+0xb0>)
 8007bf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007bf8:	4b13      	ldr	r3, [pc, #76]	; (8007c48 <xPortStartScheduler+0xb0>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c00:	4a11      	ldr	r2, [pc, #68]	; (8007c48 <xPortStartScheduler+0xb0>)
 8007c02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c0c:	4b0f      	ldr	r3, [pc, #60]	; (8007c4c <xPortStartScheduler+0xb4>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a0e      	ldr	r2, [pc, #56]	; (8007c4c <xPortStartScheduler+0xb4>)
 8007c12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c18:	4b0c      	ldr	r3, [pc, #48]	; (8007c4c <xPortStartScheduler+0xb4>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a0b      	ldr	r2, [pc, #44]	; (8007c4c <xPortStartScheduler+0xb4>)
 8007c1e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c24:	f000 f8b0 	bl	8007d88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c28:	4b09      	ldr	r3, [pc, #36]	; (8007c50 <xPortStartScheduler+0xb8>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c2e:	f7ff ffa3 	bl	8007b78 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8007c32:	f7ff ff6f 	bl	8007b14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	e000e400 	.word	0xe000e400
 8007c44:	200004a8 	.word	0x200004a8
 8007c48:	200004ac 	.word	0x200004ac
 8007c4c:	e000ed20 	.word	0xe000ed20
 8007c50:	20000114 	.word	0x20000114

08007c54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c6c:	4b0e      	ldr	r3, [pc, #56]	; (8007ca8 <vPortEnterCritical+0x54>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3301      	adds	r3, #1
 8007c72:	4a0d      	ldr	r2, [pc, #52]	; (8007ca8 <vPortEnterCritical+0x54>)
 8007c74:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c76:	4b0c      	ldr	r3, [pc, #48]	; (8007ca8 <vPortEnterCritical+0x54>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d10e      	bne.n	8007c9c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c7e:	4b0b      	ldr	r3, [pc, #44]	; (8007cac <vPortEnterCritical+0x58>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d009      	beq.n	8007c9c <vPortEnterCritical+0x48>
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	603b      	str	r3, [r7, #0]
 8007c9a:	e7fe      	b.n	8007c9a <vPortEnterCritical+0x46>
	}
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bc80      	pop	{r7}
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	20000114 	.word	0x20000114
 8007cac:	e000ed04 	.word	0xe000ed04

08007cb0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007cb6:	4b10      	ldr	r3, [pc, #64]	; (8007cf8 <vPortExitCritical+0x48>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d109      	bne.n	8007cd2 <vPortExitCritical+0x22>
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	607b      	str	r3, [r7, #4]
 8007cd0:	e7fe      	b.n	8007cd0 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007cd2:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <vPortExitCritical+0x48>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	4a07      	ldr	r2, [pc, #28]	; (8007cf8 <vPortExitCritical+0x48>)
 8007cda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cdc:	4b06      	ldr	r3, [pc, #24]	; (8007cf8 <vPortExitCritical+0x48>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d104      	bne.n	8007cee <vPortExitCritical+0x3e>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr
 8007cf8:	20000114 	.word	0x20000114
 8007cfc:	00000000 	.word	0x00000000

08007d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d00:	f3ef 8009 	mrs	r0, PSP
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	4b0d      	ldr	r3, [pc, #52]	; (8007d40 <pxCurrentTCBConst>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d10:	6010      	str	r0, [r2, #0]
 8007d12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007d16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d1a:	f380 8811 	msr	BASEPRI, r0
 8007d1e:	f7ff f927 	bl	8006f70 <vTaskSwitchContext>
 8007d22:	f04f 0000 	mov.w	r0, #0
 8007d26:	f380 8811 	msr	BASEPRI, r0
 8007d2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d2e:	6819      	ldr	r1, [r3, #0]
 8007d30:	6808      	ldr	r0, [r1, #0]
 8007d32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d36:	f380 8809 	msr	PSP, r0
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	4770      	bx	lr

08007d40 <pxCurrentTCBConst>:
 8007d40:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop

08007d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d60:	f7ff f84a 	bl	8006df8 <xTaskIncrementTick>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d6a:	4b06      	ldr	r3, [pc, #24]	; (8007d84 <SysTick_Handler+0x3c>)
 8007d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	2300      	movs	r3, #0
 8007d74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d7c:	bf00      	nop
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	e000ed04 	.word	0xe000ed04

08007d88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d88:	b480      	push	{r7}
 8007d8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d8c:	4b07      	ldr	r3, [pc, #28]	; (8007dac <vPortSetupTimerInterrupt+0x24>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a07      	ldr	r2, [pc, #28]	; (8007db0 <vPortSetupTimerInterrupt+0x28>)
 8007d92:	fba2 2303 	umull	r2, r3, r2, r3
 8007d96:	099b      	lsrs	r3, r3, #6
 8007d98:	4a06      	ldr	r2, [pc, #24]	; (8007db4 <vPortSetupTimerInterrupt+0x2c>)
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d9e:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <vPortSetupTimerInterrupt+0x30>)
 8007da0:	2207      	movs	r2, #7
 8007da2:	601a      	str	r2, [r3, #0]
}
 8007da4:	bf00      	nop
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bc80      	pop	{r7}
 8007daa:	4770      	bx	lr
 8007dac:	20000128 	.word	0x20000128
 8007db0:	10624dd3 	.word	0x10624dd3
 8007db4:	e000e014 	.word	0xe000e014
 8007db8:	e000e010 	.word	0xe000e010

08007dbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8007dc2:	f3ef 8305 	mrs	r3, IPSR
 8007dc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2b0f      	cmp	r3, #15
 8007dcc:	d913      	bls.n	8007df6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dce:	4a15      	ldr	r2, [pc, #84]	; (8007e24 <vPortValidateInterruptPriority+0x68>)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007dd8:	4b13      	ldr	r3, [pc, #76]	; (8007e28 <vPortValidateInterruptPriority+0x6c>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	7afa      	ldrb	r2, [r7, #11]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d209      	bcs.n	8007df6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de6:	f383 8811 	msr	BASEPRI, r3
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	607b      	str	r3, [r7, #4]
 8007df4:	e7fe      	b.n	8007df4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007df6:	4b0d      	ldr	r3, [pc, #52]	; (8007e2c <vPortValidateInterruptPriority+0x70>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007dfe:	4b0c      	ldr	r3, [pc, #48]	; (8007e30 <vPortValidateInterruptPriority+0x74>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d909      	bls.n	8007e1a <vPortValidateInterruptPriority+0x5e>
 8007e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	e7fe      	b.n	8007e18 <vPortValidateInterruptPriority+0x5c>
	}
 8007e1a:	bf00      	nop
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr
 8007e24:	e000e3f0 	.word	0xe000e3f0
 8007e28:	200004a8 	.word	0x200004a8
 8007e2c:	e000ed0c 	.word	0xe000ed0c
 8007e30:	200004ac 	.word	0x200004ac

08007e34 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8007e3c:	f7fe ff32 	bl	8006ca4 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 fbf7 	bl	8009634 <malloc>
 8007e46:	4603      	mov	r3, r0
 8007e48:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e4a:	f7fe ff39 	bl	8006cc0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
	if( pv )
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d006      	beq.n	8007e74 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8007e66:	f7fe ff1d 	bl	8006ca4 <vTaskSuspendAll>
		{
			free( pv );
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f001 fbea 	bl	8009644 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8007e70:	f7fe ff26 	bl	8006cc0 <xTaskResumeAll>
	}
}
 8007e74:	bf00      	nop
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8007e7c:	b5b0      	push	{r4, r5, r7, lr}
 8007e7e:	b08a      	sub	sp, #40	; 0x28
 8007e80:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	rotaryMailQ = osMailCreate(osMailQ(rotaryMailQ), NULL);
 8007e82:	2100      	movs	r1, #0
 8007e84:	4817      	ldr	r0, [pc, #92]	; (8007ee4 <MX_FREERTOS_Init+0x68>)
 8007e86:	f7fd fe7a 	bl	8005b7e <osMailCreate>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	4b16      	ldr	r3, [pc, #88]	; (8007ee8 <MX_FREERTOS_Init+0x6c>)
 8007e8e:	601a      	str	r2, [r3, #0]
	if (rotaryMailQ == NULL)
 8007e90:	4b15      	ldr	r3, [pc, #84]	; (8007ee8 <MX_FREERTOS_Init+0x6c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <MX_FREERTOS_Init+0x20>
	{
		Error_Handler();
 8007e98:	f000 faca 	bl	8008430 <Error_Handler>
	}
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8007e9c:	4b13      	ldr	r3, [pc, #76]	; (8007eec <MX_FREERTOS_Init+0x70>)
 8007e9e:	f107 0414 	add.w	r4, r7, #20
 8007ea2:	461d      	mov	r5, r3
 8007ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ea8:	682b      	ldr	r3, [r5, #0]
 8007eaa:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8007eac:	f107 0314 	add.w	r3, r7, #20
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fd fc8b 	bl	80057ce <osThreadCreate>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	4b0d      	ldr	r3, [pc, #52]	; (8007ef0 <MX_FREERTOS_Init+0x74>)
 8007ebc:	601a      	str	r2, [r3, #0]

  /* definition and creation of blinkTask */
  osThreadDef(blinkTask, StartBlinkTask, osPriorityIdle, 0, 128);
 8007ebe:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <MX_FREERTOS_Init+0x78>)
 8007ec0:	463c      	mov	r4, r7
 8007ec2:	461d      	mov	r5, r3
 8007ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	6023      	str	r3, [r4, #0]
  blinkTaskHandle = osThreadCreate(osThread(blinkTask), NULL);
 8007ecc:	463b      	mov	r3, r7
 8007ece:	2100      	movs	r1, #0
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fd fc7c 	bl	80057ce <osThreadCreate>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	4b07      	ldr	r3, [pc, #28]	; (8007ef8 <MX_FREERTOS_Init+0x7c>)
 8007eda:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8007edc:	bf00      	nop
 8007ede:	3728      	adds	r7, #40	; 0x28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8007ee4:	0800daf4 	.word	0x0800daf4
 8007ee8:	20000740 	.word	0x20000740
 8007eec:	0800da00 	.word	0x0800da00
 8007ef0:	20000738 	.word	0x20000738
 8007ef4:	0800da20 	.word	0x0800da20
 8007ef8:	2000073c 	.word	0x2000073c

08007efc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b08a      	sub	sp, #40	; 0x28
 8007f00:	af04      	add	r7, sp, #16
 8007f02:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8007f04:	f000 fdec 	bl	8008ae0 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN StartDefaultTask */
  Init_Rotary(
 8007f08:	2308      	movs	r3, #8
 8007f0a:	9303      	str	r3, [sp, #12]
 8007f0c:	4b3c      	ldr	r3, [pc, #240]	; (8008000 <StartDefaultTask+0x104>)
 8007f0e:	9302      	str	r3, [sp, #8]
 8007f10:	2304      	movs	r3, #4
 8007f12:	9301      	str	r3, [sp, #4]
 8007f14:	4b3a      	ldr	r3, [pc, #232]	; (8008000 <StartDefaultTask+0x104>)
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	2302      	movs	r3, #2
 8007f1a:	4a39      	ldr	r2, [pc, #228]	; (8008000 <StartDefaultTask+0x104>)
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	4839      	ldr	r0, [pc, #228]	; (8008004 <StartDefaultTask+0x108>)
 8007f20:	f000 fa8c 	bl	800843c <Init_Rotary>
		RDT_GPIO_Port,
		RDT_Pin,
		RSW_GPIO_Port,
		RSW_Pin
  );
  Init_Rotary(
 8007f24:	2340      	movs	r3, #64	; 0x40
 8007f26:	9303      	str	r3, [sp, #12]
 8007f28:	4b35      	ldr	r3, [pc, #212]	; (8008000 <StartDefaultTask+0x104>)
 8007f2a:	9302      	str	r3, [sp, #8]
 8007f2c:	2320      	movs	r3, #32
 8007f2e:	9301      	str	r3, [sp, #4]
 8007f30:	4b33      	ldr	r3, [pc, #204]	; (8008000 <StartDefaultTask+0x104>)
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	2310      	movs	r3, #16
 8007f36:	4a32      	ldr	r2, [pc, #200]	; (8008000 <StartDefaultTask+0x104>)
 8007f38:	2110      	movs	r1, #16
 8007f3a:	4833      	ldr	r0, [pc, #204]	; (8008008 <StartDefaultTask+0x10c>)
 8007f3c:	f000 fa7e 	bl	800843c <Init_Rotary>
		RDT2_GPIO_Port,
		RDT2_Pin,
		RSW2_GPIO_Port,
		RSW2_Pin
  );
  HAL_TIM_Base_Start_IT(&htim2);
 8007f40:	4832      	ldr	r0, [pc, #200]	; (800800c <StartDefaultTask+0x110>)
 8007f42:	f7fa fe54 	bl	8002bee <HAL_TIM_Base_Start_IT>
  DisableTimer();
 8007f46:	f000 f889 	bl	800805c <DisableTimer>
	RotaryMail *rptr;
	osEvent event;
  /* Infinite loop */
  for(;;)
  {
  	event = osMailGet(rotaryMailQ, osWaitForever);
 8007f4a:	4b31      	ldr	r3, [pc, #196]	; (8008010 <StartDefaultTask+0x114>)
 8007f4c:	6819      	ldr	r1, [r3, #0]
 8007f4e:	f107 0308 	add.w	r3, r7, #8
 8007f52:	f04f 32ff 	mov.w	r2, #4294967295
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fd febc 	bl	8005cd4 <osMailGet>
  	if(event.status == osErrorParameter)
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2b80      	cmp	r3, #128	; 0x80
 8007f60:	d102      	bne.n	8007f68 <StartDefaultTask+0x6c>
  	{
  		Error_Handler();
 8007f62:	f000 fa65 	bl	8008430 <Error_Handler>
 8007f66:	e7f0      	b.n	8007f4a <StartDefaultTask+0x4e>
  	}
  	else if (event.status == osEventMail)
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2b20      	cmp	r3, #32
 8007f6c:	d1ed      	bne.n	8007f4a <StartDefaultTask+0x4e>
  	{
  		rptr = event.value.p;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	617b      	str	r3, [r7, #20]
  		if (rptr->EventCode & ebPRESSED)
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	889b      	ldrh	r3, [r3, #4]
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <StartDefaultTask+0x98>
  		{
  			DisableTimer();
 8007f7e:	f000 f86d 	bl	800805c <DisableTimer>
  			Switch_Rising(rptr->Rotary->Id);
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 f89d 	bl	80080c8 <Switch_Rising>
  			Blink();
 8007f8e:	f000 f889 	bl	80080a4 <Blink>
 8007f92:	e02d      	b.n	8007ff0 <StartDefaultTask+0xf4>
  		}
  		else if (rptr->EventCode & ebRELEASED)
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	889b      	ldrh	r3, [r3, #4]
 8007f98:	f003 0302 	and.w	r3, r3, #2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <StartDefaultTask+0xba>
  		{
  			DisableTimer();
 8007fa0:	f000 f85c 	bl	800805c <DisableTimer>
  			Switch_Falling(rptr->Rotary->Id);
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 f89c 	bl	80080e8 <Switch_Falling>
  			Blink();
 8007fb0:	f000 f878 	bl	80080a4 <Blink>
 8007fb4:	e01c      	b.n	8007ff0 <StartDefaultTask+0xf4>
  		}
  		else if (rptr->EventCode & ebCLOCKWISE)
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	889b      	ldrh	r3, [r3, #4]
 8007fba:	f003 0304 	and.w	r3, r3, #4
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d008      	beq.n	8007fd4 <StartDefaultTask+0xd8>
  		{
  			Clockwise(rptr->Rotary->Id);
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 f89d 	bl	8008108 <Clockwise>
  			Blink();
 8007fce:	f000 f869 	bl	80080a4 <Blink>
 8007fd2:	e00d      	b.n	8007ff0 <StartDefaultTask+0xf4>
  		}
  		else if (rptr->EventCode & ebCOUNTERCLOCKWISE)
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	889b      	ldrh	r3, [r3, #4]
 8007fd8:	f003 0308 	and.w	r3, r3, #8
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d007      	beq.n	8007ff0 <StartDefaultTask+0xf4>
  		{
  			Counter_Clockwise(rptr->Rotary->Id);
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f89e 	bl	8008128 <Counter_Clockwise>
  			Blink();
 8007fec:	f000 f85a 	bl	80080a4 <Blink>
  		}
  		osMailFree(rotaryMailQ, rptr);
 8007ff0:	4b07      	ldr	r3, [pc, #28]	; (8008010 <StartDefaultTask+0x114>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6979      	ldr	r1, [r7, #20]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fd fee0 	bl	8005dbc <osMailFree>
  	event = osMailGet(rotaryMailQ, osWaitForever);
 8007ffc:	e7a5      	b.n	8007f4a <StartDefaultTask+0x4e>
 8007ffe:	bf00      	nop
 8008000:	40010800 	.word	0x40010800
 8008004:	200004b0 	.word	0x200004b0
 8008008:	200004dc 	.word	0x200004dc
 800800c:	20000788 	.word	0x20000788
 8008010:	20000740 	.word	0x20000740

08008014 <StartBlinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkTask */
void StartBlinkTask(void const * argument)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkTask */
  /* Infinite loop */
  for(;;)
  {
		osEvent event = osSignalWait(0, osWaitForever);
 800801c:	f107 030c 	add.w	r3, r7, #12
 8008020:	f04f 32ff 	mov.w	r2, #4294967295
 8008024:	2100      	movs	r1, #0
 8008026:	4618      	mov	r0, r3
 8008028:	f7fd fc5e 	bl	80058e8 <osSignalWait>
		if (event.status & 0x80)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <StartBlinkTask+0x26>
		{
			Error_Handler();
 8008036:	f000 f9fb 	bl	8008430 <Error_Handler>
		}
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800803a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800803e:	4806      	ldr	r0, [pc, #24]	; (8008058 <StartBlinkTask+0x44>)
 8008040:	f7f9 f93b 	bl	80012ba <HAL_GPIO_TogglePin>
		osDelay(50);
 8008044:	2032      	movs	r0, #50	; 0x32
 8008046:	f7fd fbfb 	bl	8005840 <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800804a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800804e:	4802      	ldr	r0, [pc, #8]	; (8008058 <StartBlinkTask+0x44>)
 8008050:	f7f9 f933 	bl	80012ba <HAL_GPIO_TogglePin>
  {
 8008054:	e7e2      	b.n	800801c <StartBlinkTask+0x8>
 8008056:	bf00      	nop
 8008058:	40011000 	.word	0x40011000

0800805c <DisableTimer>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void DisableTimer()
{
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0
  __HAL_TIM_DISABLE(&htim2);
 8008060:	4b0f      	ldr	r3, [pc, #60]	; (80080a0 <DisableTimer+0x44>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6a1a      	ldr	r2, [r3, #32]
 8008066:	f241 1311 	movw	r3, #4369	; 0x1111
 800806a:	4013      	ands	r3, r2
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10f      	bne.n	8008090 <DisableTimer+0x34>
 8008070:	4b0b      	ldr	r3, [pc, #44]	; (80080a0 <DisableTimer+0x44>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6a1a      	ldr	r2, [r3, #32]
 8008076:	f240 4344 	movw	r3, #1092	; 0x444
 800807a:	4013      	ands	r3, r2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d107      	bne.n	8008090 <DisableTimer+0x34>
 8008080:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <DisableTimer+0x44>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <DisableTimer+0x44>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f022 0201 	bic.w	r2, r2, #1
 800808e:	601a      	str	r2, [r3, #0]
  htim2.Instance->EGR = TIM_EGR_UG; // reset counter and prescaler
 8008090:	4b03      	ldr	r3, [pc, #12]	; (80080a0 <DisableTimer+0x44>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2201      	movs	r2, #1
 8008096:	615a      	str	r2, [r3, #20]
}
 8008098:	bf00      	nop
 800809a:	46bd      	mov	sp, r7
 800809c:	bc80      	pop	{r7}
 800809e:	4770      	bx	lr
 80080a0:	20000788 	.word	0x20000788

080080a4 <Blink>:

void Blink()
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
  if (osSignalSet(blinkTaskHandle, 0x1) != osOK)
 80080a8:	4b06      	ldr	r3, [pc, #24]	; (80080c4 <Blink+0x20>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2101      	movs	r1, #1
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fd fbda 	bl	8005868 <osSignalSet>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <Blink+0x1a>
  {
    Error_Handler();
 80080ba:	f000 f9b9 	bl	8008430 <Error_Handler>
  }
}
 80080be:	bf00      	nop
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	2000073c 	.word	0x2000073c

080080c8 <Switch_Rising>:

void Switch_Rising(uint32_t rotary_id)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  printf("[%ld] Switch released (rising)\r\n", rotary_id / 0x10);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	091b      	lsrs	r3, r3, #4
 80080d4:	4619      	mov	r1, r3
 80080d6:	4803      	ldr	r0, [pc, #12]	; (80080e4 <Switch_Rising+0x1c>)
 80080d8:	f002 f9a6 	bl	800a428 <iprintf>
}
 80080dc:	bf00      	nop
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	0800da34 	.word	0x0800da34

080080e8 <Switch_Falling>:

void Switch_Falling(uint32_t rotary_id)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  printf("[%ld] Switch pressed (falling)\r\n", rotary_id /0x10);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	091b      	lsrs	r3, r3, #4
 80080f4:	4619      	mov	r1, r3
 80080f6:	4803      	ldr	r0, [pc, #12]	; (8008104 <Switch_Falling+0x1c>)
 80080f8:	f002 f996 	bl	800a428 <iprintf>
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	0800da58 	.word	0x0800da58

08008108 <Clockwise>:

void Clockwise(uint32_t rotary_id)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  printf("[%ld] Clockwise\r\n", rotary_id / 0x10);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	091b      	lsrs	r3, r3, #4
 8008114:	4619      	mov	r1, r3
 8008116:	4803      	ldr	r0, [pc, #12]	; (8008124 <Clockwise+0x1c>)
 8008118:	f002 f986 	bl	800a428 <iprintf>
}
 800811c:	bf00      	nop
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	0800da7c 	.word	0x0800da7c

08008128 <Counter_Clockwise>:

void Counter_Clockwise(uint32_t rotary_id)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  printf("[%ld] Counter-Clockwise\r\n", rotary_id / 0x10);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	091b      	lsrs	r3, r3, #4
 8008134:	4619      	mov	r1, r3
 8008136:	4803      	ldr	r0, [pc, #12]	; (8008144 <Counter_Clockwise+0x1c>)
 8008138:	f002 f976 	bl	800a428 <iprintf>
}
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	0800da90 	.word	0x0800da90

08008148 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b088      	sub	sp, #32
 800814c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800814e:	f107 0310 	add.w	r3, r7, #16
 8008152:	2200      	movs	r2, #0
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	605a      	str	r2, [r3, #4]
 8008158:	609a      	str	r2, [r3, #8]
 800815a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800815c:	4b38      	ldr	r3, [pc, #224]	; (8008240 <MX_GPIO_Init+0xf8>)
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	4a37      	ldr	r2, [pc, #220]	; (8008240 <MX_GPIO_Init+0xf8>)
 8008162:	f043 0310 	orr.w	r3, r3, #16
 8008166:	6193      	str	r3, [r2, #24]
 8008168:	4b35      	ldr	r3, [pc, #212]	; (8008240 <MX_GPIO_Init+0xf8>)
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	f003 0310 	and.w	r3, r3, #16
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008174:	4b32      	ldr	r3, [pc, #200]	; (8008240 <MX_GPIO_Init+0xf8>)
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	4a31      	ldr	r2, [pc, #196]	; (8008240 <MX_GPIO_Init+0xf8>)
 800817a:	f043 0320 	orr.w	r3, r3, #32
 800817e:	6193      	str	r3, [r2, #24]
 8008180:	4b2f      	ldr	r3, [pc, #188]	; (8008240 <MX_GPIO_Init+0xf8>)
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	f003 0320 	and.w	r3, r3, #32
 8008188:	60bb      	str	r3, [r7, #8]
 800818a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800818c:	4b2c      	ldr	r3, [pc, #176]	; (8008240 <MX_GPIO_Init+0xf8>)
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	4a2b      	ldr	r2, [pc, #172]	; (8008240 <MX_GPIO_Init+0xf8>)
 8008192:	f043 0304 	orr.w	r3, r3, #4
 8008196:	6193      	str	r3, [r2, #24]
 8008198:	4b29      	ldr	r3, [pc, #164]	; (8008240 <MX_GPIO_Init+0xf8>)
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	607b      	str	r3, [r7, #4]
 80081a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80081a4:	2201      	movs	r2, #1
 80081a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80081aa:	4826      	ldr	r0, [pc, #152]	; (8008244 <MX_GPIO_Init+0xfc>)
 80081ac:	f7f9 f86d 	bl	800128a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80081b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081b6:	2301      	movs	r3, #1
 80081b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ba:	2300      	movs	r3, #0
 80081bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80081be:	2303      	movs	r3, #3
 80081c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80081c2:	f107 0310 	add.w	r3, r7, #16
 80081c6:	4619      	mov	r1, r3
 80081c8:	481e      	ldr	r0, [pc, #120]	; (8008244 <MX_GPIO_Init+0xfc>)
 80081ca:	f7f8 fee9 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = RCLK_Pin|RDT_Pin|RSW_Pin|RCLK2_Pin 
 80081ce:	237e      	movs	r3, #126	; 0x7e
 80081d0:	613b      	str	r3, [r7, #16]
                          |RDT2_Pin|RSW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80081d2:	4b1d      	ldr	r3, [pc, #116]	; (8008248 <MX_GPIO_Init+0x100>)
 80081d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80081d6:	2301      	movs	r3, #1
 80081d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081da:	f107 0310 	add.w	r3, r7, #16
 80081de:	4619      	mov	r1, r3
 80081e0:	481a      	ldr	r0, [pc, #104]	; (800824c <MX_GPIO_Init+0x104>)
 80081e2:	f7f8 fedd 	bl	8000fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 80081e6:	2200      	movs	r2, #0
 80081e8:	2107      	movs	r1, #7
 80081ea:	2007      	movs	r0, #7
 80081ec:	f7f8 fead 	bl	8000f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80081f0:	2007      	movs	r0, #7
 80081f2:	f7f8 fec6 	bl	8000f82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 80081f6:	2200      	movs	r2, #0
 80081f8:	2107      	movs	r1, #7
 80081fa:	2008      	movs	r0, #8
 80081fc:	f7f8 fea5 	bl	8000f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8008200:	2008      	movs	r0, #8
 8008202:	f7f8 febe 	bl	8000f82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 8008206:	2200      	movs	r2, #0
 8008208:	2107      	movs	r1, #7
 800820a:	2009      	movs	r0, #9
 800820c:	f7f8 fe9d 	bl	8000f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8008210:	2009      	movs	r0, #9
 8008212:	f7f8 feb6 	bl	8000f82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 7, 0);
 8008216:	2200      	movs	r2, #0
 8008218:	2107      	movs	r1, #7
 800821a:	200a      	movs	r0, #10
 800821c:	f7f8 fe95 	bl	8000f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8008220:	200a      	movs	r0, #10
 8008222:	f7f8 feae 	bl	8000f82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8008226:	2200      	movs	r2, #0
 8008228:	2107      	movs	r1, #7
 800822a:	2017      	movs	r0, #23
 800822c:	f7f8 fe8d 	bl	8000f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008230:	2017      	movs	r0, #23
 8008232:	f7f8 fea6 	bl	8000f82 <HAL_NVIC_EnableIRQ>

}
 8008236:	bf00      	nop
 8008238:	3720      	adds	r7, #32
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	40021000 	.word	0x40021000
 8008244:	40011000 	.word	0x40011000
 8008248:	10310000 	.word	0x10310000
 800824c:	40010800 	.word	0x40010800

08008250 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  if (file == 0 || file == 1 || file == 2)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d005      	beq.n	800826e <_write+0x1e>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d002      	beq.n	800826e <_write+0x1e>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b02      	cmp	r3, #2
 800826c:	d107      	bne.n	800827e <_write+0x2e>
  {
    CDC_Transmit_FS((uint8_t *)ptr, len);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	b29b      	uxth	r3, r3
 8008272:	4619      	mov	r1, r3
 8008274:	68b8      	ldr	r0, [r7, #8]
 8008276:	f000 fcf1 	bl	8008c5c <CDC_Transmit_FS>
    return len;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	e006      	b.n	800828c <_write+0x3c>
  }
  else
  {
    errno = EBADF;
 800827e:	f001 f8e5 	bl	800944c <__errno>
 8008282:	4602      	mov	r2, r0
 8008284:	2309      	movs	r3, #9
 8008286:	6013      	str	r3, [r2, #0]
    return -1;
 8008288:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008298:	f7f8 fd74 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800829c:	f000 f80d 	bl	80082ba <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80082a0:	f7ff ff52 	bl	8008148 <MX_GPIO_Init>
  MX_TIM2_Init();
 80082a4:	f000 fbac 	bl	8008a00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80082a8:	f7ff fde8 	bl	8007e7c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80082ac:	f7fd fa88 	bl	80057c0 <osKernelStart>
  //{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  //}
  Error_Handler();
 80082b0:	f000 f8be 	bl	8008430 <Error_Handler>
 80082b4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	bd80      	pop	{r7, pc}

080082ba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b094      	sub	sp, #80	; 0x50
 80082be:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80082c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082c4:	2228      	movs	r2, #40	; 0x28
 80082c6:	2100      	movs	r1, #0
 80082c8:	4618      	mov	r0, r3
 80082ca:	f001 f9ce 	bl	800966a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80082ce:	f107 0314 	add.w	r3, r7, #20
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	605a      	str	r2, [r3, #4]
 80082d8:	609a      	str	r2, [r3, #8]
 80082da:	60da      	str	r2, [r3, #12]
 80082dc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80082de:	1d3b      	adds	r3, r7, #4
 80082e0:	2200      	movs	r2, #0
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	605a      	str	r2, [r3, #4]
 80082e6:	609a      	str	r2, [r3, #8]
 80082e8:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80082ea:	2301      	movs	r3, #1
 80082ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80082ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80082f4:	2300      	movs	r3, #0
 80082f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80082f8:	2301      	movs	r3, #1
 80082fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80082fc:	2302      	movs	r3, #2
 80082fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008304:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008306:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800830a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800830c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008310:	4618      	mov	r0, r3
 8008312:	f7f9 ff4d 	bl	80021b0 <HAL_RCC_OscConfig>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800831c:	f000 f888 	bl	8008430 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008320:	230f      	movs	r3, #15
 8008322:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008324:	2302      	movs	r3, #2
 8008326:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008328:	2300      	movs	r3, #0
 800832a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800832c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008330:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008332:	2300      	movs	r3, #0
 8008334:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008336:	f107 0314 	add.w	r3, r7, #20
 800833a:	2102      	movs	r1, #2
 800833c:	4618      	mov	r0, r3
 800833e:	f7fa f99b 	bl	8002678 <HAL_RCC_ClockConfig>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d001      	beq.n	800834c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8008348:	f000 f872 	bl	8008430 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800834c:	2310      	movs	r3, #16
 800834e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8008350:	2300      	movs	r3, #0
 8008352:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008354:	1d3b      	adds	r3, r7, #4
 8008356:	4618      	mov	r0, r3
 8008358:	f7fa fb68 	bl	8002a2c <HAL_RCCEx_PeriphCLKConfig>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8008362:	f000 f865 	bl	8008430 <Error_Handler>
  }
}
 8008366:	bf00      	nop
 8008368:	3750      	adds	r7, #80	; 0x50
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	80fb      	strh	r3, [r7, #6]
  if (pin == rotary1.SwPin || pin == rotary2.SwPin)
 800837a:	88fa      	ldrh	r2, [r7, #6]
 800837c:	4b17      	ldr	r3, [pc, #92]	; (80083dc <HAL_GPIO_EXTI_Callback+0x6c>)
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	429a      	cmp	r2, r3
 8008382:	d004      	beq.n	800838e <HAL_GPIO_EXTI_Callback+0x1e>
 8008384:	88fa      	ldrh	r2, [r7, #6]
 8008386:	4b16      	ldr	r3, [pc, #88]	; (80083e0 <HAL_GPIO_EXTI_Callback+0x70>)
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	429a      	cmp	r2, r3
 800838c:	d108      	bne.n	80083a0 <HAL_GPIO_EXTI_Callback+0x30>
  {
    __HAL_TIM_ENABLE(&htim2);
 800838e:	4b15      	ldr	r3, [pc, #84]	; (80083e4 <HAL_GPIO_EXTI_Callback+0x74>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	4b13      	ldr	r3, [pc, #76]	; (80083e4 <HAL_GPIO_EXTI_Callback+0x74>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f042 0201 	orr.w	r2, r2, #1
 800839c:	601a      	str	r2, [r3, #0]
        || pin == rotary2.ClkPin || pin == rotary2.DtPin)
  {
    Compute_Rotary(&rotary1);
    Compute_Rotary(&rotary2);
  }
}
 800839e:	e019      	b.n	80083d4 <HAL_GPIO_EXTI_Callback+0x64>
  else if (pin == rotary1.ClkPin || pin == rotary1.DtPin
 80083a0:	88fa      	ldrh	r2, [r7, #6]
 80083a2:	4b0e      	ldr	r3, [pc, #56]	; (80083dc <HAL_GPIO_EXTI_Callback+0x6c>)
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d00e      	beq.n	80083c8 <HAL_GPIO_EXTI_Callback+0x58>
 80083aa:	88fa      	ldrh	r2, [r7, #6]
 80083ac:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <HAL_GPIO_EXTI_Callback+0x6c>)
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d009      	beq.n	80083c8 <HAL_GPIO_EXTI_Callback+0x58>
        || pin == rotary2.ClkPin || pin == rotary2.DtPin)
 80083b4:	88fa      	ldrh	r2, [r7, #6]
 80083b6:	4b0a      	ldr	r3, [pc, #40]	; (80083e0 <HAL_GPIO_EXTI_Callback+0x70>)
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d004      	beq.n	80083c8 <HAL_GPIO_EXTI_Callback+0x58>
 80083be:	88fa      	ldrh	r2, [r7, #6]
 80083c0:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <HAL_GPIO_EXTI_Callback+0x70>)
 80083c2:	695b      	ldr	r3, [r3, #20]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d105      	bne.n	80083d4 <HAL_GPIO_EXTI_Callback+0x64>
    Compute_Rotary(&rotary1);
 80083c8:	4804      	ldr	r0, [pc, #16]	; (80083dc <HAL_GPIO_EXTI_Callback+0x6c>)
 80083ca:	f000 f9a7 	bl	800871c <Compute_Rotary>
    Compute_Rotary(&rotary2);
 80083ce:	4804      	ldr	r0, [pc, #16]	; (80083e0 <HAL_GPIO_EXTI_Callback+0x70>)
 80083d0:	f000 f9a4 	bl	800871c <Compute_Rotary>
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	200004b0 	.word	0x200004b0
 80083e0:	200004dc 	.word	0x200004dc
 80083e4:	20000788 	.word	0x20000788

080083e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a0a      	ldr	r2, [pc, #40]	; (8008420 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d101      	bne.n	80083fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80083fa:	f7f8 fcd9 	bl	8000db0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == htim2.Instance)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	4b08      	ldr	r3, [pc, #32]	; (8008424 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	429a      	cmp	r2, r3
 8008408:	d105      	bne.n	8008416 <HAL_TIM_PeriodElapsedCallback+0x2e>
  {
		Debounce_Switch(&rotary1);
 800840a:	4807      	ldr	r0, [pc, #28]	; (8008428 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800840c:	f000 f850 	bl	80084b0 <Debounce_Switch>
		Debounce_Switch(&rotary2);
 8008410:	4806      	ldr	r0, [pc, #24]	; (800842c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8008412:	f000 f84d 	bl	80084b0 <Debounce_Switch>
  }
  /* USER CODE END Callback 1 */
}
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	40000800 	.word	0x40000800
 8008424:	20000788 	.word	0x20000788
 8008428:	200004b0 	.word	0x200004b0
 800842c:	200004dc 	.word	0x200004dc

08008430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008430:	b480      	push	{r7}
 8008432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008434:	bf00      	nop
 8008436:	46bd      	mov	sp, r7
 8008438:	bc80      	pop	{r7}
 800843a:	4770      	bx	lr

0800843c <Init_Rotary>:
RotaryEncoderTypeDef rotary3 = {0};
RotaryEncoderTypeDef rotary4 = {0};
RotaryEncoderTypeDef rotary5 = {0};

void Init_Rotary(RotaryEncoderTypeDef *rotary, uint16_t id, GPIO_TypeDef *clk_port, uint32_t clk_pin, GPIO_TypeDef *dt_port, uint32_t dt_pin, GPIO_TypeDef *sw_port, uint32_t sw_pin)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	607a      	str	r2, [r7, #4]
 8008446:	603b      	str	r3, [r7, #0]
 8008448:	460b      	mov	r3, r1
 800844a:	817b      	strh	r3, [r7, #10]
  rotary->Id = id;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	897a      	ldrh	r2, [r7, #10]
 8008450:	801a      	strh	r2, [r3, #0]
  rotary->ClkPort = clk_port;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	605a      	str	r2, [r3, #4]
  rotary->ClkPin = clk_pin;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	611a      	str	r2, [r3, #16]
  rotary->DtPort = dt_port;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	69ba      	ldr	r2, [r7, #24]
 8008462:	609a      	str	r2, [r3, #8]
  rotary->DtPin = dt_pin;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	69fa      	ldr	r2, [r7, #28]
 8008468:	615a      	str	r2, [r3, #20]
  rotary->SwPort = sw_port;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a3a      	ldr	r2, [r7, #32]
 800846e:	60da      	str	r2, [r3, #12]
  rotary->SwPin = sw_pin;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008474:	619a      	str	r2, [r3, #24]
  rotary->SamplesCount = 5;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2205      	movs	r2, #5
 800847a:	771a      	strb	r2, [r3, #28]
  rotary->FilterOutput = 1.0;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008482:	621a      	str	r2, [r3, #32]
  rotary->SwStableState = 1.0;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2201      	movs	r2, #1
 8008488:	625a      	str	r2, [r3, #36]	; 0x24
  rotary->SwPhysicalState = 1.0;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  rotary->RotaryState = 0;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  rotary->RotaryStateStore = 0;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80084a0:	bf00      	nop
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bc80      	pop	{r7}
 80084a8:	4770      	bx	lr
 80084aa:	0000      	movs	r0, r0
 80084ac:	0000      	movs	r0, r0
	...

080084b0 <Debounce_Switch>:

void Debounce_Switch(RotaryEncoderTypeDef *rotary)
{
 80084b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  rotary->SwPhysicalState = HAL_GPIO_ReadPin(rotary->SwPort, rotary->SwPin);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68da      	ldr	r2, [r3, #12]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	4619      	mov	r1, r3
 80084c6:	4610      	mov	r0, r2
 80084c8:	f7f8 fec8 	bl	800125c <HAL_GPIO_ReadPin>
 80084cc:	4603      	mov	r3, r0
 80084ce:	461a      	mov	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // virtual capacitor charge/discharge emulation
  rotary->FilterOutput = ((float)rotary->SwPhysicalState + (float)rotary->SamplesCount / 3.0 * rotary->FilterOutput)/(1 + (float)rotary->SamplesCount / 3.0);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084dc:	4618      	mov	r0, r3
 80084de:	f7f8 fbf9 	bl	8000cd4 <__aeabi_ui2f>
 80084e2:	4603      	mov	r3, r0
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7f7 ff9f 	bl	8000428 <__aeabi_f2d>
 80084ea:	4604      	mov	r4, r0
 80084ec:	460d      	mov	r5, r1
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	7f1b      	ldrb	r3, [r3, #28]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7f8 fbee 	bl	8000cd4 <__aeabi_ui2f>
 80084f8:	4603      	mov	r3, r0
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7f7 ff94 	bl	8000428 <__aeabi_f2d>
 8008500:	f04f 0200 	mov.w	r2, #0
 8008504:	4b4c      	ldr	r3, [pc, #304]	; (8008638 <Debounce_Switch+0x188>)
 8008506:	f7f8 f911 	bl	800072c <__aeabi_ddiv>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	4690      	mov	r8, r2
 8008510:	4699      	mov	r9, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	4618      	mov	r0, r3
 8008518:	f7f7 ff86 	bl	8000428 <__aeabi_f2d>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4640      	mov	r0, r8
 8008522:	4649      	mov	r1, r9
 8008524:	f7f7 ffd8 	bl	80004d8 <__aeabi_dmul>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	4620      	mov	r0, r4
 800852e:	4629      	mov	r1, r5
 8008530:	f7f7 fe1c 	bl	800016c <__adddf3>
 8008534:	4603      	mov	r3, r0
 8008536:	460c      	mov	r4, r1
 8008538:	4625      	mov	r5, r4
 800853a:	461c      	mov	r4, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	7f1b      	ldrb	r3, [r3, #28]
 8008540:	4618      	mov	r0, r3
 8008542:	f7f8 fbc7 	bl	8000cd4 <__aeabi_ui2f>
 8008546:	4603      	mov	r3, r0
 8008548:	4618      	mov	r0, r3
 800854a:	f7f7 ff6d 	bl	8000428 <__aeabi_f2d>
 800854e:	f04f 0200 	mov.w	r2, #0
 8008552:	4b39      	ldr	r3, [pc, #228]	; (8008638 <Debounce_Switch+0x188>)
 8008554:	f7f8 f8ea 	bl	800072c <__aeabi_ddiv>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	4610      	mov	r0, r2
 800855e:	4619      	mov	r1, r3
 8008560:	f04f 0200 	mov.w	r2, #0
 8008564:	4b35      	ldr	r3, [pc, #212]	; (800863c <Debounce_Switch+0x18c>)
 8008566:	f7f7 fe01 	bl	800016c <__adddf3>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4620      	mov	r0, r4
 8008570:	4629      	mov	r1, r5
 8008572:	f7f8 f8db 	bl	800072c <__aeabi_ddiv>
 8008576:	4603      	mov	r3, r0
 8008578:	460c      	mov	r4, r1
 800857a:	4618      	mov	r0, r3
 800857c:	4621      	mov	r1, r4
 800857e:	f7f8 faa3 	bl	8000ac8 <__aeabi_d2f>
 8008582:	4602      	mov	r2, r0
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	621a      	str	r2, [r3, #32]
  if ((rotary->FilterOutput > 0.95 && rotary->SwStableState == GPIO_PIN_RESET)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a1b      	ldr	r3, [r3, #32]
 800858c:	4618      	mov	r0, r3
 800858e:	f7f7 ff4b 	bl	8000428 <__aeabi_f2d>
 8008592:	a325      	add	r3, pc, #148	; (adr r3, 8008628 <Debounce_Switch+0x178>)
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	f7f8 fa2e 	bl	80009f8 <__aeabi_dcmpgt>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <Debounce_Switch+0xfa>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d011      	beq.n	80085ce <Debounce_Switch+0x11e>
   || (rotary->FilterOutput < 0.05 && rotary->SwStableState == GPIO_PIN_SET))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7f7 ff3a 	bl	8000428 <__aeabi_f2d>
 80085b4:	a31e      	add	r3, pc, #120	; (adr r3, 8008630 <Debounce_Switch+0x180>)
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	f7f8 f9ff 	bl	80009bc <__aeabi_dcmplt>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d100      	bne.n	80085c6 <Debounce_Switch+0x116>
  {
    rotary->SwStableState = rotary->FilterOutput > 0.95 ? GPIO_PIN_SET : GPIO_PIN_RESET;
    rotary->FilterOutput = (float)rotary->SwStableState;
    Send_Mail(rotary, rotary->SwStableState ? ebPRESSED : ebRELEASED);
  }
}
 80085c4:	e02b      	b.n	800861e <Debounce_Switch+0x16e>
   || (rotary->FilterOutput < 0.05 && rotary->SwStableState == GPIO_PIN_SET))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d127      	bne.n	800861e <Debounce_Switch+0x16e>
    rotary->SwStableState = rotary->FilterOutput > 0.95 ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7f7 ff28 	bl	8000428 <__aeabi_f2d>
 80085d8:	2301      	movs	r3, #1
 80085da:	461c      	mov	r4, r3
 80085dc:	a312      	add	r3, pc, #72	; (adr r3, 8008628 <Debounce_Switch+0x178>)
 80085de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e2:	f7f8 fa09 	bl	80009f8 <__aeabi_dcmpgt>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d101      	bne.n	80085f0 <Debounce_Switch+0x140>
 80085ec:	2300      	movs	r3, #0
 80085ee:	461c      	mov	r4, r3
 80085f0:	b2e3      	uxtb	r3, r4
 80085f2:	461a      	mov	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	625a      	str	r2, [r3, #36]	; 0x24
    rotary->FilterOutput = (float)rotary->SwStableState;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7f8 fb6d 	bl	8000cdc <__aeabi_i2f>
 8008602:	4602      	mov	r2, r0
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	621a      	str	r2, [r3, #32]
    Send_Mail(rotary, rotary->SwStableState ? ebPRESSED : ebRELEASED);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <Debounce_Switch+0x164>
 8008610:	2301      	movs	r3, #1
 8008612:	e000      	b.n	8008616 <Debounce_Switch+0x166>
 8008614:	2302      	movs	r3, #2
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f89f 	bl	800875c <Send_Mail>
}
 800861e:	bf00      	nop
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008628:	66666666 	.word	0x66666666
 800862c:	3fee6666 	.word	0x3fee6666
 8008630:	9999999a 	.word	0x9999999a
 8008634:	3fa99999 	.word	0x3fa99999
 8008638:	40080000 	.word	0x40080000
 800863c:	3ff00000 	.word	0x3ff00000

08008640 <Read_Rotary>:

int8_t Read_Rotary(RotaryEncoderTypeDef *rotary)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  static int8_t rot_enc_table[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};
  rotary->RotaryState <<= 2;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	b2da      	uxtb	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  if (HAL_GPIO_ReadPin(rotary->DtPort, rotary->DtPin))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	b29b      	uxth	r3, r3
 8008662:	4619      	mov	r1, r3
 8008664:	4610      	mov	r0, r2
 8008666:	f7f8 fdf9 	bl	800125c <HAL_GPIO_ReadPin>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d008      	beq.n	8008682 <Read_Rotary+0x42>
  {
    rotary->RotaryState |= 0x02;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008676:	f043 0302 	orr.w	r3, r3, #2
 800867a:	b2da      	uxtb	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  if (HAL_GPIO_ReadPin(rotary->ClkPort, rotary->ClkPin))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	b29b      	uxth	r3, r3
 800868c:	4619      	mov	r1, r3
 800868e:	4610      	mov	r0, r2
 8008690:	f7f8 fde4 	bl	800125c <HAL_GPIO_ReadPin>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d008      	beq.n	80086ac <Read_Rotary+0x6c>
  {
    rotary->RotaryState |= 0x01;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80086a0:	f043 0301 	orr.w	r3, r3, #1
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  rotary->RotaryState &= 0x0f;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80086b2:	f003 030f 	and.w	r3, r3, #15
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  if  (rot_enc_table[rotary->RotaryState] ) 
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80086c4:	461a      	mov	r2, r3
 80086c6:	4b14      	ldr	r3, [pc, #80]	; (8008718 <Read_Rotary+0xd8>)
 80086c8:	569b      	ldrsb	r3, [r3, r2]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d01e      	beq.n	800870c <Read_Rotary+0xcc>
  {
    rotary->RotaryStateStore <<= 4;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d2:	011b      	lsls	r3, r3, #4
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    rotary->RotaryStateStore |= rotary->RotaryState;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	4313      	orrs	r3, r2
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    if ((rotary->RotaryStateStore & 0xff) == 0x2b) 
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b2b      	cmp	r3, #43	; 0x2b
 80086f6:	d101      	bne.n	80086fc <Read_Rotary+0xbc>
	  {
	    return 1;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e008      	b.n	800870e <Read_Rotary+0xce>
	  }
    if ((rotary->RotaryStateStore & 0xff) == 0x17)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b17      	cmp	r3, #23
 8008704:	d102      	bne.n	800870c <Read_Rotary+0xcc>
	  {
	    return -1;
 8008706:	f04f 33ff 	mov.w	r3, #4294967295
 800870a:	e000      	b.n	800870e <Read_Rotary+0xce>
	  }
  }
  return 0;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20000118 	.word	0x20000118

0800871c <Compute_Rotary>:

void Compute_Rotary(RotaryEncoderTypeDef *rotary)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  if(Read_Rotary(rotary))
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff ff8b 	bl	8008640 <Read_Rotary>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d011      	beq.n	8008754 <Compute_Rotary+0x38>
  {
    if (rotary->RotaryState == 0x0b) 
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008736:	2b0b      	cmp	r3, #11
 8008738:	d103      	bne.n	8008742 <Compute_Rotary+0x26>
	  {
      Send_Mail(rotary, ebCLOCKWISE);
 800873a:	2104      	movs	r1, #4
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f80d 	bl	800875c <Send_Mail>
    }
    if (rotary->RotaryState == 0x07) 
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008748:	2b07      	cmp	r3, #7
 800874a:	d103      	bne.n	8008754 <Compute_Rotary+0x38>
	  {
      Send_Mail(rotary, ebCOUNTERCLOCKWISE);
 800874c:	2108      	movs	r1, #8
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f804 	bl	800875c <Send_Mail>
    }
  }
}
 8008754:	bf00      	nop
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <Send_Mail>:

void Send_Mail(RotaryEncoderTypeDef *rotary, uint16_t EventCode)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	460b      	mov	r3, r1
 8008766:	807b      	strh	r3, [r7, #2]
  RotaryMail *mptr;
  mptr = osMailAlloc(rotaryMailQ, osWaitForever);
 8008768:	4b14      	ldr	r3, [pc, #80]	; (80087bc <Send_Mail+0x60>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f04f 31ff 	mov.w	r1, #4294967295
 8008770:	4618      	mov	r0, r3
 8008772:	f7fd fa5c 	bl	8005c2e <osMailAlloc>
 8008776:	60f8      	str	r0, [r7, #12]
  if (mptr == NULL)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d102      	bne.n	8008784 <Send_Mail+0x28>
  {
  	Error_Handler();
 800877e:	f7ff fe57 	bl	8008430 <Error_Handler>
  	return;
 8008782:	e017      	b.n	80087b4 <Send_Mail+0x58>
  }
  mptr->Rotary = rotary;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	601a      	str	r2, [r3, #0]
  mptr->EventCode = EventCode;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	887a      	ldrh	r2, [r7, #2]
 800878e:	809a      	strh	r2, [r3, #4]
  if(osMailPut(rotaryMailQ, mptr) != osOK)
 8008790:	4b0a      	ldr	r3, [pc, #40]	; (80087bc <Send_Mail+0x60>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68f9      	ldr	r1, [r7, #12]
 8008796:	4618      	mov	r0, r3
 8008798:	f7fd fa5e 	bl	8005c58 <osMailPut>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <Send_Mail+0x4a>
  {
  	Error_Handler();
 80087a2:	f7ff fe45 	bl	8008430 <Error_Handler>
  }
  if(osThreadYield() != osOK)
 80087a6:	f7fd f839 	bl	800581c <osThreadYield>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <Send_Mail+0x58>
  {
  	Error_Handler();
 80087b0:	f7ff fe3e 	bl	8008430 <Error_Handler>
  }
}
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	20000740 	.word	0x20000740

080087c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80087c6:	4b18      	ldr	r3, [pc, #96]	; (8008828 <HAL_MspInit+0x68>)
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	4a17      	ldr	r2, [pc, #92]	; (8008828 <HAL_MspInit+0x68>)
 80087cc:	f043 0301 	orr.w	r3, r3, #1
 80087d0:	6193      	str	r3, [r2, #24]
 80087d2:	4b15      	ldr	r3, [pc, #84]	; (8008828 <HAL_MspInit+0x68>)
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	60bb      	str	r3, [r7, #8]
 80087dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80087de:	4b12      	ldr	r3, [pc, #72]	; (8008828 <HAL_MspInit+0x68>)
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	4a11      	ldr	r2, [pc, #68]	; (8008828 <HAL_MspInit+0x68>)
 80087e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087e8:	61d3      	str	r3, [r2, #28]
 80087ea:	4b0f      	ldr	r3, [pc, #60]	; (8008828 <HAL_MspInit+0x68>)
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087f2:	607b      	str	r3, [r7, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80087f6:	2200      	movs	r2, #0
 80087f8:	210f      	movs	r1, #15
 80087fa:	f06f 0001 	mvn.w	r0, #1
 80087fe:	f7f8 fba4 	bl	8000f4a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008802:	4b0a      	ldr	r3, [pc, #40]	; (800882c <HAL_MspInit+0x6c>)
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	60fb      	str	r3, [r7, #12]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	4a04      	ldr	r2, [pc, #16]	; (800882c <HAL_MspInit+0x6c>)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800881e:	bf00      	nop
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	40021000 	.word	0x40021000
 800882c:	40010000 	.word	0x40010000

08008830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b08c      	sub	sp, #48	; 0x30
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008838:	2300      	movs	r3, #0
 800883a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800883c:	2300      	movs	r3, #0
 800883e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8008840:	2200      	movs	r2, #0
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	201e      	movs	r0, #30
 8008846:	f7f8 fb80 	bl	8000f4a <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800884a:	201e      	movs	r0, #30
 800884c:	f7f8 fb99 	bl	8000f82 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8008850:	4b1f      	ldr	r3, [pc, #124]	; (80088d0 <HAL_InitTick+0xa0>)
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	4a1e      	ldr	r2, [pc, #120]	; (80088d0 <HAL_InitTick+0xa0>)
 8008856:	f043 0304 	orr.w	r3, r3, #4
 800885a:	61d3      	str	r3, [r2, #28]
 800885c:	4b1c      	ldr	r3, [pc, #112]	; (80088d0 <HAL_InitTick+0xa0>)
 800885e:	69db      	ldr	r3, [r3, #28]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	60fb      	str	r3, [r7, #12]
 8008866:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008868:	f107 0210 	add.w	r2, r7, #16
 800886c:	f107 0314 	add.w	r3, r7, #20
 8008870:	4611      	mov	r1, r2
 8008872:	4618      	mov	r0, r3
 8008874:	f7fa f88c 	bl	8002990 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008878:	f7fa f876 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 800887c:	4603      	mov	r3, r0
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008884:	4a13      	ldr	r2, [pc, #76]	; (80088d4 <HAL_InitTick+0xa4>)
 8008886:	fba2 2303 	umull	r2, r3, r2, r3
 800888a:	0c9b      	lsrs	r3, r3, #18
 800888c:	3b01      	subs	r3, #1
 800888e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8008890:	4b11      	ldr	r3, [pc, #68]	; (80088d8 <HAL_InitTick+0xa8>)
 8008892:	4a12      	ldr	r2, [pc, #72]	; (80088dc <HAL_InitTick+0xac>)
 8008894:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8008896:	4b10      	ldr	r3, [pc, #64]	; (80088d8 <HAL_InitTick+0xa8>)
 8008898:	f240 32e7 	movw	r2, #999	; 0x3e7
 800889c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800889e:	4a0e      	ldr	r2, [pc, #56]	; (80088d8 <HAL_InitTick+0xa8>)
 80088a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80088a4:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <HAL_InitTick+0xa8>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80088aa:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <HAL_InitTick+0xa8>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80088b0:	4809      	ldr	r0, [pc, #36]	; (80088d8 <HAL_InitTick+0xa8>)
 80088b2:	f7fa f971 	bl	8002b98 <HAL_TIM_Base_Init>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d104      	bne.n	80088c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80088bc:	4806      	ldr	r0, [pc, #24]	; (80088d8 <HAL_InitTick+0xa8>)
 80088be:	f7fa f996 	bl	8002bee <HAL_TIM_Base_Start_IT>
 80088c2:	4603      	mov	r3, r0
 80088c4:	e000      	b.n	80088c8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3730      	adds	r7, #48	; 0x30
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	40021000 	.word	0x40021000
 80088d4:	431bde83 	.word	0x431bde83
 80088d8:	20000748 	.word	0x20000748
 80088dc:	40000800 	.word	0x40000800

080088e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80088e0:	b480      	push	{r7}
 80088e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80088e4:	bf00      	nop
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bc80      	pop	{r7}
 80088ea:	4770      	bx	lr

080088ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80088ec:	b480      	push	{r7}
 80088ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80088f0:	e7fe      	b.n	80088f0 <HardFault_Handler+0x4>

080088f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80088f2:	b480      	push	{r7}
 80088f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80088f6:	e7fe      	b.n	80088f6 <MemManage_Handler+0x4>

080088f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80088f8:	b480      	push	{r7}
 80088fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80088fc:	e7fe      	b.n	80088fc <BusFault_Handler+0x4>

080088fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80088fe:	b480      	push	{r7}
 8008900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008902:	e7fe      	b.n	8008902 <UsageFault_Handler+0x4>

08008904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008904:	b480      	push	{r7}
 8008906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008908:	bf00      	nop
 800890a:	46bd      	mov	sp, r7
 800890c:	bc80      	pop	{r7}
 800890e:	4770      	bx	lr

08008910 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8008914:	2002      	movs	r0, #2
 8008916:	f7f8 fce1 	bl	80012dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800891a:	bf00      	nop
 800891c:	bd80      	pop	{r7, pc}

0800891e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8008922:	2004      	movs	r0, #4
 8008924:	f7f8 fcda 	bl	80012dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8008928:	bf00      	nop
 800892a:	bd80      	pop	{r7, pc}

0800892c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8008930:	2008      	movs	r0, #8
 8008932:	f7f8 fcd3 	bl	80012dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8008936:	bf00      	nop
 8008938:	bd80      	pop	{r7, pc}

0800893a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800893e:	2010      	movs	r0, #16
 8008940:	f7f8 fccc 	bl	80012dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8008944:	bf00      	nop
 8008946:	bd80      	pop	{r7, pc}

08008948 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800894c:	4802      	ldr	r0, [pc, #8]	; (8008958 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800894e:	f7f8 fddd 	bl	800150c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8008952:	bf00      	nop
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	200011bc 	.word	0x200011bc

0800895c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8008960:	2020      	movs	r0, #32
 8008962:	f7f8 fcbb 	bl	80012dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8008966:	2040      	movs	r0, #64	; 0x40
 8008968:	f7f8 fcb8 	bl	80012dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800896c:	bf00      	nop
 800896e:	bd80      	pop	{r7, pc}

08008970 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008974:	4802      	ldr	r0, [pc, #8]	; (8008980 <TIM2_IRQHandler+0x10>)
 8008976:	f7fa f954 	bl	8002c22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800897a:	bf00      	nop
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	20000788 	.word	0x20000788

08008984 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008988:	4802      	ldr	r0, [pc, #8]	; (8008994 <TIM4_IRQHandler+0x10>)
 800898a:	f7fa f94a 	bl	8002c22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800898e:	bf00      	nop
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20000748 	.word	0x20000748

08008998 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008998:	b480      	push	{r7}
 800899a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800899c:	4b15      	ldr	r3, [pc, #84]	; (80089f4 <SystemInit+0x5c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a14      	ldr	r2, [pc, #80]	; (80089f4 <SystemInit+0x5c>)
 80089a2:	f043 0301 	orr.w	r3, r3, #1
 80089a6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80089a8:	4b12      	ldr	r3, [pc, #72]	; (80089f4 <SystemInit+0x5c>)
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	4911      	ldr	r1, [pc, #68]	; (80089f4 <SystemInit+0x5c>)
 80089ae:	4b12      	ldr	r3, [pc, #72]	; (80089f8 <SystemInit+0x60>)
 80089b0:	4013      	ands	r3, r2
 80089b2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80089b4:	4b0f      	ldr	r3, [pc, #60]	; (80089f4 <SystemInit+0x5c>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a0e      	ldr	r2, [pc, #56]	; (80089f4 <SystemInit+0x5c>)
 80089ba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80089be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089c2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80089c4:	4b0b      	ldr	r3, [pc, #44]	; (80089f4 <SystemInit+0x5c>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a0a      	ldr	r2, [pc, #40]	; (80089f4 <SystemInit+0x5c>)
 80089ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089ce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80089d0:	4b08      	ldr	r3, [pc, #32]	; (80089f4 <SystemInit+0x5c>)
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	4a07      	ldr	r2, [pc, #28]	; (80089f4 <SystemInit+0x5c>)
 80089d6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80089da:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80089dc:	4b05      	ldr	r3, [pc, #20]	; (80089f4 <SystemInit+0x5c>)
 80089de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80089e2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80089e4:	4b05      	ldr	r3, [pc, #20]	; (80089fc <SystemInit+0x64>)
 80089e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80089ea:	609a      	str	r2, [r3, #8]
#endif 
}
 80089ec:	bf00      	nop
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bc80      	pop	{r7}
 80089f2:	4770      	bx	lr
 80089f4:	40021000 	.word	0x40021000
 80089f8:	f8ff0000 	.word	0xf8ff0000
 80089fc:	e000ed00 	.word	0xe000ed00

08008a00 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008a06:	f107 0308 	add.w	r3, r7, #8
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	601a      	str	r2, [r3, #0]
 8008a0e:	605a      	str	r2, [r3, #4]
 8008a10:	609a      	str	r2, [r3, #8]
 8008a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a14:	463b      	mov	r3, r7
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8008a1c:	4b1d      	ldr	r3, [pc, #116]	; (8008a94 <MX_TIM2_Init+0x94>)
 8008a1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008a22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8008a24:	4b1b      	ldr	r3, [pc, #108]	; (8008a94 <MX_TIM2_Init+0x94>)
 8008a26:	2247      	movs	r2, #71	; 0x47
 8008a28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a2a:	4b1a      	ldr	r3, [pc, #104]	; (8008a94 <MX_TIM2_Init+0x94>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008a30:	4b18      	ldr	r3, [pc, #96]	; (8008a94 <MX_TIM2_Init+0x94>)
 8008a32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008a36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a38:	4b16      	ldr	r3, [pc, #88]	; (8008a94 <MX_TIM2_Init+0x94>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a3e:	4b15      	ldr	r3, [pc, #84]	; (8008a94 <MX_TIM2_Init+0x94>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008a44:	4813      	ldr	r0, [pc, #76]	; (8008a94 <MX_TIM2_Init+0x94>)
 8008a46:	f7fa f8a7 	bl	8002b98 <HAL_TIM_Base_Init>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8008a50:	f7ff fcee 	bl	8008430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008a5a:	f107 0308 	add.w	r3, r7, #8
 8008a5e:	4619      	mov	r1, r3
 8008a60:	480c      	ldr	r0, [pc, #48]	; (8008a94 <MX_TIM2_Init+0x94>)
 8008a62:	f7fa f9e6 	bl	8002e32 <HAL_TIM_ConfigClockSource>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d001      	beq.n	8008a70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8008a6c:	f7ff fce0 	bl	8008430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a70:	2300      	movs	r3, #0
 8008a72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a74:	2300      	movs	r3, #0
 8008a76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008a78:	463b      	mov	r3, r7
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4805      	ldr	r0, [pc, #20]	; (8008a94 <MX_TIM2_Init+0x94>)
 8008a7e:	f7fa fbe2 	bl	8003246 <HAL_TIMEx_MasterConfigSynchronization>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008a88:	f7ff fcd2 	bl	8008430 <Error_Handler>
  }

}
 8008a8c:	bf00      	nop
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	20000788 	.word	0x20000788

08008a98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa8:	d113      	bne.n	8008ad2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008aaa:	4b0c      	ldr	r3, [pc, #48]	; (8008adc <HAL_TIM_Base_MspInit+0x44>)
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	4a0b      	ldr	r2, [pc, #44]	; (8008adc <HAL_TIM_Base_MspInit+0x44>)
 8008ab0:	f043 0301 	orr.w	r3, r3, #1
 8008ab4:	61d3      	str	r3, [r2, #28]
 8008ab6:	4b09      	ldr	r3, [pc, #36]	; (8008adc <HAL_TIM_Base_MspInit+0x44>)
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	60fb      	str	r3, [r7, #12]
 8008ac0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2106      	movs	r1, #6
 8008ac6:	201c      	movs	r0, #28
 8008ac8:	f7f8 fa3f 	bl	8000f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008acc:	201c      	movs	r0, #28
 8008ace:	f7f8 fa58 	bl	8000f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8008ad2:	bf00      	nop
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	40021000 	.word	0x40021000

08008ae0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	4912      	ldr	r1, [pc, #72]	; (8008b30 <MX_USB_DEVICE_Init+0x50>)
 8008ae8:	4812      	ldr	r0, [pc, #72]	; (8008b34 <MX_USB_DEVICE_Init+0x54>)
 8008aea:	f7fb ff25 	bl	8004938 <USBD_Init>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008af4:	f7ff fc9c 	bl	8008430 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008af8:	490f      	ldr	r1, [pc, #60]	; (8008b38 <MX_USB_DEVICE_Init+0x58>)
 8008afa:	480e      	ldr	r0, [pc, #56]	; (8008b34 <MX_USB_DEVICE_Init+0x54>)
 8008afc:	f7fb ff47 	bl	800498e <USBD_RegisterClass>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b06:	f7ff fc93 	bl	8008430 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b0a:	490c      	ldr	r1, [pc, #48]	; (8008b3c <MX_USB_DEVICE_Init+0x5c>)
 8008b0c:	4809      	ldr	r0, [pc, #36]	; (8008b34 <MX_USB_DEVICE_Init+0x54>)
 8008b0e:	f7fb fe7d 	bl	800480c <USBD_CDC_RegisterInterface>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b18:	f7ff fc8a 	bl	8008430 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b1c:	4805      	ldr	r0, [pc, #20]	; (8008b34 <MX_USB_DEVICE_Init+0x54>)
 8008b1e:	f7fb ff4f 	bl	80049c0 <USBD_Start>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b28:	f7ff fc82 	bl	8008430 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b2c:	bf00      	nop
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	2000013c 	.word	0x2000013c
 8008b34:	200007c8 	.word	0x200007c8
 8008b38:	20000010 	.word	0x20000010
 8008b3c:	2000012c 	.word	0x2000012c

08008b40 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b44:	2200      	movs	r2, #0
 8008b46:	4905      	ldr	r1, [pc, #20]	; (8008b5c <CDC_Init_FS+0x1c>)
 8008b48:	4805      	ldr	r0, [pc, #20]	; (8008b60 <CDC_Init_FS+0x20>)
 8008b4a:	f7fb fe75 	bl	8004838 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b4e:	4905      	ldr	r1, [pc, #20]	; (8008b64 <CDC_Init_FS+0x24>)
 8008b50:	4803      	ldr	r0, [pc, #12]	; (8008b60 <CDC_Init_FS+0x20>)
 8008b52:	f7fb fe8a 	bl	800486a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	20000dd4 	.word	0x20000dd4
 8008b60:	200007c8 	.word	0x200007c8
 8008b64:	200009ec 	.word	0x200009ec

08008b68 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bc80      	pop	{r7}
 8008b74:	4770      	bx	lr
	...

08008b78 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	4603      	mov	r3, r0
 8008b80:	6039      	str	r1, [r7, #0]
 8008b82:	71fb      	strb	r3, [r7, #7]
 8008b84:	4613      	mov	r3, r2
 8008b86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	2b23      	cmp	r3, #35	; 0x23
 8008b8c:	d84a      	bhi.n	8008c24 <CDC_Control_FS+0xac>
 8008b8e:	a201      	add	r2, pc, #4	; (adr r2, 8008b94 <CDC_Control_FS+0x1c>)
 8008b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b94:	08008c25 	.word	0x08008c25
 8008b98:	08008c25 	.word	0x08008c25
 8008b9c:	08008c25 	.word	0x08008c25
 8008ba0:	08008c25 	.word	0x08008c25
 8008ba4:	08008c25 	.word	0x08008c25
 8008ba8:	08008c25 	.word	0x08008c25
 8008bac:	08008c25 	.word	0x08008c25
 8008bb0:	08008c25 	.word	0x08008c25
 8008bb4:	08008c25 	.word	0x08008c25
 8008bb8:	08008c25 	.word	0x08008c25
 8008bbc:	08008c25 	.word	0x08008c25
 8008bc0:	08008c25 	.word	0x08008c25
 8008bc4:	08008c25 	.word	0x08008c25
 8008bc8:	08008c25 	.word	0x08008c25
 8008bcc:	08008c25 	.word	0x08008c25
 8008bd0:	08008c25 	.word	0x08008c25
 8008bd4:	08008c25 	.word	0x08008c25
 8008bd8:	08008c25 	.word	0x08008c25
 8008bdc:	08008c25 	.word	0x08008c25
 8008be0:	08008c25 	.word	0x08008c25
 8008be4:	08008c25 	.word	0x08008c25
 8008be8:	08008c25 	.word	0x08008c25
 8008bec:	08008c25 	.word	0x08008c25
 8008bf0:	08008c25 	.word	0x08008c25
 8008bf4:	08008c25 	.word	0x08008c25
 8008bf8:	08008c25 	.word	0x08008c25
 8008bfc:	08008c25 	.word	0x08008c25
 8008c00:	08008c25 	.word	0x08008c25
 8008c04:	08008c25 	.word	0x08008c25
 8008c08:	08008c25 	.word	0x08008c25
 8008c0c:	08008c25 	.word	0x08008c25
 8008c10:	08008c25 	.word	0x08008c25
 8008c14:	08008c25 	.word	0x08008c25
 8008c18:	08008c25 	.word	0x08008c25
 8008c1c:	08008c25 	.word	0x08008c25
 8008c20:	08008c25 	.word	0x08008c25
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c24:	bf00      	nop
  }

  return (USBD_OK);
 8008c26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bc80      	pop	{r7}
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop

08008c34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	4805      	ldr	r0, [pc, #20]	; (8008c58 <CDC_Receive_FS+0x24>)
 8008c42:	f7fb fe12 	bl	800486a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c46:	4804      	ldr	r0, [pc, #16]	; (8008c58 <CDC_Receive_FS+0x24>)
 8008c48:	f7fb fe4c 	bl	80048e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008c4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	200007c8 	.word	0x200007c8

08008c5c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ca4 <CDC_Transmit_FS+0x48>)
 8008c6e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008c72:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e00b      	b.n	8008c9a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c82:	887b      	ldrh	r3, [r7, #2]
 8008c84:	461a      	mov	r2, r3
 8008c86:	6879      	ldr	r1, [r7, #4]
 8008c88:	4806      	ldr	r0, [pc, #24]	; (8008ca4 <CDC_Transmit_FS+0x48>)
 8008c8a:	f7fb fdd5 	bl	8004838 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c8e:	4805      	ldr	r0, [pc, #20]	; (8008ca4 <CDC_Transmit_FS+0x48>)
 8008c90:	f7fb fdfe 	bl	8004890 <USBD_CDC_TransmitPacket>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	200007c8 	.word	0x200007c8

08008ca8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a0d      	ldr	r2, [pc, #52]	; (8008cec <HAL_PCD_MspInit+0x44>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d113      	bne.n	8008ce2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008cba:	4b0d      	ldr	r3, [pc, #52]	; (8008cf0 <HAL_PCD_MspInit+0x48>)
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	4a0c      	ldr	r2, [pc, #48]	; (8008cf0 <HAL_PCD_MspInit+0x48>)
 8008cc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008cc4:	61d3      	str	r3, [r2, #28]
 8008cc6:	4b0a      	ldr	r3, [pc, #40]	; (8008cf0 <HAL_PCD_MspInit+0x48>)
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2105      	movs	r1, #5
 8008cd6:	2014      	movs	r0, #20
 8008cd8:	f7f8 f937 	bl	8000f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008cdc:	2014      	movs	r0, #20
 8008cde:	f7f8 f950 	bl	8000f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008ce2:	bf00      	nop
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	40005c00 	.word	0x40005c00
 8008cf0:	40021000 	.word	0x40021000

08008cf4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4610      	mov	r0, r2
 8008d0c:	f7fb fea0 	bl	8004a50 <USBD_LL_SetupStage>
}
 8008d10:	bf00      	nop
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8008d2a:	78fb      	ldrb	r3, [r7, #3]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	015b      	lsls	r3, r3, #5
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	78fb      	ldrb	r3, [r7, #3]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	f7fb fed2 	bl	8004ae4 <USBD_LL_DataOutStage>
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8008d5a:	78fb      	ldrb	r3, [r7, #3]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	015b      	lsls	r3, r3, #5
 8008d60:	4413      	add	r3, r2
 8008d62:	333c      	adds	r3, #60	; 0x3c
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	78fb      	ldrb	r3, [r7, #3]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	f7fb ff16 	bl	8004b9a <USBD_LL_DataInStage>
}
 8008d6e:	bf00      	nop
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b082      	sub	sp, #8
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7fb fff9 	bl	8004d7c <USBD_LL_SOF>
}
 8008d8a:	bf00      	nop
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b084      	sub	sp, #16
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d001      	beq.n	8008daa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008da6:	f7ff fb43 	bl	8008430 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8008db0:	7bfa      	ldrb	r2, [r7, #15]
 8008db2:	4611      	mov	r1, r2
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fb ffae 	bl	8004d16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fb ff79 	bl	8004cb8 <USBD_LL_Reset>
}
 8008dc6:	bf00      	nop
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
	...

08008dd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fb ffa8 	bl	8004d34 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d005      	beq.n	8008df8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008dec:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <HAL_PCD_SuspendCallback+0x30>)
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	4a03      	ldr	r2, [pc, #12]	; (8008e00 <HAL_PCD_SuspendCallback+0x30>)
 8008df2:	f043 0306 	orr.w	r3, r3, #6
 8008df6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	e000ed00 	.word	0xe000ed00

08008e04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fb ffa2 	bl	8004d5c <USBD_LL_Resume>
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008e28:	4a28      	ldr	r2, [pc, #160]	; (8008ecc <USBD_LL_Init+0xac>)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a26      	ldr	r2, [pc, #152]	; (8008ecc <USBD_LL_Init+0xac>)
 8008e34:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8008e38:	4b24      	ldr	r3, [pc, #144]	; (8008ecc <USBD_LL_Init+0xac>)
 8008e3a:	4a25      	ldr	r2, [pc, #148]	; (8008ed0 <USBD_LL_Init+0xb0>)
 8008e3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008e3e:	4b23      	ldr	r3, [pc, #140]	; (8008ecc <USBD_LL_Init+0xac>)
 8008e40:	2208      	movs	r2, #8
 8008e42:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008e44:	4b21      	ldr	r3, [pc, #132]	; (8008ecc <USBD_LL_Init+0xac>)
 8008e46:	2202      	movs	r2, #2
 8008e48:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008e4a:	4b20      	ldr	r3, [pc, #128]	; (8008ecc <USBD_LL_Init+0xac>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008e50:	4b1e      	ldr	r3, [pc, #120]	; (8008ecc <USBD_LL_Init+0xac>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008e56:	4b1d      	ldr	r3, [pc, #116]	; (8008ecc <USBD_LL_Init+0xac>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008e5c:	481b      	ldr	r0, [pc, #108]	; (8008ecc <USBD_LL_Init+0xac>)
 8008e5e:	f7f8 fa55 	bl	800130c <HAL_PCD_Init>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008e68:	f7ff fae2 	bl	8008430 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8008e72:	2318      	movs	r3, #24
 8008e74:	2200      	movs	r2, #0
 8008e76:	2100      	movs	r1, #0
 8008e78:	f7f9 f95c 	bl	8002134 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8008e82:	2358      	movs	r3, #88	; 0x58
 8008e84:	2200      	movs	r2, #0
 8008e86:	2180      	movs	r1, #128	; 0x80
 8008e88:	f7f9 f954 	bl	8002134 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8008e92:	23c0      	movs	r3, #192	; 0xc0
 8008e94:	2200      	movs	r2, #0
 8008e96:	2181      	movs	r1, #129	; 0x81
 8008e98:	f7f9 f94c 	bl	8002134 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8008ea2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	f7f9 f943 	bl	8002134 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8008eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eb8:	2200      	movs	r2, #0
 8008eba:	2182      	movs	r1, #130	; 0x82
 8008ebc:	f7f9 f93a 	bl	8002134 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	200011bc 	.word	0x200011bc
 8008ed0:	40005c00 	.word	0x40005c00

08008ed4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7f8 fae8 	bl	80014c0 <HAL_PCD_Start>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 f948 	bl	800918c <USBD_Get_USB_Status>
 8008efc:	4603      	mov	r3, r0
 8008efe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b084      	sub	sp, #16
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	4608      	mov	r0, r1
 8008f14:	4611      	mov	r1, r2
 8008f16:	461a      	mov	r2, r3
 8008f18:	4603      	mov	r3, r0
 8008f1a:	70fb      	strb	r3, [r7, #3]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	70bb      	strb	r3, [r7, #2]
 8008f20:	4613      	mov	r3, r2
 8008f22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8008f32:	78bb      	ldrb	r3, [r7, #2]
 8008f34:	883a      	ldrh	r2, [r7, #0]
 8008f36:	78f9      	ldrb	r1, [r7, #3]
 8008f38:	f7f8 fc0f 	bl	800175a <HAL_PCD_EP_Open>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 f922 	bl	800918c <USBD_Get_USB_Status>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008f70:	78fa      	ldrb	r2, [r7, #3]
 8008f72:	4611      	mov	r1, r2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7f8 fc45 	bl	8001804 <HAL_PCD_EP_Close>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 f903 	bl	800918c <USBD_Get_USB_Status>
 8008f86:	4603      	mov	r3, r0
 8008f88:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008fae:	78fa      	ldrb	r2, [r7, #3]
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7f8 fcf8 	bl	80019a8 <HAL_PCD_EP_SetStall>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 f8e4 	bl	800918c <USBD_Get_USB_Status>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b084      	sub	sp, #16
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008fec:	78fa      	ldrb	r2, [r7, #3]
 8008fee:	4611      	mov	r1, r2
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7f8 fd2e 	bl	8001a52 <HAL_PCD_EP_ClrStall>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ffa:	7bfb      	ldrb	r3, [r7, #15]
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f000 f8c5 	bl	800918c <USBD_Get_USB_Status>
 8009002:	4603      	mov	r3, r0
 8009004:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8009006:	7bbb      	ldrb	r3, [r7, #14]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009022:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009028:	2b00      	cmp	r3, #0
 800902a:	da08      	bge.n	800903e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800902c:	78fb      	ldrb	r3, [r7, #3]
 800902e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	015b      	lsls	r3, r3, #5
 8009036:	4413      	add	r3, r2
 8009038:	332a      	adds	r3, #42	; 0x2a
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	e008      	b.n	8009050 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800903e:	78fb      	ldrb	r3, [r7, #3]
 8009040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	015b      	lsls	r3, r3, #5
 8009048:	4413      	add	r3, r2
 800904a:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800904e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009050:	4618      	mov	r0, r3
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	bc80      	pop	{r7}
 8009058:	4770      	bx	lr

0800905a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b084      	sub	sp, #16
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	460b      	mov	r3, r1
 8009064:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009074:	78fa      	ldrb	r2, [r7, #3]
 8009076:	4611      	mov	r1, r2
 8009078:	4618      	mov	r0, r3
 800907a:	f7f8 fb49 	bl	8001710 <HAL_PCD_SetAddress>
 800907e:	4603      	mov	r3, r0
 8009080:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009082:	7bfb      	ldrb	r3, [r7, #15]
 8009084:	4618      	mov	r0, r3
 8009086:	f000 f881 	bl	800918c <USBD_Get_USB_Status>
 800908a:	4603      	mov	r3, r0
 800908c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800908e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	607a      	str	r2, [r7, #4]
 80090a2:	461a      	mov	r2, r3
 80090a4:	460b      	mov	r3, r1
 80090a6:	72fb      	strb	r3, [r7, #11]
 80090a8:	4613      	mov	r3, r2
 80090aa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80090ba:	893b      	ldrh	r3, [r7, #8]
 80090bc:	7af9      	ldrb	r1, [r7, #11]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	f7f8 fc37 	bl	8001932 <HAL_PCD_EP_Transmit>
 80090c4:	4603      	mov	r3, r0
 80090c6:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80090c8:	7dfb      	ldrb	r3, [r7, #23]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 f85e 	bl	800918c <USBD_Get_USB_Status>
 80090d0:	4603      	mov	r3, r0
 80090d2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80090d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b086      	sub	sp, #24
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	60f8      	str	r0, [r7, #12]
 80090e6:	607a      	str	r2, [r7, #4]
 80090e8:	461a      	mov	r2, r3
 80090ea:	460b      	mov	r3, r1
 80090ec:	72fb      	strb	r3, [r7, #11]
 80090ee:	4613      	mov	r3, r2
 80090f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8009100:	893b      	ldrh	r3, [r7, #8]
 8009102:	7af9      	ldrb	r1, [r7, #11]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	f7f8 fbc3 	bl	8001890 <HAL_PCD_EP_Receive>
 800910a:	4603      	mov	r3, r0
 800910c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800910e:	7dfb      	ldrb	r3, [r7, #23]
 8009110:	4618      	mov	r0, r3
 8009112:	f000 f83b 	bl	800918c <USBD_Get_USB_Status>
 8009116:	4603      	mov	r3, r0
 8009118:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800911a:	7dbb      	ldrb	r3, [r7, #22]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	4611      	mov	r1, r2
 800913a:	4618      	mov	r0, r3
 800913c:	f7f8 fbe4 	bl	8001908 <HAL_PCD_EP_GetRxCount>
 8009140:	4603      	mov	r3, r0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009154:	4b02      	ldr	r3, [pc, #8]	; (8009160 <USBD_static_malloc+0x14>)
}
 8009156:	4618      	mov	r0, r3
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	bc80      	pop	{r7}
 800915e:	4770      	bx	lr
 8009160:	20000508 	.word	0x20000508

08009164 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]

}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	bc80      	pop	{r7}
 8009174:	4770      	bx	lr

08009176 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009176:	b480      	push	{r7}
 8009178:	b083      	sub	sp, #12
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	460b      	mov	r3, r1
 8009180:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009182:	bf00      	nop
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	bc80      	pop	{r7}
 800918a:	4770      	bx	lr

0800918c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800919a:	79fb      	ldrb	r3, [r7, #7]
 800919c:	2b03      	cmp	r3, #3
 800919e:	d817      	bhi.n	80091d0 <USBD_Get_USB_Status+0x44>
 80091a0:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <USBD_Get_USB_Status+0x1c>)
 80091a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a6:	bf00      	nop
 80091a8:	080091b9 	.word	0x080091b9
 80091ac:	080091bf 	.word	0x080091bf
 80091b0:	080091c5 	.word	0x080091c5
 80091b4:	080091cb 	.word	0x080091cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	73fb      	strb	r3, [r7, #15]
    break;
 80091bc:	e00b      	b.n	80091d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091be:	2302      	movs	r3, #2
 80091c0:	73fb      	strb	r3, [r7, #15]
    break;
 80091c2:	e008      	b.n	80091d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091c4:	2301      	movs	r3, #1
 80091c6:	73fb      	strb	r3, [r7, #15]
    break;
 80091c8:	e005      	b.n	80091d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091ca:	2302      	movs	r3, #2
 80091cc:	73fb      	strb	r3, [r7, #15]
    break;
 80091ce:	e002      	b.n	80091d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091d0:	2302      	movs	r3, #2
 80091d2:	73fb      	strb	r3, [r7, #15]
    break;
 80091d4:	bf00      	nop
  }
  return usb_status;
 80091d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	bc80      	pop	{r7}
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop

080091e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	4603      	mov	r3, r0
 80091ec:	6039      	str	r1, [r7, #0]
 80091ee:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	2212      	movs	r2, #18
 80091f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091f6:	4b03      	ldr	r3, [pc, #12]	; (8009204 <USBD_FS_DeviceDescriptor+0x20>)
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bc80      	pop	{r7}
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	20000158 	.word	0x20000158

08009208 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	4603      	mov	r3, r0
 8009210:	6039      	str	r1, [r7, #0]
 8009212:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	2204      	movs	r2, #4
 8009218:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800921a:	4b03      	ldr	r3, [pc, #12]	; (8009228 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800921c:	4618      	mov	r0, r3
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	bc80      	pop	{r7}
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	2000016c 	.word	0x2000016c

0800922c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	4603      	mov	r3, r0
 8009234:	6039      	str	r1, [r7, #0]
 8009236:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009238:	79fb      	ldrb	r3, [r7, #7]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d105      	bne.n	800924a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	4907      	ldr	r1, [pc, #28]	; (8009260 <USBD_FS_ProductStrDescriptor+0x34>)
 8009242:	4808      	ldr	r0, [pc, #32]	; (8009264 <USBD_FS_ProductStrDescriptor+0x38>)
 8009244:	f7fc f9b6 	bl	80055b4 <USBD_GetString>
 8009248:	e004      	b.n	8009254 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	4904      	ldr	r1, [pc, #16]	; (8009260 <USBD_FS_ProductStrDescriptor+0x34>)
 800924e:	4805      	ldr	r0, [pc, #20]	; (8009264 <USBD_FS_ProductStrDescriptor+0x38>)
 8009250:	f7fc f9b0 	bl	80055b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009254:	4b02      	ldr	r3, [pc, #8]	; (8009260 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009256:	4618      	mov	r0, r3
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	2000161c 	.word	0x2000161c
 8009264:	0800daac 	.word	0x0800daac

08009268 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	4904      	ldr	r1, [pc, #16]	; (8009288 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009278:	4804      	ldr	r0, [pc, #16]	; (800928c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800927a:	f7fc f99b 	bl	80055b4 <USBD_GetString>
  return USBD_StrDesc;
 800927e:	4b02      	ldr	r3, [pc, #8]	; (8009288 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009280:	4618      	mov	r0, r3
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	2000161c 	.word	0x2000161c
 800928c:	0800dac4 	.word	0x0800dac4

08009290 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	4603      	mov	r3, r0
 8009298:	6039      	str	r1, [r7, #0]
 800929a:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	221a      	movs	r2, #26
 80092a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092a2:	f000 f843 	bl	800932c <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 80092a6:	4b02      	ldr	r3, [pc, #8]	; (80092b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	20000170 	.word	0x20000170

080092b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	4603      	mov	r3, r0
 80092bc:	6039      	str	r1, [r7, #0]
 80092be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092c0:	79fb      	ldrb	r3, [r7, #7]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d105      	bne.n	80092d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	4907      	ldr	r1, [pc, #28]	; (80092e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092ca:	4808      	ldr	r0, [pc, #32]	; (80092ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80092cc:	f7fc f972 	bl	80055b4 <USBD_GetString>
 80092d0:	e004      	b.n	80092dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092d2:	683a      	ldr	r2, [r7, #0]
 80092d4:	4904      	ldr	r1, [pc, #16]	; (80092e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092d6:	4805      	ldr	r0, [pc, #20]	; (80092ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80092d8:	f7fc f96c 	bl	80055b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092dc:	4b02      	ldr	r3, [pc, #8]	; (80092e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	2000161c 	.word	0x2000161c
 80092ec:	0800dad8 	.word	0x0800dad8

080092f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	6039      	str	r1, [r7, #0]
 80092fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092fc:	79fb      	ldrb	r3, [r7, #7]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d105      	bne.n	800930e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	4907      	ldr	r1, [pc, #28]	; (8009324 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009306:	4808      	ldr	r0, [pc, #32]	; (8009328 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009308:	f7fc f954 	bl	80055b4 <USBD_GetString>
 800930c:	e004      	b.n	8009318 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	4904      	ldr	r1, [pc, #16]	; (8009324 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009312:	4805      	ldr	r0, [pc, #20]	; (8009328 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009314:	f7fc f94e 	bl	80055b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009318:	4b02      	ldr	r3, [pc, #8]	; (8009324 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	2000161c 	.word	0x2000161c
 8009328:	0800dae4 	.word	0x0800dae4

0800932c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009332:	4b0f      	ldr	r3, [pc, #60]	; (8009370 <Get_SerialNum+0x44>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009338:	4b0e      	ldr	r3, [pc, #56]	; (8009374 <Get_SerialNum+0x48>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800933e:	4b0e      	ldr	r3, [pc, #56]	; (8009378 <Get_SerialNum+0x4c>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4413      	add	r3, r2
 800934a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d009      	beq.n	8009366 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009352:	2208      	movs	r2, #8
 8009354:	4909      	ldr	r1, [pc, #36]	; (800937c <Get_SerialNum+0x50>)
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f000 f814 	bl	8009384 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800935c:	2204      	movs	r2, #4
 800935e:	4908      	ldr	r1, [pc, #32]	; (8009380 <Get_SerialNum+0x54>)
 8009360:	68b8      	ldr	r0, [r7, #8]
 8009362:	f000 f80f 	bl	8009384 <IntToUnicode>
  }
}
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	1ffff7e8 	.word	0x1ffff7e8
 8009374:	1ffff7ec 	.word	0x1ffff7ec
 8009378:	1ffff7f0 	.word	0x1ffff7f0
 800937c:	20000172 	.word	0x20000172
 8009380:	20000182 	.word	0x20000182

08009384 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009384:	b480      	push	{r7}
 8009386:	b087      	sub	sp, #28
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	4613      	mov	r3, r2
 8009390:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009392:	2300      	movs	r3, #0
 8009394:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009396:	2300      	movs	r3, #0
 8009398:	75fb      	strb	r3, [r7, #23]
 800939a:	e027      	b.n	80093ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	0f1b      	lsrs	r3, r3, #28
 80093a0:	2b09      	cmp	r3, #9
 80093a2:	d80b      	bhi.n	80093bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	0f1b      	lsrs	r3, r3, #28
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	7dfb      	ldrb	r3, [r7, #23]
 80093ac:	005b      	lsls	r3, r3, #1
 80093ae:	4619      	mov	r1, r3
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	440b      	add	r3, r1
 80093b4:	3230      	adds	r2, #48	; 0x30
 80093b6:	b2d2      	uxtb	r2, r2
 80093b8:	701a      	strb	r2, [r3, #0]
 80093ba:	e00a      	b.n	80093d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	0f1b      	lsrs	r3, r3, #28
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	7dfb      	ldrb	r3, [r7, #23]
 80093c4:	005b      	lsls	r3, r3, #1
 80093c6:	4619      	mov	r1, r3
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	440b      	add	r3, r1
 80093cc:	3237      	adds	r2, #55	; 0x37
 80093ce:	b2d2      	uxtb	r2, r2
 80093d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	011b      	lsls	r3, r3, #4
 80093d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093d8:	7dfb      	ldrb	r3, [r7, #23]
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	3301      	adds	r3, #1
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	4413      	add	r3, r2
 80093e2:	2200      	movs	r2, #0
 80093e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
 80093e8:	3301      	adds	r3, #1
 80093ea:	75fb      	strb	r3, [r7, #23]
 80093ec:	7dfa      	ldrb	r2, [r7, #23]
 80093ee:	79fb      	ldrb	r3, [r7, #7]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d3d3      	bcc.n	800939c <IntToUnicode+0x18>
  }
}
 80093f4:	bf00      	nop
 80093f6:	371c      	adds	r7, #28
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bc80      	pop	{r7}
 80093fc:	4770      	bx	lr
	...

08009400 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8009400:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8009402:	e003      	b.n	800940c <LoopCopyDataInit>

08009404 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8009404:	4b0b      	ldr	r3, [pc, #44]	; (8009434 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8009406:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8009408:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800940a:	3104      	adds	r1, #4

0800940c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800940c:	480a      	ldr	r0, [pc, #40]	; (8009438 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800940e:	4b0b      	ldr	r3, [pc, #44]	; (800943c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8009410:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8009412:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8009414:	d3f6      	bcc.n	8009404 <CopyDataInit>
  ldr r2, =_sbss
 8009416:	4a0a      	ldr	r2, [pc, #40]	; (8009440 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8009418:	e002      	b.n	8009420 <LoopFillZerobss>

0800941a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800941a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800941c:	f842 3b04 	str.w	r3, [r2], #4

08009420 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8009420:	4b08      	ldr	r3, [pc, #32]	; (8009444 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8009422:	429a      	cmp	r2, r3
  bcc FillZerobss
 8009424:	d3f9      	bcc.n	800941a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009426:	f7ff fab7 	bl	8008998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800942a:	f000 f8df 	bl	80095ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800942e:	f7fe ff31 	bl	8008294 <main>
  bx lr
 8009432:	4770      	bx	lr
  ldr r3, =_sidata
 8009434:	0800de38 	.word	0x0800de38
  ldr r0, =_sdata
 8009438:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800943c:	2000035c 	.word	0x2000035c
  ldr r2, =_sbss
 8009440:	2000035c 	.word	0x2000035c
  ldr r3, = _ebss
 8009444:	20001820 	.word	0x20001820

08009448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009448:	e7fe      	b.n	8009448 <ADC1_2_IRQHandler>
	...

0800944c <__errno>:
 800944c:	4b01      	ldr	r3, [pc, #4]	; (8009454 <__errno+0x8>)
 800944e:	6818      	ldr	r0, [r3, #0]
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	2000018c 	.word	0x2000018c

08009458 <std>:
 8009458:	2300      	movs	r3, #0
 800945a:	b510      	push	{r4, lr}
 800945c:	4604      	mov	r4, r0
 800945e:	e9c0 3300 	strd	r3, r3, [r0]
 8009462:	6083      	str	r3, [r0, #8]
 8009464:	8181      	strh	r1, [r0, #12]
 8009466:	6643      	str	r3, [r0, #100]	; 0x64
 8009468:	81c2      	strh	r2, [r0, #14]
 800946a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800946e:	6183      	str	r3, [r0, #24]
 8009470:	4619      	mov	r1, r3
 8009472:	2208      	movs	r2, #8
 8009474:	305c      	adds	r0, #92	; 0x5c
 8009476:	f000 f8f8 	bl	800966a <memset>
 800947a:	4b05      	ldr	r3, [pc, #20]	; (8009490 <std+0x38>)
 800947c:	6224      	str	r4, [r4, #32]
 800947e:	6263      	str	r3, [r4, #36]	; 0x24
 8009480:	4b04      	ldr	r3, [pc, #16]	; (8009494 <std+0x3c>)
 8009482:	62a3      	str	r3, [r4, #40]	; 0x28
 8009484:	4b04      	ldr	r3, [pc, #16]	; (8009498 <std+0x40>)
 8009486:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009488:	4b04      	ldr	r3, [pc, #16]	; (800949c <std+0x44>)
 800948a:	6323      	str	r3, [r4, #48]	; 0x30
 800948c:	bd10      	pop	{r4, pc}
 800948e:	bf00      	nop
 8009490:	0800a595 	.word	0x0800a595
 8009494:	0800a5b7 	.word	0x0800a5b7
 8009498:	0800a5ef 	.word	0x0800a5ef
 800949c:	0800a613 	.word	0x0800a613

080094a0 <_cleanup_r>:
 80094a0:	4901      	ldr	r1, [pc, #4]	; (80094a8 <_cleanup_r+0x8>)
 80094a2:	f000 b885 	b.w	80095b0 <_fwalk_reent>
 80094a6:	bf00      	nop
 80094a8:	0800c175 	.word	0x0800c175

080094ac <__sfmoreglue>:
 80094ac:	b570      	push	{r4, r5, r6, lr}
 80094ae:	2568      	movs	r5, #104	; 0x68
 80094b0:	1e4a      	subs	r2, r1, #1
 80094b2:	4355      	muls	r5, r2
 80094b4:	460e      	mov	r6, r1
 80094b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094ba:	f000 f92b 	bl	8009714 <_malloc_r>
 80094be:	4604      	mov	r4, r0
 80094c0:	b140      	cbz	r0, 80094d4 <__sfmoreglue+0x28>
 80094c2:	2100      	movs	r1, #0
 80094c4:	e9c0 1600 	strd	r1, r6, [r0]
 80094c8:	300c      	adds	r0, #12
 80094ca:	60a0      	str	r0, [r4, #8]
 80094cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094d0:	f000 f8cb 	bl	800966a <memset>
 80094d4:	4620      	mov	r0, r4
 80094d6:	bd70      	pop	{r4, r5, r6, pc}

080094d8 <__sinit>:
 80094d8:	6983      	ldr	r3, [r0, #24]
 80094da:	b510      	push	{r4, lr}
 80094dc:	4604      	mov	r4, r0
 80094de:	bb33      	cbnz	r3, 800952e <__sinit+0x56>
 80094e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80094e4:	6503      	str	r3, [r0, #80]	; 0x50
 80094e6:	4b12      	ldr	r3, [pc, #72]	; (8009530 <__sinit+0x58>)
 80094e8:	4a12      	ldr	r2, [pc, #72]	; (8009534 <__sinit+0x5c>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6282      	str	r2, [r0, #40]	; 0x28
 80094ee:	4298      	cmp	r0, r3
 80094f0:	bf04      	itt	eq
 80094f2:	2301      	moveq	r3, #1
 80094f4:	6183      	streq	r3, [r0, #24]
 80094f6:	f000 f81f 	bl	8009538 <__sfp>
 80094fa:	6060      	str	r0, [r4, #4]
 80094fc:	4620      	mov	r0, r4
 80094fe:	f000 f81b 	bl	8009538 <__sfp>
 8009502:	60a0      	str	r0, [r4, #8]
 8009504:	4620      	mov	r0, r4
 8009506:	f000 f817 	bl	8009538 <__sfp>
 800950a:	2200      	movs	r2, #0
 800950c:	60e0      	str	r0, [r4, #12]
 800950e:	2104      	movs	r1, #4
 8009510:	6860      	ldr	r0, [r4, #4]
 8009512:	f7ff ffa1 	bl	8009458 <std>
 8009516:	2201      	movs	r2, #1
 8009518:	2109      	movs	r1, #9
 800951a:	68a0      	ldr	r0, [r4, #8]
 800951c:	f7ff ff9c 	bl	8009458 <std>
 8009520:	2202      	movs	r2, #2
 8009522:	2112      	movs	r1, #18
 8009524:	68e0      	ldr	r0, [r4, #12]
 8009526:	f7ff ff97 	bl	8009458 <std>
 800952a:	2301      	movs	r3, #1
 800952c:	61a3      	str	r3, [r4, #24]
 800952e:	bd10      	pop	{r4, pc}
 8009530:	0800db78 	.word	0x0800db78
 8009534:	080094a1 	.word	0x080094a1

08009538 <__sfp>:
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953a:	4b1b      	ldr	r3, [pc, #108]	; (80095a8 <__sfp+0x70>)
 800953c:	4607      	mov	r7, r0
 800953e:	681e      	ldr	r6, [r3, #0]
 8009540:	69b3      	ldr	r3, [r6, #24]
 8009542:	b913      	cbnz	r3, 800954a <__sfp+0x12>
 8009544:	4630      	mov	r0, r6
 8009546:	f7ff ffc7 	bl	80094d8 <__sinit>
 800954a:	3648      	adds	r6, #72	; 0x48
 800954c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009550:	3b01      	subs	r3, #1
 8009552:	d503      	bpl.n	800955c <__sfp+0x24>
 8009554:	6833      	ldr	r3, [r6, #0]
 8009556:	b133      	cbz	r3, 8009566 <__sfp+0x2e>
 8009558:	6836      	ldr	r6, [r6, #0]
 800955a:	e7f7      	b.n	800954c <__sfp+0x14>
 800955c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009560:	b16d      	cbz	r5, 800957e <__sfp+0x46>
 8009562:	3468      	adds	r4, #104	; 0x68
 8009564:	e7f4      	b.n	8009550 <__sfp+0x18>
 8009566:	2104      	movs	r1, #4
 8009568:	4638      	mov	r0, r7
 800956a:	f7ff ff9f 	bl	80094ac <__sfmoreglue>
 800956e:	6030      	str	r0, [r6, #0]
 8009570:	2800      	cmp	r0, #0
 8009572:	d1f1      	bne.n	8009558 <__sfp+0x20>
 8009574:	230c      	movs	r3, #12
 8009576:	4604      	mov	r4, r0
 8009578:	603b      	str	r3, [r7, #0]
 800957a:	4620      	mov	r0, r4
 800957c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800957e:	4b0b      	ldr	r3, [pc, #44]	; (80095ac <__sfp+0x74>)
 8009580:	6665      	str	r5, [r4, #100]	; 0x64
 8009582:	e9c4 5500 	strd	r5, r5, [r4]
 8009586:	60a5      	str	r5, [r4, #8]
 8009588:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800958c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009590:	2208      	movs	r2, #8
 8009592:	4629      	mov	r1, r5
 8009594:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009598:	f000 f867 	bl	800966a <memset>
 800959c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095a4:	e7e9      	b.n	800957a <__sfp+0x42>
 80095a6:	bf00      	nop
 80095a8:	0800db78 	.word	0x0800db78
 80095ac:	ffff0001 	.word	0xffff0001

080095b0 <_fwalk_reent>:
 80095b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b4:	4680      	mov	r8, r0
 80095b6:	4689      	mov	r9, r1
 80095b8:	2600      	movs	r6, #0
 80095ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095be:	b914      	cbnz	r4, 80095c6 <_fwalk_reent+0x16>
 80095c0:	4630      	mov	r0, r6
 80095c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80095ca:	3f01      	subs	r7, #1
 80095cc:	d501      	bpl.n	80095d2 <_fwalk_reent+0x22>
 80095ce:	6824      	ldr	r4, [r4, #0]
 80095d0:	e7f5      	b.n	80095be <_fwalk_reent+0xe>
 80095d2:	89ab      	ldrh	r3, [r5, #12]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d907      	bls.n	80095e8 <_fwalk_reent+0x38>
 80095d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095dc:	3301      	adds	r3, #1
 80095de:	d003      	beq.n	80095e8 <_fwalk_reent+0x38>
 80095e0:	4629      	mov	r1, r5
 80095e2:	4640      	mov	r0, r8
 80095e4:	47c8      	blx	r9
 80095e6:	4306      	orrs	r6, r0
 80095e8:	3568      	adds	r5, #104	; 0x68
 80095ea:	e7ee      	b.n	80095ca <_fwalk_reent+0x1a>

080095ec <__libc_init_array>:
 80095ec:	b570      	push	{r4, r5, r6, lr}
 80095ee:	2500      	movs	r5, #0
 80095f0:	4e0c      	ldr	r6, [pc, #48]	; (8009624 <__libc_init_array+0x38>)
 80095f2:	4c0d      	ldr	r4, [pc, #52]	; (8009628 <__libc_init_array+0x3c>)
 80095f4:	1ba4      	subs	r4, r4, r6
 80095f6:	10a4      	asrs	r4, r4, #2
 80095f8:	42a5      	cmp	r5, r4
 80095fa:	d109      	bne.n	8009610 <__libc_init_array+0x24>
 80095fc:	f004 f9e0 	bl	800d9c0 <_init>
 8009600:	2500      	movs	r5, #0
 8009602:	4e0a      	ldr	r6, [pc, #40]	; (800962c <__libc_init_array+0x40>)
 8009604:	4c0a      	ldr	r4, [pc, #40]	; (8009630 <__libc_init_array+0x44>)
 8009606:	1ba4      	subs	r4, r4, r6
 8009608:	10a4      	asrs	r4, r4, #2
 800960a:	42a5      	cmp	r5, r4
 800960c:	d105      	bne.n	800961a <__libc_init_array+0x2e>
 800960e:	bd70      	pop	{r4, r5, r6, pc}
 8009610:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009614:	4798      	blx	r3
 8009616:	3501      	adds	r5, #1
 8009618:	e7ee      	b.n	80095f8 <__libc_init_array+0xc>
 800961a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800961e:	4798      	blx	r3
 8009620:	3501      	adds	r5, #1
 8009622:	e7f2      	b.n	800960a <__libc_init_array+0x1e>
 8009624:	0800de30 	.word	0x0800de30
 8009628:	0800de30 	.word	0x0800de30
 800962c:	0800de30 	.word	0x0800de30
 8009630:	0800de34 	.word	0x0800de34

08009634 <malloc>:
 8009634:	4b02      	ldr	r3, [pc, #8]	; (8009640 <malloc+0xc>)
 8009636:	4601      	mov	r1, r0
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	f000 b86b 	b.w	8009714 <_malloc_r>
 800963e:	bf00      	nop
 8009640:	2000018c 	.word	0x2000018c

08009644 <free>:
 8009644:	4b02      	ldr	r3, [pc, #8]	; (8009650 <free+0xc>)
 8009646:	4601      	mov	r1, r0
 8009648:	6818      	ldr	r0, [r3, #0]
 800964a:	f000 b817 	b.w	800967c <_free_r>
 800964e:	bf00      	nop
 8009650:	2000018c 	.word	0x2000018c

08009654 <memcpy>:
 8009654:	b510      	push	{r4, lr}
 8009656:	1e43      	subs	r3, r0, #1
 8009658:	440a      	add	r2, r1
 800965a:	4291      	cmp	r1, r2
 800965c:	d100      	bne.n	8009660 <memcpy+0xc>
 800965e:	bd10      	pop	{r4, pc}
 8009660:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009668:	e7f7      	b.n	800965a <memcpy+0x6>

0800966a <memset>:
 800966a:	4603      	mov	r3, r0
 800966c:	4402      	add	r2, r0
 800966e:	4293      	cmp	r3, r2
 8009670:	d100      	bne.n	8009674 <memset+0xa>
 8009672:	4770      	bx	lr
 8009674:	f803 1b01 	strb.w	r1, [r3], #1
 8009678:	e7f9      	b.n	800966e <memset+0x4>
	...

0800967c <_free_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4605      	mov	r5, r0
 8009680:	2900      	cmp	r1, #0
 8009682:	d043      	beq.n	800970c <_free_r+0x90>
 8009684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009688:	1f0c      	subs	r4, r1, #4
 800968a:	2b00      	cmp	r3, #0
 800968c:	bfb8      	it	lt
 800968e:	18e4      	addlt	r4, r4, r3
 8009690:	f003 f908 	bl	800c8a4 <__malloc_lock>
 8009694:	4a1e      	ldr	r2, [pc, #120]	; (8009710 <_free_r+0x94>)
 8009696:	6813      	ldr	r3, [r2, #0]
 8009698:	4610      	mov	r0, r2
 800969a:	b933      	cbnz	r3, 80096aa <_free_r+0x2e>
 800969c:	6063      	str	r3, [r4, #4]
 800969e:	6014      	str	r4, [r2, #0]
 80096a0:	4628      	mov	r0, r5
 80096a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096a6:	f003 b8fe 	b.w	800c8a6 <__malloc_unlock>
 80096aa:	42a3      	cmp	r3, r4
 80096ac:	d90b      	bls.n	80096c6 <_free_r+0x4a>
 80096ae:	6821      	ldr	r1, [r4, #0]
 80096b0:	1862      	adds	r2, r4, r1
 80096b2:	4293      	cmp	r3, r2
 80096b4:	bf01      	itttt	eq
 80096b6:	681a      	ldreq	r2, [r3, #0]
 80096b8:	685b      	ldreq	r3, [r3, #4]
 80096ba:	1852      	addeq	r2, r2, r1
 80096bc:	6022      	streq	r2, [r4, #0]
 80096be:	6063      	str	r3, [r4, #4]
 80096c0:	6004      	str	r4, [r0, #0]
 80096c2:	e7ed      	b.n	80096a0 <_free_r+0x24>
 80096c4:	4613      	mov	r3, r2
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	b10a      	cbz	r2, 80096ce <_free_r+0x52>
 80096ca:	42a2      	cmp	r2, r4
 80096cc:	d9fa      	bls.n	80096c4 <_free_r+0x48>
 80096ce:	6819      	ldr	r1, [r3, #0]
 80096d0:	1858      	adds	r0, r3, r1
 80096d2:	42a0      	cmp	r0, r4
 80096d4:	d10b      	bne.n	80096ee <_free_r+0x72>
 80096d6:	6820      	ldr	r0, [r4, #0]
 80096d8:	4401      	add	r1, r0
 80096da:	1858      	adds	r0, r3, r1
 80096dc:	4282      	cmp	r2, r0
 80096de:	6019      	str	r1, [r3, #0]
 80096e0:	d1de      	bne.n	80096a0 <_free_r+0x24>
 80096e2:	6810      	ldr	r0, [r2, #0]
 80096e4:	6852      	ldr	r2, [r2, #4]
 80096e6:	4401      	add	r1, r0
 80096e8:	6019      	str	r1, [r3, #0]
 80096ea:	605a      	str	r2, [r3, #4]
 80096ec:	e7d8      	b.n	80096a0 <_free_r+0x24>
 80096ee:	d902      	bls.n	80096f6 <_free_r+0x7a>
 80096f0:	230c      	movs	r3, #12
 80096f2:	602b      	str	r3, [r5, #0]
 80096f4:	e7d4      	b.n	80096a0 <_free_r+0x24>
 80096f6:	6820      	ldr	r0, [r4, #0]
 80096f8:	1821      	adds	r1, r4, r0
 80096fa:	428a      	cmp	r2, r1
 80096fc:	bf01      	itttt	eq
 80096fe:	6811      	ldreq	r1, [r2, #0]
 8009700:	6852      	ldreq	r2, [r2, #4]
 8009702:	1809      	addeq	r1, r1, r0
 8009704:	6021      	streq	r1, [r4, #0]
 8009706:	6062      	str	r2, [r4, #4]
 8009708:	605c      	str	r4, [r3, #4]
 800970a:	e7c9      	b.n	80096a0 <_free_r+0x24>
 800970c:	bd38      	pop	{r3, r4, r5, pc}
 800970e:	bf00      	nop
 8009710:	20000728 	.word	0x20000728

08009714 <_malloc_r>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	1ccd      	adds	r5, r1, #3
 8009718:	f025 0503 	bic.w	r5, r5, #3
 800971c:	3508      	adds	r5, #8
 800971e:	2d0c      	cmp	r5, #12
 8009720:	bf38      	it	cc
 8009722:	250c      	movcc	r5, #12
 8009724:	2d00      	cmp	r5, #0
 8009726:	4606      	mov	r6, r0
 8009728:	db01      	blt.n	800972e <_malloc_r+0x1a>
 800972a:	42a9      	cmp	r1, r5
 800972c:	d903      	bls.n	8009736 <_malloc_r+0x22>
 800972e:	230c      	movs	r3, #12
 8009730:	6033      	str	r3, [r6, #0]
 8009732:	2000      	movs	r0, #0
 8009734:	bd70      	pop	{r4, r5, r6, pc}
 8009736:	f003 f8b5 	bl	800c8a4 <__malloc_lock>
 800973a:	4a21      	ldr	r2, [pc, #132]	; (80097c0 <_malloc_r+0xac>)
 800973c:	6814      	ldr	r4, [r2, #0]
 800973e:	4621      	mov	r1, r4
 8009740:	b991      	cbnz	r1, 8009768 <_malloc_r+0x54>
 8009742:	4c20      	ldr	r4, [pc, #128]	; (80097c4 <_malloc_r+0xb0>)
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	b91b      	cbnz	r3, 8009750 <_malloc_r+0x3c>
 8009748:	4630      	mov	r0, r6
 800974a:	f000 feef 	bl	800a52c <_sbrk_r>
 800974e:	6020      	str	r0, [r4, #0]
 8009750:	4629      	mov	r1, r5
 8009752:	4630      	mov	r0, r6
 8009754:	f000 feea 	bl	800a52c <_sbrk_r>
 8009758:	1c43      	adds	r3, r0, #1
 800975a:	d124      	bne.n	80097a6 <_malloc_r+0x92>
 800975c:	230c      	movs	r3, #12
 800975e:	4630      	mov	r0, r6
 8009760:	6033      	str	r3, [r6, #0]
 8009762:	f003 f8a0 	bl	800c8a6 <__malloc_unlock>
 8009766:	e7e4      	b.n	8009732 <_malloc_r+0x1e>
 8009768:	680b      	ldr	r3, [r1, #0]
 800976a:	1b5b      	subs	r3, r3, r5
 800976c:	d418      	bmi.n	80097a0 <_malloc_r+0x8c>
 800976e:	2b0b      	cmp	r3, #11
 8009770:	d90f      	bls.n	8009792 <_malloc_r+0x7e>
 8009772:	600b      	str	r3, [r1, #0]
 8009774:	18cc      	adds	r4, r1, r3
 8009776:	50cd      	str	r5, [r1, r3]
 8009778:	4630      	mov	r0, r6
 800977a:	f003 f894 	bl	800c8a6 <__malloc_unlock>
 800977e:	f104 000b 	add.w	r0, r4, #11
 8009782:	1d23      	adds	r3, r4, #4
 8009784:	f020 0007 	bic.w	r0, r0, #7
 8009788:	1ac3      	subs	r3, r0, r3
 800978a:	d0d3      	beq.n	8009734 <_malloc_r+0x20>
 800978c:	425a      	negs	r2, r3
 800978e:	50e2      	str	r2, [r4, r3]
 8009790:	e7d0      	b.n	8009734 <_malloc_r+0x20>
 8009792:	684b      	ldr	r3, [r1, #4]
 8009794:	428c      	cmp	r4, r1
 8009796:	bf16      	itet	ne
 8009798:	6063      	strne	r3, [r4, #4]
 800979a:	6013      	streq	r3, [r2, #0]
 800979c:	460c      	movne	r4, r1
 800979e:	e7eb      	b.n	8009778 <_malloc_r+0x64>
 80097a0:	460c      	mov	r4, r1
 80097a2:	6849      	ldr	r1, [r1, #4]
 80097a4:	e7cc      	b.n	8009740 <_malloc_r+0x2c>
 80097a6:	1cc4      	adds	r4, r0, #3
 80097a8:	f024 0403 	bic.w	r4, r4, #3
 80097ac:	42a0      	cmp	r0, r4
 80097ae:	d005      	beq.n	80097bc <_malloc_r+0xa8>
 80097b0:	1a21      	subs	r1, r4, r0
 80097b2:	4630      	mov	r0, r6
 80097b4:	f000 feba 	bl	800a52c <_sbrk_r>
 80097b8:	3001      	adds	r0, #1
 80097ba:	d0cf      	beq.n	800975c <_malloc_r+0x48>
 80097bc:	6025      	str	r5, [r4, #0]
 80097be:	e7db      	b.n	8009778 <_malloc_r+0x64>
 80097c0:	20000728 	.word	0x20000728
 80097c4:	2000072c 	.word	0x2000072c

080097c8 <__cvt>:
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097ce:	461e      	mov	r6, r3
 80097d0:	bfbb      	ittet	lt
 80097d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80097d6:	461e      	movlt	r6, r3
 80097d8:	2300      	movge	r3, #0
 80097da:	232d      	movlt	r3, #45	; 0x2d
 80097dc:	b088      	sub	sp, #32
 80097de:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80097e0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80097e4:	f027 0720 	bic.w	r7, r7, #32
 80097e8:	2f46      	cmp	r7, #70	; 0x46
 80097ea:	4614      	mov	r4, r2
 80097ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80097ee:	700b      	strb	r3, [r1, #0]
 80097f0:	d004      	beq.n	80097fc <__cvt+0x34>
 80097f2:	2f45      	cmp	r7, #69	; 0x45
 80097f4:	d100      	bne.n	80097f8 <__cvt+0x30>
 80097f6:	3501      	adds	r5, #1
 80097f8:	2302      	movs	r3, #2
 80097fa:	e000      	b.n	80097fe <__cvt+0x36>
 80097fc:	2303      	movs	r3, #3
 80097fe:	aa07      	add	r2, sp, #28
 8009800:	9204      	str	r2, [sp, #16]
 8009802:	aa06      	add	r2, sp, #24
 8009804:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009808:	e9cd 3500 	strd	r3, r5, [sp]
 800980c:	4622      	mov	r2, r4
 800980e:	4633      	mov	r3, r6
 8009810:	f001 fe76 	bl	800b500 <_dtoa_r>
 8009814:	2f47      	cmp	r7, #71	; 0x47
 8009816:	4680      	mov	r8, r0
 8009818:	d102      	bne.n	8009820 <__cvt+0x58>
 800981a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800981c:	07db      	lsls	r3, r3, #31
 800981e:	d526      	bpl.n	800986e <__cvt+0xa6>
 8009820:	2f46      	cmp	r7, #70	; 0x46
 8009822:	eb08 0905 	add.w	r9, r8, r5
 8009826:	d111      	bne.n	800984c <__cvt+0x84>
 8009828:	f898 3000 	ldrb.w	r3, [r8]
 800982c:	2b30      	cmp	r3, #48	; 0x30
 800982e:	d10a      	bne.n	8009846 <__cvt+0x7e>
 8009830:	2200      	movs	r2, #0
 8009832:	2300      	movs	r3, #0
 8009834:	4620      	mov	r0, r4
 8009836:	4631      	mov	r1, r6
 8009838:	f7f7 f8b6 	bl	80009a8 <__aeabi_dcmpeq>
 800983c:	b918      	cbnz	r0, 8009846 <__cvt+0x7e>
 800983e:	f1c5 0501 	rsb	r5, r5, #1
 8009842:	f8ca 5000 	str.w	r5, [sl]
 8009846:	f8da 3000 	ldr.w	r3, [sl]
 800984a:	4499      	add	r9, r3
 800984c:	2200      	movs	r2, #0
 800984e:	2300      	movs	r3, #0
 8009850:	4620      	mov	r0, r4
 8009852:	4631      	mov	r1, r6
 8009854:	f7f7 f8a8 	bl	80009a8 <__aeabi_dcmpeq>
 8009858:	b938      	cbnz	r0, 800986a <__cvt+0xa2>
 800985a:	2230      	movs	r2, #48	; 0x30
 800985c:	9b07      	ldr	r3, [sp, #28]
 800985e:	454b      	cmp	r3, r9
 8009860:	d205      	bcs.n	800986e <__cvt+0xa6>
 8009862:	1c59      	adds	r1, r3, #1
 8009864:	9107      	str	r1, [sp, #28]
 8009866:	701a      	strb	r2, [r3, #0]
 8009868:	e7f8      	b.n	800985c <__cvt+0x94>
 800986a:	f8cd 901c 	str.w	r9, [sp, #28]
 800986e:	4640      	mov	r0, r8
 8009870:	9b07      	ldr	r3, [sp, #28]
 8009872:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009874:	eba3 0308 	sub.w	r3, r3, r8
 8009878:	6013      	str	r3, [r2, #0]
 800987a:	b008      	add	sp, #32
 800987c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009880 <__exponent>:
 8009880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009882:	2900      	cmp	r1, #0
 8009884:	bfb4      	ite	lt
 8009886:	232d      	movlt	r3, #45	; 0x2d
 8009888:	232b      	movge	r3, #43	; 0x2b
 800988a:	4604      	mov	r4, r0
 800988c:	bfb8      	it	lt
 800988e:	4249      	neglt	r1, r1
 8009890:	2909      	cmp	r1, #9
 8009892:	f804 2b02 	strb.w	r2, [r4], #2
 8009896:	7043      	strb	r3, [r0, #1]
 8009898:	dd21      	ble.n	80098de <__exponent+0x5e>
 800989a:	f10d 0307 	add.w	r3, sp, #7
 800989e:	461f      	mov	r7, r3
 80098a0:	260a      	movs	r6, #10
 80098a2:	fb91 f5f6 	sdiv	r5, r1, r6
 80098a6:	fb06 1115 	mls	r1, r6, r5, r1
 80098aa:	2d09      	cmp	r5, #9
 80098ac:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80098b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80098b4:	f103 32ff 	add.w	r2, r3, #4294967295
 80098b8:	4629      	mov	r1, r5
 80098ba:	dc09      	bgt.n	80098d0 <__exponent+0x50>
 80098bc:	3130      	adds	r1, #48	; 0x30
 80098be:	3b02      	subs	r3, #2
 80098c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80098c4:	42bb      	cmp	r3, r7
 80098c6:	4622      	mov	r2, r4
 80098c8:	d304      	bcc.n	80098d4 <__exponent+0x54>
 80098ca:	1a10      	subs	r0, r2, r0
 80098cc:	b003      	add	sp, #12
 80098ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098d0:	4613      	mov	r3, r2
 80098d2:	e7e6      	b.n	80098a2 <__exponent+0x22>
 80098d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098d8:	f804 2b01 	strb.w	r2, [r4], #1
 80098dc:	e7f2      	b.n	80098c4 <__exponent+0x44>
 80098de:	2330      	movs	r3, #48	; 0x30
 80098e0:	4419      	add	r1, r3
 80098e2:	7083      	strb	r3, [r0, #2]
 80098e4:	1d02      	adds	r2, r0, #4
 80098e6:	70c1      	strb	r1, [r0, #3]
 80098e8:	e7ef      	b.n	80098ca <__exponent+0x4a>
	...

080098ec <_printf_float>:
 80098ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f0:	b091      	sub	sp, #68	; 0x44
 80098f2:	460c      	mov	r4, r1
 80098f4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80098f6:	4693      	mov	fp, r2
 80098f8:	461e      	mov	r6, r3
 80098fa:	4605      	mov	r5, r0
 80098fc:	f002 ff92 	bl	800c824 <_localeconv_r>
 8009900:	6803      	ldr	r3, [r0, #0]
 8009902:	4618      	mov	r0, r3
 8009904:	9309      	str	r3, [sp, #36]	; 0x24
 8009906:	f7f6 fc23 	bl	8000150 <strlen>
 800990a:	2300      	movs	r3, #0
 800990c:	930e      	str	r3, [sp, #56]	; 0x38
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	900a      	str	r0, [sp, #40]	; 0x28
 8009912:	3307      	adds	r3, #7
 8009914:	f023 0307 	bic.w	r3, r3, #7
 8009918:	f103 0208 	add.w	r2, r3, #8
 800991c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8009920:	f8d4 a000 	ldr.w	sl, [r4]
 8009924:	603a      	str	r2, [r7, #0]
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800992e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8009932:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009936:	930b      	str	r3, [sp, #44]	; 0x2c
 8009938:	f04f 32ff 	mov.w	r2, #4294967295
 800993c:	4ba6      	ldr	r3, [pc, #664]	; (8009bd8 <_printf_float+0x2ec>)
 800993e:	4638      	mov	r0, r7
 8009940:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009942:	f7f7 f863 	bl	8000a0c <__aeabi_dcmpun>
 8009946:	bb68      	cbnz	r0, 80099a4 <_printf_float+0xb8>
 8009948:	f04f 32ff 	mov.w	r2, #4294967295
 800994c:	4ba2      	ldr	r3, [pc, #648]	; (8009bd8 <_printf_float+0x2ec>)
 800994e:	4638      	mov	r0, r7
 8009950:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009952:	f7f7 f83d 	bl	80009d0 <__aeabi_dcmple>
 8009956:	bb28      	cbnz	r0, 80099a4 <_printf_float+0xb8>
 8009958:	2200      	movs	r2, #0
 800995a:	2300      	movs	r3, #0
 800995c:	4638      	mov	r0, r7
 800995e:	4649      	mov	r1, r9
 8009960:	f7f7 f82c 	bl	80009bc <__aeabi_dcmplt>
 8009964:	b110      	cbz	r0, 800996c <_printf_float+0x80>
 8009966:	232d      	movs	r3, #45	; 0x2d
 8009968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800996c:	4f9b      	ldr	r7, [pc, #620]	; (8009bdc <_printf_float+0x2f0>)
 800996e:	4b9c      	ldr	r3, [pc, #624]	; (8009be0 <_printf_float+0x2f4>)
 8009970:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009974:	bf98      	it	ls
 8009976:	461f      	movls	r7, r3
 8009978:	2303      	movs	r3, #3
 800997a:	f04f 0900 	mov.w	r9, #0
 800997e:	6123      	str	r3, [r4, #16]
 8009980:	f02a 0304 	bic.w	r3, sl, #4
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	9600      	str	r6, [sp, #0]
 8009988:	465b      	mov	r3, fp
 800998a:	aa0f      	add	r2, sp, #60	; 0x3c
 800998c:	4621      	mov	r1, r4
 800998e:	4628      	mov	r0, r5
 8009990:	f000 f9e2 	bl	8009d58 <_printf_common>
 8009994:	3001      	adds	r0, #1
 8009996:	f040 8090 	bne.w	8009aba <_printf_float+0x1ce>
 800999a:	f04f 30ff 	mov.w	r0, #4294967295
 800999e:	b011      	add	sp, #68	; 0x44
 80099a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a4:	463a      	mov	r2, r7
 80099a6:	464b      	mov	r3, r9
 80099a8:	4638      	mov	r0, r7
 80099aa:	4649      	mov	r1, r9
 80099ac:	f7f7 f82e 	bl	8000a0c <__aeabi_dcmpun>
 80099b0:	b110      	cbz	r0, 80099b8 <_printf_float+0xcc>
 80099b2:	4f8c      	ldr	r7, [pc, #560]	; (8009be4 <_printf_float+0x2f8>)
 80099b4:	4b8c      	ldr	r3, [pc, #560]	; (8009be8 <_printf_float+0x2fc>)
 80099b6:	e7db      	b.n	8009970 <_printf_float+0x84>
 80099b8:	6863      	ldr	r3, [r4, #4]
 80099ba:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80099be:	1c59      	adds	r1, r3, #1
 80099c0:	a80d      	add	r0, sp, #52	; 0x34
 80099c2:	a90e      	add	r1, sp, #56	; 0x38
 80099c4:	d140      	bne.n	8009a48 <_printf_float+0x15c>
 80099c6:	2306      	movs	r3, #6
 80099c8:	6063      	str	r3, [r4, #4]
 80099ca:	f04f 0c00 	mov.w	ip, #0
 80099ce:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80099d2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80099d6:	6863      	ldr	r3, [r4, #4]
 80099d8:	6022      	str	r2, [r4, #0]
 80099da:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	463a      	mov	r2, r7
 80099e2:	464b      	mov	r3, r9
 80099e4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80099e8:	4628      	mov	r0, r5
 80099ea:	f7ff feed 	bl	80097c8 <__cvt>
 80099ee:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80099f2:	2b47      	cmp	r3, #71	; 0x47
 80099f4:	4607      	mov	r7, r0
 80099f6:	d109      	bne.n	8009a0c <_printf_float+0x120>
 80099f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099fa:	1cd8      	adds	r0, r3, #3
 80099fc:	db02      	blt.n	8009a04 <_printf_float+0x118>
 80099fe:	6862      	ldr	r2, [r4, #4]
 8009a00:	4293      	cmp	r3, r2
 8009a02:	dd47      	ble.n	8009a94 <_printf_float+0x1a8>
 8009a04:	f1a8 0802 	sub.w	r8, r8, #2
 8009a08:	fa5f f888 	uxtb.w	r8, r8
 8009a0c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009a10:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a12:	d824      	bhi.n	8009a5e <_printf_float+0x172>
 8009a14:	3901      	subs	r1, #1
 8009a16:	4642      	mov	r2, r8
 8009a18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a1c:	910d      	str	r1, [sp, #52]	; 0x34
 8009a1e:	f7ff ff2f 	bl	8009880 <__exponent>
 8009a22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a24:	4681      	mov	r9, r0
 8009a26:	1813      	adds	r3, r2, r0
 8009a28:	2a01      	cmp	r2, #1
 8009a2a:	6123      	str	r3, [r4, #16]
 8009a2c:	dc02      	bgt.n	8009a34 <_printf_float+0x148>
 8009a2e:	6822      	ldr	r2, [r4, #0]
 8009a30:	07d1      	lsls	r1, r2, #31
 8009a32:	d501      	bpl.n	8009a38 <_printf_float+0x14c>
 8009a34:	3301      	adds	r3, #1
 8009a36:	6123      	str	r3, [r4, #16]
 8009a38:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d0a2      	beq.n	8009986 <_printf_float+0x9a>
 8009a40:	232d      	movs	r3, #45	; 0x2d
 8009a42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a46:	e79e      	b.n	8009986 <_printf_float+0x9a>
 8009a48:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009a4c:	f000 816e 	beq.w	8009d2c <_printf_float+0x440>
 8009a50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009a54:	d1b9      	bne.n	80099ca <_printf_float+0xde>
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1b7      	bne.n	80099ca <_printf_float+0xde>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e7b4      	b.n	80099c8 <_printf_float+0xdc>
 8009a5e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8009a62:	d119      	bne.n	8009a98 <_printf_float+0x1ac>
 8009a64:	2900      	cmp	r1, #0
 8009a66:	6863      	ldr	r3, [r4, #4]
 8009a68:	dd0c      	ble.n	8009a84 <_printf_float+0x198>
 8009a6a:	6121      	str	r1, [r4, #16]
 8009a6c:	b913      	cbnz	r3, 8009a74 <_printf_float+0x188>
 8009a6e:	6822      	ldr	r2, [r4, #0]
 8009a70:	07d2      	lsls	r2, r2, #31
 8009a72:	d502      	bpl.n	8009a7a <_printf_float+0x18e>
 8009a74:	3301      	adds	r3, #1
 8009a76:	440b      	add	r3, r1
 8009a78:	6123      	str	r3, [r4, #16]
 8009a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a7c:	f04f 0900 	mov.w	r9, #0
 8009a80:	65a3      	str	r3, [r4, #88]	; 0x58
 8009a82:	e7d9      	b.n	8009a38 <_printf_float+0x14c>
 8009a84:	b913      	cbnz	r3, 8009a8c <_printf_float+0x1a0>
 8009a86:	6822      	ldr	r2, [r4, #0]
 8009a88:	07d0      	lsls	r0, r2, #31
 8009a8a:	d501      	bpl.n	8009a90 <_printf_float+0x1a4>
 8009a8c:	3302      	adds	r3, #2
 8009a8e:	e7f3      	b.n	8009a78 <_printf_float+0x18c>
 8009a90:	2301      	movs	r3, #1
 8009a92:	e7f1      	b.n	8009a78 <_printf_float+0x18c>
 8009a94:	f04f 0867 	mov.w	r8, #103	; 0x67
 8009a98:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	db05      	blt.n	8009aac <_printf_float+0x1c0>
 8009aa0:	6822      	ldr	r2, [r4, #0]
 8009aa2:	6123      	str	r3, [r4, #16]
 8009aa4:	07d1      	lsls	r1, r2, #31
 8009aa6:	d5e8      	bpl.n	8009a7a <_printf_float+0x18e>
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	e7e5      	b.n	8009a78 <_printf_float+0x18c>
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	bfcc      	ite	gt
 8009ab0:	2301      	movgt	r3, #1
 8009ab2:	f1c3 0302 	rsble	r3, r3, #2
 8009ab6:	4413      	add	r3, r2
 8009ab8:	e7de      	b.n	8009a78 <_printf_float+0x18c>
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	055a      	lsls	r2, r3, #21
 8009abe:	d407      	bmi.n	8009ad0 <_printf_float+0x1e4>
 8009ac0:	6923      	ldr	r3, [r4, #16]
 8009ac2:	463a      	mov	r2, r7
 8009ac4:	4659      	mov	r1, fp
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	47b0      	blx	r6
 8009aca:	3001      	adds	r0, #1
 8009acc:	d129      	bne.n	8009b22 <_printf_float+0x236>
 8009ace:	e764      	b.n	800999a <_printf_float+0xae>
 8009ad0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009ad4:	f240 80d7 	bls.w	8009c86 <_printf_float+0x39a>
 8009ad8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009adc:	2200      	movs	r2, #0
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f7f6 ff62 	bl	80009a8 <__aeabi_dcmpeq>
 8009ae4:	b388      	cbz	r0, 8009b4a <_printf_float+0x25e>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	4a40      	ldr	r2, [pc, #256]	; (8009bec <_printf_float+0x300>)
 8009aea:	4659      	mov	r1, fp
 8009aec:	4628      	mov	r0, r5
 8009aee:	47b0      	blx	r6
 8009af0:	3001      	adds	r0, #1
 8009af2:	f43f af52 	beq.w	800999a <_printf_float+0xae>
 8009af6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009afa:	429a      	cmp	r2, r3
 8009afc:	db02      	blt.n	8009b04 <_printf_float+0x218>
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	07d8      	lsls	r0, r3, #31
 8009b02:	d50e      	bpl.n	8009b22 <_printf_float+0x236>
 8009b04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b08:	4659      	mov	r1, fp
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	47b0      	blx	r6
 8009b0e:	3001      	adds	r0, #1
 8009b10:	f43f af43 	beq.w	800999a <_printf_float+0xae>
 8009b14:	2700      	movs	r7, #0
 8009b16:	f104 081a 	add.w	r8, r4, #26
 8009b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	42bb      	cmp	r3, r7
 8009b20:	dc09      	bgt.n	8009b36 <_printf_float+0x24a>
 8009b22:	6823      	ldr	r3, [r4, #0]
 8009b24:	079f      	lsls	r7, r3, #30
 8009b26:	f100 80fd 	bmi.w	8009d24 <_printf_float+0x438>
 8009b2a:	68e0      	ldr	r0, [r4, #12]
 8009b2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b2e:	4298      	cmp	r0, r3
 8009b30:	bfb8      	it	lt
 8009b32:	4618      	movlt	r0, r3
 8009b34:	e733      	b.n	800999e <_printf_float+0xb2>
 8009b36:	2301      	movs	r3, #1
 8009b38:	4642      	mov	r2, r8
 8009b3a:	4659      	mov	r1, fp
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	47b0      	blx	r6
 8009b40:	3001      	adds	r0, #1
 8009b42:	f43f af2a 	beq.w	800999a <_printf_float+0xae>
 8009b46:	3701      	adds	r7, #1
 8009b48:	e7e7      	b.n	8009b1a <_printf_float+0x22e>
 8009b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	dc2b      	bgt.n	8009ba8 <_printf_float+0x2bc>
 8009b50:	2301      	movs	r3, #1
 8009b52:	4a26      	ldr	r2, [pc, #152]	; (8009bec <_printf_float+0x300>)
 8009b54:	4659      	mov	r1, fp
 8009b56:	4628      	mov	r0, r5
 8009b58:	47b0      	blx	r6
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	f43f af1d 	beq.w	800999a <_printf_float+0xae>
 8009b60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b62:	b923      	cbnz	r3, 8009b6e <_printf_float+0x282>
 8009b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b66:	b913      	cbnz	r3, 8009b6e <_printf_float+0x282>
 8009b68:	6823      	ldr	r3, [r4, #0]
 8009b6a:	07d9      	lsls	r1, r3, #31
 8009b6c:	d5d9      	bpl.n	8009b22 <_printf_float+0x236>
 8009b6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b72:	4659      	mov	r1, fp
 8009b74:	4628      	mov	r0, r5
 8009b76:	47b0      	blx	r6
 8009b78:	3001      	adds	r0, #1
 8009b7a:	f43f af0e 	beq.w	800999a <_printf_float+0xae>
 8009b7e:	f04f 0800 	mov.w	r8, #0
 8009b82:	f104 091a 	add.w	r9, r4, #26
 8009b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b88:	425b      	negs	r3, r3
 8009b8a:	4543      	cmp	r3, r8
 8009b8c:	dc01      	bgt.n	8009b92 <_printf_float+0x2a6>
 8009b8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b90:	e797      	b.n	8009ac2 <_printf_float+0x1d6>
 8009b92:	2301      	movs	r3, #1
 8009b94:	464a      	mov	r2, r9
 8009b96:	4659      	mov	r1, fp
 8009b98:	4628      	mov	r0, r5
 8009b9a:	47b0      	blx	r6
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	f43f aefc 	beq.w	800999a <_printf_float+0xae>
 8009ba2:	f108 0801 	add.w	r8, r8, #1
 8009ba6:	e7ee      	b.n	8009b86 <_printf_float+0x29a>
 8009ba8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009baa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bac:	429a      	cmp	r2, r3
 8009bae:	bfa8      	it	ge
 8009bb0:	461a      	movge	r2, r3
 8009bb2:	2a00      	cmp	r2, #0
 8009bb4:	4690      	mov	r8, r2
 8009bb6:	dd07      	ble.n	8009bc8 <_printf_float+0x2dc>
 8009bb8:	4613      	mov	r3, r2
 8009bba:	4659      	mov	r1, fp
 8009bbc:	463a      	mov	r2, r7
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	47b0      	blx	r6
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	f43f aee9 	beq.w	800999a <_printf_float+0xae>
 8009bc8:	f104 031a 	add.w	r3, r4, #26
 8009bcc:	f04f 0a00 	mov.w	sl, #0
 8009bd0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8009bd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bd6:	e015      	b.n	8009c04 <_printf_float+0x318>
 8009bd8:	7fefffff 	.word	0x7fefffff
 8009bdc:	0800db80 	.word	0x0800db80
 8009be0:	0800db7c 	.word	0x0800db7c
 8009be4:	0800db88 	.word	0x0800db88
 8009be8:	0800db84 	.word	0x0800db84
 8009bec:	0800db8c 	.word	0x0800db8c
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009bf4:	4659      	mov	r1, fp
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	47b0      	blx	r6
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	f43f aecd 	beq.w	800999a <_printf_float+0xae>
 8009c00:	f10a 0a01 	add.w	sl, sl, #1
 8009c04:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8009c08:	eba9 0308 	sub.w	r3, r9, r8
 8009c0c:	4553      	cmp	r3, sl
 8009c0e:	dcef      	bgt.n	8009bf0 <_printf_float+0x304>
 8009c10:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009c14:	429a      	cmp	r2, r3
 8009c16:	444f      	add	r7, r9
 8009c18:	db14      	blt.n	8009c44 <_printf_float+0x358>
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	07da      	lsls	r2, r3, #31
 8009c1e:	d411      	bmi.n	8009c44 <_printf_float+0x358>
 8009c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009c24:	eba3 0209 	sub.w	r2, r3, r9
 8009c28:	eba3 0901 	sub.w	r9, r3, r1
 8009c2c:	4591      	cmp	r9, r2
 8009c2e:	bfa8      	it	ge
 8009c30:	4691      	movge	r9, r2
 8009c32:	f1b9 0f00 	cmp.w	r9, #0
 8009c36:	dc0d      	bgt.n	8009c54 <_printf_float+0x368>
 8009c38:	2700      	movs	r7, #0
 8009c3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c3e:	f104 081a 	add.w	r8, r4, #26
 8009c42:	e018      	b.n	8009c76 <_printf_float+0x38a>
 8009c44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c48:	4659      	mov	r1, fp
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	47b0      	blx	r6
 8009c4e:	3001      	adds	r0, #1
 8009c50:	d1e6      	bne.n	8009c20 <_printf_float+0x334>
 8009c52:	e6a2      	b.n	800999a <_printf_float+0xae>
 8009c54:	464b      	mov	r3, r9
 8009c56:	463a      	mov	r2, r7
 8009c58:	4659      	mov	r1, fp
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	47b0      	blx	r6
 8009c5e:	3001      	adds	r0, #1
 8009c60:	d1ea      	bne.n	8009c38 <_printf_float+0x34c>
 8009c62:	e69a      	b.n	800999a <_printf_float+0xae>
 8009c64:	2301      	movs	r3, #1
 8009c66:	4642      	mov	r2, r8
 8009c68:	4659      	mov	r1, fp
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	47b0      	blx	r6
 8009c6e:	3001      	adds	r0, #1
 8009c70:	f43f ae93 	beq.w	800999a <_printf_float+0xae>
 8009c74:	3701      	adds	r7, #1
 8009c76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009c7a:	1a9b      	subs	r3, r3, r2
 8009c7c:	eba3 0309 	sub.w	r3, r3, r9
 8009c80:	42bb      	cmp	r3, r7
 8009c82:	dcef      	bgt.n	8009c64 <_printf_float+0x378>
 8009c84:	e74d      	b.n	8009b22 <_printf_float+0x236>
 8009c86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c88:	2a01      	cmp	r2, #1
 8009c8a:	dc01      	bgt.n	8009c90 <_printf_float+0x3a4>
 8009c8c:	07db      	lsls	r3, r3, #31
 8009c8e:	d538      	bpl.n	8009d02 <_printf_float+0x416>
 8009c90:	2301      	movs	r3, #1
 8009c92:	463a      	mov	r2, r7
 8009c94:	4659      	mov	r1, fp
 8009c96:	4628      	mov	r0, r5
 8009c98:	47b0      	blx	r6
 8009c9a:	3001      	adds	r0, #1
 8009c9c:	f43f ae7d 	beq.w	800999a <_printf_float+0xae>
 8009ca0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ca4:	4659      	mov	r1, fp
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	47b0      	blx	r6
 8009caa:	3001      	adds	r0, #1
 8009cac:	f107 0701 	add.w	r7, r7, #1
 8009cb0:	f43f ae73 	beq.w	800999a <_printf_float+0xae>
 8009cb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f103 38ff 	add.w	r8, r3, #4294967295
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	f7f6 fe71 	bl	80009a8 <__aeabi_dcmpeq>
 8009cc6:	b9c0      	cbnz	r0, 8009cfa <_printf_float+0x40e>
 8009cc8:	4643      	mov	r3, r8
 8009cca:	463a      	mov	r2, r7
 8009ccc:	4659      	mov	r1, fp
 8009cce:	4628      	mov	r0, r5
 8009cd0:	47b0      	blx	r6
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	d10d      	bne.n	8009cf2 <_printf_float+0x406>
 8009cd6:	e660      	b.n	800999a <_printf_float+0xae>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	4642      	mov	r2, r8
 8009cdc:	4659      	mov	r1, fp
 8009cde:	4628      	mov	r0, r5
 8009ce0:	47b0      	blx	r6
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	f43f ae59 	beq.w	800999a <_printf_float+0xae>
 8009ce8:	3701      	adds	r7, #1
 8009cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cec:	3b01      	subs	r3, #1
 8009cee:	42bb      	cmp	r3, r7
 8009cf0:	dcf2      	bgt.n	8009cd8 <_printf_float+0x3ec>
 8009cf2:	464b      	mov	r3, r9
 8009cf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009cf8:	e6e4      	b.n	8009ac4 <_printf_float+0x1d8>
 8009cfa:	2700      	movs	r7, #0
 8009cfc:	f104 081a 	add.w	r8, r4, #26
 8009d00:	e7f3      	b.n	8009cea <_printf_float+0x3fe>
 8009d02:	2301      	movs	r3, #1
 8009d04:	e7e1      	b.n	8009cca <_printf_float+0x3de>
 8009d06:	2301      	movs	r3, #1
 8009d08:	4642      	mov	r2, r8
 8009d0a:	4659      	mov	r1, fp
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	47b0      	blx	r6
 8009d10:	3001      	adds	r0, #1
 8009d12:	f43f ae42 	beq.w	800999a <_printf_float+0xae>
 8009d16:	3701      	adds	r7, #1
 8009d18:	68e3      	ldr	r3, [r4, #12]
 8009d1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d1c:	1a9b      	subs	r3, r3, r2
 8009d1e:	42bb      	cmp	r3, r7
 8009d20:	dcf1      	bgt.n	8009d06 <_printf_float+0x41a>
 8009d22:	e702      	b.n	8009b2a <_printf_float+0x23e>
 8009d24:	2700      	movs	r7, #0
 8009d26:	f104 0819 	add.w	r8, r4, #25
 8009d2a:	e7f5      	b.n	8009d18 <_printf_float+0x42c>
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f43f ae94 	beq.w	8009a5a <_printf_float+0x16e>
 8009d32:	f04f 0c00 	mov.w	ip, #0
 8009d36:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009d3a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8009d3e:	6022      	str	r2, [r4, #0]
 8009d40:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009d44:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	463a      	mov	r2, r7
 8009d4c:	464b      	mov	r3, r9
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f7ff fd3a 	bl	80097c8 <__cvt>
 8009d54:	4607      	mov	r7, r0
 8009d56:	e64f      	b.n	80099f8 <_printf_float+0x10c>

08009d58 <_printf_common>:
 8009d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d5c:	4691      	mov	r9, r2
 8009d5e:	461f      	mov	r7, r3
 8009d60:	688a      	ldr	r2, [r1, #8]
 8009d62:	690b      	ldr	r3, [r1, #16]
 8009d64:	4606      	mov	r6, r0
 8009d66:	4293      	cmp	r3, r2
 8009d68:	bfb8      	it	lt
 8009d6a:	4613      	movlt	r3, r2
 8009d6c:	f8c9 3000 	str.w	r3, [r9]
 8009d70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d74:	460c      	mov	r4, r1
 8009d76:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d7a:	b112      	cbz	r2, 8009d82 <_printf_common+0x2a>
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	f8c9 3000 	str.w	r3, [r9]
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	0699      	lsls	r1, r3, #26
 8009d86:	bf42      	ittt	mi
 8009d88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009d8c:	3302      	addmi	r3, #2
 8009d8e:	f8c9 3000 	strmi.w	r3, [r9]
 8009d92:	6825      	ldr	r5, [r4, #0]
 8009d94:	f015 0506 	ands.w	r5, r5, #6
 8009d98:	d107      	bne.n	8009daa <_printf_common+0x52>
 8009d9a:	f104 0a19 	add.w	sl, r4, #25
 8009d9e:	68e3      	ldr	r3, [r4, #12]
 8009da0:	f8d9 2000 	ldr.w	r2, [r9]
 8009da4:	1a9b      	subs	r3, r3, r2
 8009da6:	42ab      	cmp	r3, r5
 8009da8:	dc29      	bgt.n	8009dfe <_printf_common+0xa6>
 8009daa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009dae:	6822      	ldr	r2, [r4, #0]
 8009db0:	3300      	adds	r3, #0
 8009db2:	bf18      	it	ne
 8009db4:	2301      	movne	r3, #1
 8009db6:	0692      	lsls	r2, r2, #26
 8009db8:	d42e      	bmi.n	8009e18 <_printf_common+0xc0>
 8009dba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	47c0      	blx	r8
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	d021      	beq.n	8009e0c <_printf_common+0xb4>
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	68e5      	ldr	r5, [r4, #12]
 8009dcc:	f003 0306 	and.w	r3, r3, #6
 8009dd0:	2b04      	cmp	r3, #4
 8009dd2:	bf18      	it	ne
 8009dd4:	2500      	movne	r5, #0
 8009dd6:	f8d9 2000 	ldr.w	r2, [r9]
 8009dda:	f04f 0900 	mov.w	r9, #0
 8009dde:	bf08      	it	eq
 8009de0:	1aad      	subeq	r5, r5, r2
 8009de2:	68a3      	ldr	r3, [r4, #8]
 8009de4:	6922      	ldr	r2, [r4, #16]
 8009de6:	bf08      	it	eq
 8009de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dec:	4293      	cmp	r3, r2
 8009dee:	bfc4      	itt	gt
 8009df0:	1a9b      	subgt	r3, r3, r2
 8009df2:	18ed      	addgt	r5, r5, r3
 8009df4:	341a      	adds	r4, #26
 8009df6:	454d      	cmp	r5, r9
 8009df8:	d11a      	bne.n	8009e30 <_printf_common+0xd8>
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	e008      	b.n	8009e10 <_printf_common+0xb8>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	4652      	mov	r2, sl
 8009e02:	4639      	mov	r1, r7
 8009e04:	4630      	mov	r0, r6
 8009e06:	47c0      	blx	r8
 8009e08:	3001      	adds	r0, #1
 8009e0a:	d103      	bne.n	8009e14 <_printf_common+0xbc>
 8009e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e14:	3501      	adds	r5, #1
 8009e16:	e7c2      	b.n	8009d9e <_printf_common+0x46>
 8009e18:	2030      	movs	r0, #48	; 0x30
 8009e1a:	18e1      	adds	r1, r4, r3
 8009e1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e20:	1c5a      	adds	r2, r3, #1
 8009e22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e26:	4422      	add	r2, r4
 8009e28:	3302      	adds	r3, #2
 8009e2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e2e:	e7c4      	b.n	8009dba <_printf_common+0x62>
 8009e30:	2301      	movs	r3, #1
 8009e32:	4622      	mov	r2, r4
 8009e34:	4639      	mov	r1, r7
 8009e36:	4630      	mov	r0, r6
 8009e38:	47c0      	blx	r8
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	d0e6      	beq.n	8009e0c <_printf_common+0xb4>
 8009e3e:	f109 0901 	add.w	r9, r9, #1
 8009e42:	e7d8      	b.n	8009df6 <_printf_common+0x9e>

08009e44 <_printf_i>:
 8009e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	7e09      	ldrb	r1, [r1, #24]
 8009e50:	b085      	sub	sp, #20
 8009e52:	296e      	cmp	r1, #110	; 0x6e
 8009e54:	4617      	mov	r7, r2
 8009e56:	4606      	mov	r6, r0
 8009e58:	4698      	mov	r8, r3
 8009e5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e5c:	f000 80b3 	beq.w	8009fc6 <_printf_i+0x182>
 8009e60:	d822      	bhi.n	8009ea8 <_printf_i+0x64>
 8009e62:	2963      	cmp	r1, #99	; 0x63
 8009e64:	d036      	beq.n	8009ed4 <_printf_i+0x90>
 8009e66:	d80a      	bhi.n	8009e7e <_printf_i+0x3a>
 8009e68:	2900      	cmp	r1, #0
 8009e6a:	f000 80b9 	beq.w	8009fe0 <_printf_i+0x19c>
 8009e6e:	2958      	cmp	r1, #88	; 0x58
 8009e70:	f000 8083 	beq.w	8009f7a <_printf_i+0x136>
 8009e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009e7c:	e032      	b.n	8009ee4 <_printf_i+0xa0>
 8009e7e:	2964      	cmp	r1, #100	; 0x64
 8009e80:	d001      	beq.n	8009e86 <_printf_i+0x42>
 8009e82:	2969      	cmp	r1, #105	; 0x69
 8009e84:	d1f6      	bne.n	8009e74 <_printf_i+0x30>
 8009e86:	6820      	ldr	r0, [r4, #0]
 8009e88:	6813      	ldr	r3, [r2, #0]
 8009e8a:	0605      	lsls	r5, r0, #24
 8009e8c:	f103 0104 	add.w	r1, r3, #4
 8009e90:	d52a      	bpl.n	8009ee8 <_printf_i+0xa4>
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6011      	str	r1, [r2, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	da03      	bge.n	8009ea2 <_printf_i+0x5e>
 8009e9a:	222d      	movs	r2, #45	; 0x2d
 8009e9c:	425b      	negs	r3, r3
 8009e9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009ea2:	486f      	ldr	r0, [pc, #444]	; (800a060 <_printf_i+0x21c>)
 8009ea4:	220a      	movs	r2, #10
 8009ea6:	e039      	b.n	8009f1c <_printf_i+0xd8>
 8009ea8:	2973      	cmp	r1, #115	; 0x73
 8009eaa:	f000 809d 	beq.w	8009fe8 <_printf_i+0x1a4>
 8009eae:	d808      	bhi.n	8009ec2 <_printf_i+0x7e>
 8009eb0:	296f      	cmp	r1, #111	; 0x6f
 8009eb2:	d020      	beq.n	8009ef6 <_printf_i+0xb2>
 8009eb4:	2970      	cmp	r1, #112	; 0x70
 8009eb6:	d1dd      	bne.n	8009e74 <_printf_i+0x30>
 8009eb8:	6823      	ldr	r3, [r4, #0]
 8009eba:	f043 0320 	orr.w	r3, r3, #32
 8009ebe:	6023      	str	r3, [r4, #0]
 8009ec0:	e003      	b.n	8009eca <_printf_i+0x86>
 8009ec2:	2975      	cmp	r1, #117	; 0x75
 8009ec4:	d017      	beq.n	8009ef6 <_printf_i+0xb2>
 8009ec6:	2978      	cmp	r1, #120	; 0x78
 8009ec8:	d1d4      	bne.n	8009e74 <_printf_i+0x30>
 8009eca:	2378      	movs	r3, #120	; 0x78
 8009ecc:	4865      	ldr	r0, [pc, #404]	; (800a064 <_printf_i+0x220>)
 8009ece:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ed2:	e055      	b.n	8009f80 <_printf_i+0x13c>
 8009ed4:	6813      	ldr	r3, [r2, #0]
 8009ed6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009eda:	1d19      	adds	r1, r3, #4
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6011      	str	r1, [r2, #0]
 8009ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e08c      	b.n	800a002 <_printf_i+0x1be>
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009eee:	6011      	str	r1, [r2, #0]
 8009ef0:	bf18      	it	ne
 8009ef2:	b21b      	sxthne	r3, r3
 8009ef4:	e7cf      	b.n	8009e96 <_printf_i+0x52>
 8009ef6:	6813      	ldr	r3, [r2, #0]
 8009ef8:	6825      	ldr	r5, [r4, #0]
 8009efa:	1d18      	adds	r0, r3, #4
 8009efc:	6010      	str	r0, [r2, #0]
 8009efe:	0628      	lsls	r0, r5, #24
 8009f00:	d501      	bpl.n	8009f06 <_printf_i+0xc2>
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	e002      	b.n	8009f0c <_printf_i+0xc8>
 8009f06:	0668      	lsls	r0, r5, #25
 8009f08:	d5fb      	bpl.n	8009f02 <_printf_i+0xbe>
 8009f0a:	881b      	ldrh	r3, [r3, #0]
 8009f0c:	296f      	cmp	r1, #111	; 0x6f
 8009f0e:	bf14      	ite	ne
 8009f10:	220a      	movne	r2, #10
 8009f12:	2208      	moveq	r2, #8
 8009f14:	4852      	ldr	r0, [pc, #328]	; (800a060 <_printf_i+0x21c>)
 8009f16:	2100      	movs	r1, #0
 8009f18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f1c:	6865      	ldr	r5, [r4, #4]
 8009f1e:	2d00      	cmp	r5, #0
 8009f20:	60a5      	str	r5, [r4, #8]
 8009f22:	f2c0 8095 	blt.w	800a050 <_printf_i+0x20c>
 8009f26:	6821      	ldr	r1, [r4, #0]
 8009f28:	f021 0104 	bic.w	r1, r1, #4
 8009f2c:	6021      	str	r1, [r4, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d13d      	bne.n	8009fae <_printf_i+0x16a>
 8009f32:	2d00      	cmp	r5, #0
 8009f34:	f040 808e 	bne.w	800a054 <_printf_i+0x210>
 8009f38:	4665      	mov	r5, ip
 8009f3a:	2a08      	cmp	r2, #8
 8009f3c:	d10b      	bne.n	8009f56 <_printf_i+0x112>
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	07db      	lsls	r3, r3, #31
 8009f42:	d508      	bpl.n	8009f56 <_printf_i+0x112>
 8009f44:	6923      	ldr	r3, [r4, #16]
 8009f46:	6862      	ldr	r2, [r4, #4]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	bfde      	ittt	le
 8009f4c:	2330      	movle	r3, #48	; 0x30
 8009f4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f56:	ebac 0305 	sub.w	r3, ip, r5
 8009f5a:	6123      	str	r3, [r4, #16]
 8009f5c:	f8cd 8000 	str.w	r8, [sp]
 8009f60:	463b      	mov	r3, r7
 8009f62:	aa03      	add	r2, sp, #12
 8009f64:	4621      	mov	r1, r4
 8009f66:	4630      	mov	r0, r6
 8009f68:	f7ff fef6 	bl	8009d58 <_printf_common>
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d14d      	bne.n	800a00c <_printf_i+0x1c8>
 8009f70:	f04f 30ff 	mov.w	r0, #4294967295
 8009f74:	b005      	add	sp, #20
 8009f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f7a:	4839      	ldr	r0, [pc, #228]	; (800a060 <_printf_i+0x21c>)
 8009f7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009f80:	6813      	ldr	r3, [r2, #0]
 8009f82:	6821      	ldr	r1, [r4, #0]
 8009f84:	1d1d      	adds	r5, r3, #4
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6015      	str	r5, [r2, #0]
 8009f8a:	060a      	lsls	r2, r1, #24
 8009f8c:	d50b      	bpl.n	8009fa6 <_printf_i+0x162>
 8009f8e:	07ca      	lsls	r2, r1, #31
 8009f90:	bf44      	itt	mi
 8009f92:	f041 0120 	orrmi.w	r1, r1, #32
 8009f96:	6021      	strmi	r1, [r4, #0]
 8009f98:	b91b      	cbnz	r3, 8009fa2 <_printf_i+0x15e>
 8009f9a:	6822      	ldr	r2, [r4, #0]
 8009f9c:	f022 0220 	bic.w	r2, r2, #32
 8009fa0:	6022      	str	r2, [r4, #0]
 8009fa2:	2210      	movs	r2, #16
 8009fa4:	e7b7      	b.n	8009f16 <_printf_i+0xd2>
 8009fa6:	064d      	lsls	r5, r1, #25
 8009fa8:	bf48      	it	mi
 8009faa:	b29b      	uxthmi	r3, r3
 8009fac:	e7ef      	b.n	8009f8e <_printf_i+0x14a>
 8009fae:	4665      	mov	r5, ip
 8009fb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fb4:	fb02 3311 	mls	r3, r2, r1, r3
 8009fb8:	5cc3      	ldrb	r3, [r0, r3]
 8009fba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	2900      	cmp	r1, #0
 8009fc2:	d1f5      	bne.n	8009fb0 <_printf_i+0x16c>
 8009fc4:	e7b9      	b.n	8009f3a <_printf_i+0xf6>
 8009fc6:	6813      	ldr	r3, [r2, #0]
 8009fc8:	6825      	ldr	r5, [r4, #0]
 8009fca:	1d18      	adds	r0, r3, #4
 8009fcc:	6961      	ldr	r1, [r4, #20]
 8009fce:	6010      	str	r0, [r2, #0]
 8009fd0:	0628      	lsls	r0, r5, #24
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	d501      	bpl.n	8009fda <_printf_i+0x196>
 8009fd6:	6019      	str	r1, [r3, #0]
 8009fd8:	e002      	b.n	8009fe0 <_printf_i+0x19c>
 8009fda:	066a      	lsls	r2, r5, #25
 8009fdc:	d5fb      	bpl.n	8009fd6 <_printf_i+0x192>
 8009fde:	8019      	strh	r1, [r3, #0]
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4665      	mov	r5, ip
 8009fe4:	6123      	str	r3, [r4, #16]
 8009fe6:	e7b9      	b.n	8009f5c <_printf_i+0x118>
 8009fe8:	6813      	ldr	r3, [r2, #0]
 8009fea:	1d19      	adds	r1, r3, #4
 8009fec:	6011      	str	r1, [r2, #0]
 8009fee:	681d      	ldr	r5, [r3, #0]
 8009ff0:	6862      	ldr	r2, [r4, #4]
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	f002 fc47 	bl	800c888 <memchr>
 8009ffa:	b108      	cbz	r0, 800a000 <_printf_i+0x1bc>
 8009ffc:	1b40      	subs	r0, r0, r5
 8009ffe:	6060      	str	r0, [r4, #4]
 800a000:	6863      	ldr	r3, [r4, #4]
 800a002:	6123      	str	r3, [r4, #16]
 800a004:	2300      	movs	r3, #0
 800a006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a00a:	e7a7      	b.n	8009f5c <_printf_i+0x118>
 800a00c:	6923      	ldr	r3, [r4, #16]
 800a00e:	462a      	mov	r2, r5
 800a010:	4639      	mov	r1, r7
 800a012:	4630      	mov	r0, r6
 800a014:	47c0      	blx	r8
 800a016:	3001      	adds	r0, #1
 800a018:	d0aa      	beq.n	8009f70 <_printf_i+0x12c>
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	079b      	lsls	r3, r3, #30
 800a01e:	d413      	bmi.n	800a048 <_printf_i+0x204>
 800a020:	68e0      	ldr	r0, [r4, #12]
 800a022:	9b03      	ldr	r3, [sp, #12]
 800a024:	4298      	cmp	r0, r3
 800a026:	bfb8      	it	lt
 800a028:	4618      	movlt	r0, r3
 800a02a:	e7a3      	b.n	8009f74 <_printf_i+0x130>
 800a02c:	2301      	movs	r3, #1
 800a02e:	464a      	mov	r2, r9
 800a030:	4639      	mov	r1, r7
 800a032:	4630      	mov	r0, r6
 800a034:	47c0      	blx	r8
 800a036:	3001      	adds	r0, #1
 800a038:	d09a      	beq.n	8009f70 <_printf_i+0x12c>
 800a03a:	3501      	adds	r5, #1
 800a03c:	68e3      	ldr	r3, [r4, #12]
 800a03e:	9a03      	ldr	r2, [sp, #12]
 800a040:	1a9b      	subs	r3, r3, r2
 800a042:	42ab      	cmp	r3, r5
 800a044:	dcf2      	bgt.n	800a02c <_printf_i+0x1e8>
 800a046:	e7eb      	b.n	800a020 <_printf_i+0x1dc>
 800a048:	2500      	movs	r5, #0
 800a04a:	f104 0919 	add.w	r9, r4, #25
 800a04e:	e7f5      	b.n	800a03c <_printf_i+0x1f8>
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1ac      	bne.n	8009fae <_printf_i+0x16a>
 800a054:	7803      	ldrb	r3, [r0, #0]
 800a056:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a05a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a05e:	e76c      	b.n	8009f3a <_printf_i+0xf6>
 800a060:	0800db8e 	.word	0x0800db8e
 800a064:	0800db9f 	.word	0x0800db9f

0800a068 <_scanf_float>:
 800a068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06c:	469a      	mov	sl, r3
 800a06e:	688b      	ldr	r3, [r1, #8]
 800a070:	4616      	mov	r6, r2
 800a072:	1e5a      	subs	r2, r3, #1
 800a074:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a078:	bf88      	it	hi
 800a07a:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800a07e:	b087      	sub	sp, #28
 800a080:	bf85      	ittet	hi
 800a082:	189b      	addhi	r3, r3, r2
 800a084:	9301      	strhi	r3, [sp, #4]
 800a086:	2300      	movls	r3, #0
 800a088:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a08c:	4688      	mov	r8, r1
 800a08e:	f04f 0b00 	mov.w	fp, #0
 800a092:	bf8c      	ite	hi
 800a094:	608b      	strhi	r3, [r1, #8]
 800a096:	9301      	strls	r3, [sp, #4]
 800a098:	680b      	ldr	r3, [r1, #0]
 800a09a:	4607      	mov	r7, r0
 800a09c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a0a0:	f848 3b1c 	str.w	r3, [r8], #28
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	4645      	mov	r5, r8
 800a0a8:	465a      	mov	r2, fp
 800a0aa:	46d9      	mov	r9, fp
 800a0ac:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800a0b0:	f8cd b008 	str.w	fp, [sp, #8]
 800a0b4:	68a1      	ldr	r1, [r4, #8]
 800a0b6:	b181      	cbz	r1, 800a0da <_scanf_float+0x72>
 800a0b8:	6833      	ldr	r3, [r6, #0]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	2b49      	cmp	r3, #73	; 0x49
 800a0be:	d071      	beq.n	800a1a4 <_scanf_float+0x13c>
 800a0c0:	d84d      	bhi.n	800a15e <_scanf_float+0xf6>
 800a0c2:	2b39      	cmp	r3, #57	; 0x39
 800a0c4:	d840      	bhi.n	800a148 <_scanf_float+0xe0>
 800a0c6:	2b31      	cmp	r3, #49	; 0x31
 800a0c8:	f080 8088 	bcs.w	800a1dc <_scanf_float+0x174>
 800a0cc:	2b2d      	cmp	r3, #45	; 0x2d
 800a0ce:	f000 8090 	beq.w	800a1f2 <_scanf_float+0x18a>
 800a0d2:	d815      	bhi.n	800a100 <_scanf_float+0x98>
 800a0d4:	2b2b      	cmp	r3, #43	; 0x2b
 800a0d6:	f000 808c 	beq.w	800a1f2 <_scanf_float+0x18a>
 800a0da:	f1b9 0f00 	cmp.w	r9, #0
 800a0de:	d003      	beq.n	800a0e8 <_scanf_float+0x80>
 800a0e0:	6823      	ldr	r3, [r4, #0]
 800a0e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0e6:	6023      	str	r3, [r4, #0]
 800a0e8:	3a01      	subs	r2, #1
 800a0ea:	2a01      	cmp	r2, #1
 800a0ec:	f200 80ea 	bhi.w	800a2c4 <_scanf_float+0x25c>
 800a0f0:	4545      	cmp	r5, r8
 800a0f2:	f200 80dc 	bhi.w	800a2ae <_scanf_float+0x246>
 800a0f6:	2601      	movs	r6, #1
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	b007      	add	sp, #28
 800a0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a100:	2b2e      	cmp	r3, #46	; 0x2e
 800a102:	f000 809f 	beq.w	800a244 <_scanf_float+0x1dc>
 800a106:	2b30      	cmp	r3, #48	; 0x30
 800a108:	d1e7      	bne.n	800a0da <_scanf_float+0x72>
 800a10a:	6820      	ldr	r0, [r4, #0]
 800a10c:	f410 7f80 	tst.w	r0, #256	; 0x100
 800a110:	d064      	beq.n	800a1dc <_scanf_float+0x174>
 800a112:	9b01      	ldr	r3, [sp, #4]
 800a114:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800a118:	6020      	str	r0, [r4, #0]
 800a11a:	f109 0901 	add.w	r9, r9, #1
 800a11e:	b11b      	cbz	r3, 800a128 <_scanf_float+0xc0>
 800a120:	3b01      	subs	r3, #1
 800a122:	3101      	adds	r1, #1
 800a124:	9301      	str	r3, [sp, #4]
 800a126:	60a1      	str	r1, [r4, #8]
 800a128:	68a3      	ldr	r3, [r4, #8]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	60a3      	str	r3, [r4, #8]
 800a12e:	6923      	ldr	r3, [r4, #16]
 800a130:	3301      	adds	r3, #1
 800a132:	6123      	str	r3, [r4, #16]
 800a134:	6873      	ldr	r3, [r6, #4]
 800a136:	3b01      	subs	r3, #1
 800a138:	2b00      	cmp	r3, #0
 800a13a:	6073      	str	r3, [r6, #4]
 800a13c:	f340 80ac 	ble.w	800a298 <_scanf_float+0x230>
 800a140:	6833      	ldr	r3, [r6, #0]
 800a142:	3301      	adds	r3, #1
 800a144:	6033      	str	r3, [r6, #0]
 800a146:	e7b5      	b.n	800a0b4 <_scanf_float+0x4c>
 800a148:	2b45      	cmp	r3, #69	; 0x45
 800a14a:	f000 8085 	beq.w	800a258 <_scanf_float+0x1f0>
 800a14e:	2b46      	cmp	r3, #70	; 0x46
 800a150:	d06a      	beq.n	800a228 <_scanf_float+0x1c0>
 800a152:	2b41      	cmp	r3, #65	; 0x41
 800a154:	d1c1      	bne.n	800a0da <_scanf_float+0x72>
 800a156:	2a01      	cmp	r2, #1
 800a158:	d1bf      	bne.n	800a0da <_scanf_float+0x72>
 800a15a:	2202      	movs	r2, #2
 800a15c:	e046      	b.n	800a1ec <_scanf_float+0x184>
 800a15e:	2b65      	cmp	r3, #101	; 0x65
 800a160:	d07a      	beq.n	800a258 <_scanf_float+0x1f0>
 800a162:	d818      	bhi.n	800a196 <_scanf_float+0x12e>
 800a164:	2b54      	cmp	r3, #84	; 0x54
 800a166:	d066      	beq.n	800a236 <_scanf_float+0x1ce>
 800a168:	d811      	bhi.n	800a18e <_scanf_float+0x126>
 800a16a:	2b4e      	cmp	r3, #78	; 0x4e
 800a16c:	d1b5      	bne.n	800a0da <_scanf_float+0x72>
 800a16e:	2a00      	cmp	r2, #0
 800a170:	d146      	bne.n	800a200 <_scanf_float+0x198>
 800a172:	f1b9 0f00 	cmp.w	r9, #0
 800a176:	d145      	bne.n	800a204 <_scanf_float+0x19c>
 800a178:	6821      	ldr	r1, [r4, #0]
 800a17a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a17e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a182:	d13f      	bne.n	800a204 <_scanf_float+0x19c>
 800a184:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a188:	6021      	str	r1, [r4, #0]
 800a18a:	2201      	movs	r2, #1
 800a18c:	e02e      	b.n	800a1ec <_scanf_float+0x184>
 800a18e:	2b59      	cmp	r3, #89	; 0x59
 800a190:	d01e      	beq.n	800a1d0 <_scanf_float+0x168>
 800a192:	2b61      	cmp	r3, #97	; 0x61
 800a194:	e7de      	b.n	800a154 <_scanf_float+0xec>
 800a196:	2b6e      	cmp	r3, #110	; 0x6e
 800a198:	d0e9      	beq.n	800a16e <_scanf_float+0x106>
 800a19a:	d815      	bhi.n	800a1c8 <_scanf_float+0x160>
 800a19c:	2b66      	cmp	r3, #102	; 0x66
 800a19e:	d043      	beq.n	800a228 <_scanf_float+0x1c0>
 800a1a0:	2b69      	cmp	r3, #105	; 0x69
 800a1a2:	d19a      	bne.n	800a0da <_scanf_float+0x72>
 800a1a4:	f1bb 0f00 	cmp.w	fp, #0
 800a1a8:	d138      	bne.n	800a21c <_scanf_float+0x1b4>
 800a1aa:	f1b9 0f00 	cmp.w	r9, #0
 800a1ae:	d197      	bne.n	800a0e0 <_scanf_float+0x78>
 800a1b0:	6821      	ldr	r1, [r4, #0]
 800a1b2:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a1b6:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a1ba:	d195      	bne.n	800a0e8 <_scanf_float+0x80>
 800a1bc:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a1c0:	6021      	str	r1, [r4, #0]
 800a1c2:	f04f 0b01 	mov.w	fp, #1
 800a1c6:	e011      	b.n	800a1ec <_scanf_float+0x184>
 800a1c8:	2b74      	cmp	r3, #116	; 0x74
 800a1ca:	d034      	beq.n	800a236 <_scanf_float+0x1ce>
 800a1cc:	2b79      	cmp	r3, #121	; 0x79
 800a1ce:	d184      	bne.n	800a0da <_scanf_float+0x72>
 800a1d0:	f1bb 0f07 	cmp.w	fp, #7
 800a1d4:	d181      	bne.n	800a0da <_scanf_float+0x72>
 800a1d6:	f04f 0b08 	mov.w	fp, #8
 800a1da:	e007      	b.n	800a1ec <_scanf_float+0x184>
 800a1dc:	eb12 0f0b 	cmn.w	r2, fp
 800a1e0:	f47f af7b 	bne.w	800a0da <_scanf_float+0x72>
 800a1e4:	6821      	ldr	r1, [r4, #0]
 800a1e6:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800a1ea:	6021      	str	r1, [r4, #0]
 800a1ec:	702b      	strb	r3, [r5, #0]
 800a1ee:	3501      	adds	r5, #1
 800a1f0:	e79a      	b.n	800a128 <_scanf_float+0xc0>
 800a1f2:	6821      	ldr	r1, [r4, #0]
 800a1f4:	0608      	lsls	r0, r1, #24
 800a1f6:	f57f af70 	bpl.w	800a0da <_scanf_float+0x72>
 800a1fa:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a1fe:	e7f4      	b.n	800a1ea <_scanf_float+0x182>
 800a200:	2a02      	cmp	r2, #2
 800a202:	d047      	beq.n	800a294 <_scanf_float+0x22c>
 800a204:	f1bb 0f01 	cmp.w	fp, #1
 800a208:	d003      	beq.n	800a212 <_scanf_float+0x1aa>
 800a20a:	f1bb 0f04 	cmp.w	fp, #4
 800a20e:	f47f af64 	bne.w	800a0da <_scanf_float+0x72>
 800a212:	f10b 0b01 	add.w	fp, fp, #1
 800a216:	fa5f fb8b 	uxtb.w	fp, fp
 800a21a:	e7e7      	b.n	800a1ec <_scanf_float+0x184>
 800a21c:	f1bb 0f03 	cmp.w	fp, #3
 800a220:	d0f7      	beq.n	800a212 <_scanf_float+0x1aa>
 800a222:	f1bb 0f05 	cmp.w	fp, #5
 800a226:	e7f2      	b.n	800a20e <_scanf_float+0x1a6>
 800a228:	f1bb 0f02 	cmp.w	fp, #2
 800a22c:	f47f af55 	bne.w	800a0da <_scanf_float+0x72>
 800a230:	f04f 0b03 	mov.w	fp, #3
 800a234:	e7da      	b.n	800a1ec <_scanf_float+0x184>
 800a236:	f1bb 0f06 	cmp.w	fp, #6
 800a23a:	f47f af4e 	bne.w	800a0da <_scanf_float+0x72>
 800a23e:	f04f 0b07 	mov.w	fp, #7
 800a242:	e7d3      	b.n	800a1ec <_scanf_float+0x184>
 800a244:	6821      	ldr	r1, [r4, #0]
 800a246:	0588      	lsls	r0, r1, #22
 800a248:	f57f af47 	bpl.w	800a0da <_scanf_float+0x72>
 800a24c:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800a250:	6021      	str	r1, [r4, #0]
 800a252:	f8cd 9008 	str.w	r9, [sp, #8]
 800a256:	e7c9      	b.n	800a1ec <_scanf_float+0x184>
 800a258:	6821      	ldr	r1, [r4, #0]
 800a25a:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800a25e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a262:	d006      	beq.n	800a272 <_scanf_float+0x20a>
 800a264:	0548      	lsls	r0, r1, #21
 800a266:	f57f af38 	bpl.w	800a0da <_scanf_float+0x72>
 800a26a:	f1b9 0f00 	cmp.w	r9, #0
 800a26e:	f43f af3b 	beq.w	800a0e8 <_scanf_float+0x80>
 800a272:	0588      	lsls	r0, r1, #22
 800a274:	bf58      	it	pl
 800a276:	9802      	ldrpl	r0, [sp, #8]
 800a278:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a27c:	bf58      	it	pl
 800a27e:	eba9 0000 	subpl.w	r0, r9, r0
 800a282:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800a286:	bf58      	it	pl
 800a288:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800a28c:	6021      	str	r1, [r4, #0]
 800a28e:	f04f 0900 	mov.w	r9, #0
 800a292:	e7ab      	b.n	800a1ec <_scanf_float+0x184>
 800a294:	2203      	movs	r2, #3
 800a296:	e7a9      	b.n	800a1ec <_scanf_float+0x184>
 800a298:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a29c:	4631      	mov	r1, r6
 800a29e:	4638      	mov	r0, r7
 800a2a0:	9205      	str	r2, [sp, #20]
 800a2a2:	4798      	blx	r3
 800a2a4:	9a05      	ldr	r2, [sp, #20]
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	f43f af04 	beq.w	800a0b4 <_scanf_float+0x4c>
 800a2ac:	e715      	b.n	800a0da <_scanf_float+0x72>
 800a2ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2b2:	4632      	mov	r2, r6
 800a2b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	4798      	blx	r3
 800a2bc:	6923      	ldr	r3, [r4, #16]
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	6123      	str	r3, [r4, #16]
 800a2c2:	e715      	b.n	800a0f0 <_scanf_float+0x88>
 800a2c4:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a2c8:	2b06      	cmp	r3, #6
 800a2ca:	d80a      	bhi.n	800a2e2 <_scanf_float+0x27a>
 800a2cc:	f1bb 0f02 	cmp.w	fp, #2
 800a2d0:	d967      	bls.n	800a3a2 <_scanf_float+0x33a>
 800a2d2:	f1ab 0b03 	sub.w	fp, fp, #3
 800a2d6:	fa5f fb8b 	uxtb.w	fp, fp
 800a2da:	eba5 0b0b 	sub.w	fp, r5, fp
 800a2de:	455d      	cmp	r5, fp
 800a2e0:	d14a      	bne.n	800a378 <_scanf_float+0x310>
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	05da      	lsls	r2, r3, #23
 800a2e6:	d51f      	bpl.n	800a328 <_scanf_float+0x2c0>
 800a2e8:	055b      	lsls	r3, r3, #21
 800a2ea:	d467      	bmi.n	800a3bc <_scanf_float+0x354>
 800a2ec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a2f0:	6923      	ldr	r3, [r4, #16]
 800a2f2:	2965      	cmp	r1, #101	; 0x65
 800a2f4:	f103 33ff 	add.w	r3, r3, #4294967295
 800a2f8:	f105 3bff 	add.w	fp, r5, #4294967295
 800a2fc:	6123      	str	r3, [r4, #16]
 800a2fe:	d00d      	beq.n	800a31c <_scanf_float+0x2b4>
 800a300:	2945      	cmp	r1, #69	; 0x45
 800a302:	d00b      	beq.n	800a31c <_scanf_float+0x2b4>
 800a304:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a308:	4632      	mov	r2, r6
 800a30a:	4638      	mov	r0, r7
 800a30c:	4798      	blx	r3
 800a30e:	6923      	ldr	r3, [r4, #16]
 800a310:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800a314:	3b01      	subs	r3, #1
 800a316:	f1a5 0b02 	sub.w	fp, r5, #2
 800a31a:	6123      	str	r3, [r4, #16]
 800a31c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a320:	4632      	mov	r2, r6
 800a322:	4638      	mov	r0, r7
 800a324:	4798      	blx	r3
 800a326:	465d      	mov	r5, fp
 800a328:	6826      	ldr	r6, [r4, #0]
 800a32a:	f016 0610 	ands.w	r6, r6, #16
 800a32e:	d176      	bne.n	800a41e <_scanf_float+0x3b6>
 800a330:	702e      	strb	r6, [r5, #0]
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a33c:	d141      	bne.n	800a3c2 <_scanf_float+0x35a>
 800a33e:	9b02      	ldr	r3, [sp, #8]
 800a340:	eba9 0303 	sub.w	r3, r9, r3
 800a344:	425a      	negs	r2, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d148      	bne.n	800a3dc <_scanf_float+0x374>
 800a34a:	4641      	mov	r1, r8
 800a34c:	2200      	movs	r2, #0
 800a34e:	4638      	mov	r0, r7
 800a350:	f000 ff86 	bl	800b260 <_strtod_r>
 800a354:	6825      	ldr	r5, [r4, #0]
 800a356:	4680      	mov	r8, r0
 800a358:	f015 0f02 	tst.w	r5, #2
 800a35c:	4689      	mov	r9, r1
 800a35e:	f8da 3000 	ldr.w	r3, [sl]
 800a362:	d046      	beq.n	800a3f2 <_scanf_float+0x38a>
 800a364:	1d1a      	adds	r2, r3, #4
 800a366:	f8ca 2000 	str.w	r2, [sl]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	e9c3 8900 	strd	r8, r9, [r3]
 800a370:	68e3      	ldr	r3, [r4, #12]
 800a372:	3301      	adds	r3, #1
 800a374:	60e3      	str	r3, [r4, #12]
 800a376:	e6bf      	b.n	800a0f8 <_scanf_float+0x90>
 800a378:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a37c:	4632      	mov	r2, r6
 800a37e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a382:	4638      	mov	r0, r7
 800a384:	4798      	blx	r3
 800a386:	6923      	ldr	r3, [r4, #16]
 800a388:	3b01      	subs	r3, #1
 800a38a:	6123      	str	r3, [r4, #16]
 800a38c:	e7a7      	b.n	800a2de <_scanf_float+0x276>
 800a38e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a392:	4632      	mov	r2, r6
 800a394:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a398:	4638      	mov	r0, r7
 800a39a:	4798      	blx	r3
 800a39c:	6923      	ldr	r3, [r4, #16]
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	6123      	str	r3, [r4, #16]
 800a3a2:	4545      	cmp	r5, r8
 800a3a4:	d8f3      	bhi.n	800a38e <_scanf_float+0x326>
 800a3a6:	e6a6      	b.n	800a0f6 <_scanf_float+0x8e>
 800a3a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3ac:	4632      	mov	r2, r6
 800a3ae:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a3b2:	4638      	mov	r0, r7
 800a3b4:	4798      	blx	r3
 800a3b6:	6923      	ldr	r3, [r4, #16]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	6123      	str	r3, [r4, #16]
 800a3bc:	4545      	cmp	r5, r8
 800a3be:	d8f3      	bhi.n	800a3a8 <_scanf_float+0x340>
 800a3c0:	e699      	b.n	800a0f6 <_scanf_float+0x8e>
 800a3c2:	9b03      	ldr	r3, [sp, #12]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d0c0      	beq.n	800a34a <_scanf_float+0x2e2>
 800a3c8:	9904      	ldr	r1, [sp, #16]
 800a3ca:	230a      	movs	r3, #10
 800a3cc:	4632      	mov	r2, r6
 800a3ce:	3101      	adds	r1, #1
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	f000 ffd1 	bl	800b378 <_strtol_r>
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	9d04      	ldr	r5, [sp, #16]
 800a3da:	1ac2      	subs	r2, r0, r3
 800a3dc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a3e0:	429d      	cmp	r5, r3
 800a3e2:	bf28      	it	cs
 800a3e4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800a3e8:	490e      	ldr	r1, [pc, #56]	; (800a424 <_scanf_float+0x3bc>)
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	f000 f8b2 	bl	800a554 <siprintf>
 800a3f0:	e7ab      	b.n	800a34a <_scanf_float+0x2e2>
 800a3f2:	1d1f      	adds	r7, r3, #4
 800a3f4:	f015 0504 	ands.w	r5, r5, #4
 800a3f8:	f8ca 7000 	str.w	r7, [sl]
 800a3fc:	d1b5      	bne.n	800a36a <_scanf_float+0x302>
 800a3fe:	681f      	ldr	r7, [r3, #0]
 800a400:	4602      	mov	r2, r0
 800a402:	460b      	mov	r3, r1
 800a404:	f7f6 fb02 	bl	8000a0c <__aeabi_dcmpun>
 800a408:	b120      	cbz	r0, 800a414 <_scanf_float+0x3ac>
 800a40a:	4628      	mov	r0, r5
 800a40c:	f000 f89e 	bl	800a54c <nanf>
 800a410:	6038      	str	r0, [r7, #0]
 800a412:	e7ad      	b.n	800a370 <_scanf_float+0x308>
 800a414:	4640      	mov	r0, r8
 800a416:	4649      	mov	r1, r9
 800a418:	f7f6 fb56 	bl	8000ac8 <__aeabi_d2f>
 800a41c:	e7f8      	b.n	800a410 <_scanf_float+0x3a8>
 800a41e:	2600      	movs	r6, #0
 800a420:	e66a      	b.n	800a0f8 <_scanf_float+0x90>
 800a422:	bf00      	nop
 800a424:	0800dbb0 	.word	0x0800dbb0

0800a428 <iprintf>:
 800a428:	b40f      	push	{r0, r1, r2, r3}
 800a42a:	4b0a      	ldr	r3, [pc, #40]	; (800a454 <iprintf+0x2c>)
 800a42c:	b513      	push	{r0, r1, r4, lr}
 800a42e:	681c      	ldr	r4, [r3, #0]
 800a430:	b124      	cbz	r4, 800a43c <iprintf+0x14>
 800a432:	69a3      	ldr	r3, [r4, #24]
 800a434:	b913      	cbnz	r3, 800a43c <iprintf+0x14>
 800a436:	4620      	mov	r0, r4
 800a438:	f7ff f84e 	bl	80094d8 <__sinit>
 800a43c:	ab05      	add	r3, sp, #20
 800a43e:	9a04      	ldr	r2, [sp, #16]
 800a440:	68a1      	ldr	r1, [r4, #8]
 800a442:	4620      	mov	r0, r4
 800a444:	9301      	str	r3, [sp, #4]
 800a446:	f002 ffaf 	bl	800d3a8 <_vfiprintf_r>
 800a44a:	b002      	add	sp, #8
 800a44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a450:	b004      	add	sp, #16
 800a452:	4770      	bx	lr
 800a454:	2000018c 	.word	0x2000018c

0800a458 <cleanup_glue>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	460c      	mov	r4, r1
 800a45c:	6809      	ldr	r1, [r1, #0]
 800a45e:	4605      	mov	r5, r0
 800a460:	b109      	cbz	r1, 800a466 <cleanup_glue+0xe>
 800a462:	f7ff fff9 	bl	800a458 <cleanup_glue>
 800a466:	4621      	mov	r1, r4
 800a468:	4628      	mov	r0, r5
 800a46a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a46e:	f7ff b905 	b.w	800967c <_free_r>
	...

0800a474 <_reclaim_reent>:
 800a474:	4b2c      	ldr	r3, [pc, #176]	; (800a528 <_reclaim_reent+0xb4>)
 800a476:	b570      	push	{r4, r5, r6, lr}
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4604      	mov	r4, r0
 800a47c:	4283      	cmp	r3, r0
 800a47e:	d051      	beq.n	800a524 <_reclaim_reent+0xb0>
 800a480:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a482:	b143      	cbz	r3, 800a496 <_reclaim_reent+0x22>
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d14a      	bne.n	800a520 <_reclaim_reent+0xac>
 800a48a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a48c:	6819      	ldr	r1, [r3, #0]
 800a48e:	b111      	cbz	r1, 800a496 <_reclaim_reent+0x22>
 800a490:	4620      	mov	r0, r4
 800a492:	f7ff f8f3 	bl	800967c <_free_r>
 800a496:	6961      	ldr	r1, [r4, #20]
 800a498:	b111      	cbz	r1, 800a4a0 <_reclaim_reent+0x2c>
 800a49a:	4620      	mov	r0, r4
 800a49c:	f7ff f8ee 	bl	800967c <_free_r>
 800a4a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a4a2:	b111      	cbz	r1, 800a4aa <_reclaim_reent+0x36>
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f7ff f8e9 	bl	800967c <_free_r>
 800a4aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a4ac:	b111      	cbz	r1, 800a4b4 <_reclaim_reent+0x40>
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f7ff f8e4 	bl	800967c <_free_r>
 800a4b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a4b6:	b111      	cbz	r1, 800a4be <_reclaim_reent+0x4a>
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f7ff f8df 	bl	800967c <_free_r>
 800a4be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a4c0:	b111      	cbz	r1, 800a4c8 <_reclaim_reent+0x54>
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f7ff f8da 	bl	800967c <_free_r>
 800a4c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a4ca:	b111      	cbz	r1, 800a4d2 <_reclaim_reent+0x5e>
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f7ff f8d5 	bl	800967c <_free_r>
 800a4d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a4d4:	b111      	cbz	r1, 800a4dc <_reclaim_reent+0x68>
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f7ff f8d0 	bl	800967c <_free_r>
 800a4dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4de:	b111      	cbz	r1, 800a4e6 <_reclaim_reent+0x72>
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f7ff f8cb 	bl	800967c <_free_r>
 800a4e6:	69a3      	ldr	r3, [r4, #24]
 800a4e8:	b1e3      	cbz	r3, 800a524 <_reclaim_reent+0xb0>
 800a4ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	4798      	blx	r3
 800a4f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a4f2:	b1b9      	cbz	r1, 800a524 <_reclaim_reent+0xb0>
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4fa:	f7ff bfad 	b.w	800a458 <cleanup_glue>
 800a4fe:	5949      	ldr	r1, [r1, r5]
 800a500:	b941      	cbnz	r1, 800a514 <_reclaim_reent+0xa0>
 800a502:	3504      	adds	r5, #4
 800a504:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a506:	2d80      	cmp	r5, #128	; 0x80
 800a508:	68d9      	ldr	r1, [r3, #12]
 800a50a:	d1f8      	bne.n	800a4fe <_reclaim_reent+0x8a>
 800a50c:	4620      	mov	r0, r4
 800a50e:	f7ff f8b5 	bl	800967c <_free_r>
 800a512:	e7ba      	b.n	800a48a <_reclaim_reent+0x16>
 800a514:	680e      	ldr	r6, [r1, #0]
 800a516:	4620      	mov	r0, r4
 800a518:	f7ff f8b0 	bl	800967c <_free_r>
 800a51c:	4631      	mov	r1, r6
 800a51e:	e7ef      	b.n	800a500 <_reclaim_reent+0x8c>
 800a520:	2500      	movs	r5, #0
 800a522:	e7ef      	b.n	800a504 <_reclaim_reent+0x90>
 800a524:	bd70      	pop	{r4, r5, r6, pc}
 800a526:	bf00      	nop
 800a528:	2000018c 	.word	0x2000018c

0800a52c <_sbrk_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	2300      	movs	r3, #0
 800a530:	4c05      	ldr	r4, [pc, #20]	; (800a548 <_sbrk_r+0x1c>)
 800a532:	4605      	mov	r5, r0
 800a534:	4608      	mov	r0, r1
 800a536:	6023      	str	r3, [r4, #0]
 800a538:	f003 fa34 	bl	800d9a4 <_sbrk>
 800a53c:	1c43      	adds	r3, r0, #1
 800a53e:	d102      	bne.n	800a546 <_sbrk_r+0x1a>
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	b103      	cbz	r3, 800a546 <_sbrk_r+0x1a>
 800a544:	602b      	str	r3, [r5, #0]
 800a546:	bd38      	pop	{r3, r4, r5, pc}
 800a548:	2000181c 	.word	0x2000181c

0800a54c <nanf>:
 800a54c:	4800      	ldr	r0, [pc, #0]	; (800a550 <nanf+0x4>)
 800a54e:	4770      	bx	lr
 800a550:	7fc00000 	.word	0x7fc00000

0800a554 <siprintf>:
 800a554:	b40e      	push	{r1, r2, r3}
 800a556:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a55a:	b500      	push	{lr}
 800a55c:	b09c      	sub	sp, #112	; 0x70
 800a55e:	ab1d      	add	r3, sp, #116	; 0x74
 800a560:	9002      	str	r0, [sp, #8]
 800a562:	9006      	str	r0, [sp, #24]
 800a564:	9107      	str	r1, [sp, #28]
 800a566:	9104      	str	r1, [sp, #16]
 800a568:	4808      	ldr	r0, [pc, #32]	; (800a58c <siprintf+0x38>)
 800a56a:	4909      	ldr	r1, [pc, #36]	; (800a590 <siprintf+0x3c>)
 800a56c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a570:	9105      	str	r1, [sp, #20]
 800a572:	6800      	ldr	r0, [r0, #0]
 800a574:	a902      	add	r1, sp, #8
 800a576:	9301      	str	r3, [sp, #4]
 800a578:	f002 fdf6 	bl	800d168 <_svfiprintf_r>
 800a57c:	2200      	movs	r2, #0
 800a57e:	9b02      	ldr	r3, [sp, #8]
 800a580:	701a      	strb	r2, [r3, #0]
 800a582:	b01c      	add	sp, #112	; 0x70
 800a584:	f85d eb04 	ldr.w	lr, [sp], #4
 800a588:	b003      	add	sp, #12
 800a58a:	4770      	bx	lr
 800a58c:	2000018c 	.word	0x2000018c
 800a590:	ffff0208 	.word	0xffff0208

0800a594 <__sread>:
 800a594:	b510      	push	{r4, lr}
 800a596:	460c      	mov	r4, r1
 800a598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59c:	f003 f81a 	bl	800d5d4 <_read_r>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	bfab      	itete	ge
 800a5a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5a6:	89a3      	ldrhlt	r3, [r4, #12]
 800a5a8:	181b      	addge	r3, r3, r0
 800a5aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5ae:	bfac      	ite	ge
 800a5b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5b2:	81a3      	strhlt	r3, [r4, #12]
 800a5b4:	bd10      	pop	{r4, pc}

0800a5b6 <__swrite>:
 800a5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ba:	461f      	mov	r7, r3
 800a5bc:	898b      	ldrh	r3, [r1, #12]
 800a5be:	4605      	mov	r5, r0
 800a5c0:	05db      	lsls	r3, r3, #23
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	4616      	mov	r6, r2
 800a5c6:	d505      	bpl.n	800a5d4 <__swrite+0x1e>
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d0:	f002 f936 	bl	800c840 <_lseek_r>
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	4632      	mov	r2, r6
 800a5d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5dc:	81a3      	strh	r3, [r4, #12]
 800a5de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5e2:	463b      	mov	r3, r7
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ea:	f000 bed7 	b.w	800b39c <_write_r>

0800a5ee <__sseek>:
 800a5ee:	b510      	push	{r4, lr}
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f6:	f002 f923 	bl	800c840 <_lseek_r>
 800a5fa:	1c43      	adds	r3, r0, #1
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	bf15      	itete	ne
 800a600:	6560      	strne	r0, [r4, #84]	; 0x54
 800a602:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a606:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a60a:	81a3      	strheq	r3, [r4, #12]
 800a60c:	bf18      	it	ne
 800a60e:	81a3      	strhne	r3, [r4, #12]
 800a610:	bd10      	pop	{r4, pc}

0800a612 <__sclose>:
 800a612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a616:	f000 bed3 	b.w	800b3c0 <_close_r>

0800a61a <sulp>:
 800a61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a61e:	460f      	mov	r7, r1
 800a620:	4690      	mov	r8, r2
 800a622:	f002 fc0b 	bl	800ce3c <__ulp>
 800a626:	4604      	mov	r4, r0
 800a628:	460d      	mov	r5, r1
 800a62a:	f1b8 0f00 	cmp.w	r8, #0
 800a62e:	d011      	beq.n	800a654 <sulp+0x3a>
 800a630:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a634:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a638:	2b00      	cmp	r3, #0
 800a63a:	dd0b      	ble.n	800a654 <sulp+0x3a>
 800a63c:	2400      	movs	r4, #0
 800a63e:	051b      	lsls	r3, r3, #20
 800a640:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a644:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a648:	4622      	mov	r2, r4
 800a64a:	462b      	mov	r3, r5
 800a64c:	f7f5 ff44 	bl	80004d8 <__aeabi_dmul>
 800a650:	4604      	mov	r4, r0
 800a652:	460d      	mov	r5, r1
 800a654:	4620      	mov	r0, r4
 800a656:	4629      	mov	r1, r5
 800a658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a65c:	0000      	movs	r0, r0
	...

0800a660 <_strtod_l>:
 800a660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a664:	461f      	mov	r7, r3
 800a666:	2300      	movs	r3, #0
 800a668:	b0a1      	sub	sp, #132	; 0x84
 800a66a:	4683      	mov	fp, r0
 800a66c:	4638      	mov	r0, r7
 800a66e:	460e      	mov	r6, r1
 800a670:	9217      	str	r2, [sp, #92]	; 0x5c
 800a672:	931c      	str	r3, [sp, #112]	; 0x70
 800a674:	f002 f8d3 	bl	800c81e <__localeconv_l>
 800a678:	4680      	mov	r8, r0
 800a67a:	6800      	ldr	r0, [r0, #0]
 800a67c:	f7f5 fd68 	bl	8000150 <strlen>
 800a680:	f04f 0900 	mov.w	r9, #0
 800a684:	4604      	mov	r4, r0
 800a686:	f04f 0a00 	mov.w	sl, #0
 800a68a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a68c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a68e:	781a      	ldrb	r2, [r3, #0]
 800a690:	2a0d      	cmp	r2, #13
 800a692:	d832      	bhi.n	800a6fa <_strtod_l+0x9a>
 800a694:	2a09      	cmp	r2, #9
 800a696:	d236      	bcs.n	800a706 <_strtod_l+0xa6>
 800a698:	2a00      	cmp	r2, #0
 800a69a:	d03e      	beq.n	800a71a <_strtod_l+0xba>
 800a69c:	2300      	movs	r3, #0
 800a69e:	930d      	str	r3, [sp, #52]	; 0x34
 800a6a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a6a2:	782b      	ldrb	r3, [r5, #0]
 800a6a4:	2b30      	cmp	r3, #48	; 0x30
 800a6a6:	f040 80ac 	bne.w	800a802 <_strtod_l+0x1a2>
 800a6aa:	786b      	ldrb	r3, [r5, #1]
 800a6ac:	2b58      	cmp	r3, #88	; 0x58
 800a6ae:	d001      	beq.n	800a6b4 <_strtod_l+0x54>
 800a6b0:	2b78      	cmp	r3, #120	; 0x78
 800a6b2:	d167      	bne.n	800a784 <_strtod_l+0x124>
 800a6b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6b6:	9702      	str	r7, [sp, #8]
 800a6b8:	9301      	str	r3, [sp, #4]
 800a6ba:	ab1c      	add	r3, sp, #112	; 0x70
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	4a89      	ldr	r2, [pc, #548]	; (800a8e4 <_strtod_l+0x284>)
 800a6c0:	ab1d      	add	r3, sp, #116	; 0x74
 800a6c2:	a91b      	add	r1, sp, #108	; 0x6c
 800a6c4:	4658      	mov	r0, fp
 800a6c6:	f001 fdcf 	bl	800c268 <__gethex>
 800a6ca:	f010 0407 	ands.w	r4, r0, #7
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	d005      	beq.n	800a6de <_strtod_l+0x7e>
 800a6d2:	2c06      	cmp	r4, #6
 800a6d4:	d12b      	bne.n	800a72e <_strtod_l+0xce>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	3501      	adds	r5, #1
 800a6da:	951b      	str	r5, [sp, #108]	; 0x6c
 800a6dc:	930d      	str	r3, [sp, #52]	; 0x34
 800a6de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f040 85a6 	bne.w	800b232 <_strtod_l+0xbd2>
 800a6e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6e8:	b1e3      	cbz	r3, 800a724 <_strtod_l+0xc4>
 800a6ea:	464a      	mov	r2, r9
 800a6ec:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800a6f0:	4610      	mov	r0, r2
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	b021      	add	sp, #132	; 0x84
 800a6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fa:	2a2b      	cmp	r2, #43	; 0x2b
 800a6fc:	d015      	beq.n	800a72a <_strtod_l+0xca>
 800a6fe:	2a2d      	cmp	r2, #45	; 0x2d
 800a700:	d004      	beq.n	800a70c <_strtod_l+0xac>
 800a702:	2a20      	cmp	r2, #32
 800a704:	d1ca      	bne.n	800a69c <_strtod_l+0x3c>
 800a706:	3301      	adds	r3, #1
 800a708:	931b      	str	r3, [sp, #108]	; 0x6c
 800a70a:	e7bf      	b.n	800a68c <_strtod_l+0x2c>
 800a70c:	2201      	movs	r2, #1
 800a70e:	920d      	str	r2, [sp, #52]	; 0x34
 800a710:	1c5a      	adds	r2, r3, #1
 800a712:	921b      	str	r2, [sp, #108]	; 0x6c
 800a714:	785b      	ldrb	r3, [r3, #1]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1c2      	bne.n	800a6a0 <_strtod_l+0x40>
 800a71a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a71c:	961b      	str	r6, [sp, #108]	; 0x6c
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f040 8585 	bne.w	800b22e <_strtod_l+0xbce>
 800a724:	464a      	mov	r2, r9
 800a726:	4653      	mov	r3, sl
 800a728:	e7e2      	b.n	800a6f0 <_strtod_l+0x90>
 800a72a:	2200      	movs	r2, #0
 800a72c:	e7ef      	b.n	800a70e <_strtod_l+0xae>
 800a72e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a730:	b13a      	cbz	r2, 800a742 <_strtod_l+0xe2>
 800a732:	2135      	movs	r1, #53	; 0x35
 800a734:	a81e      	add	r0, sp, #120	; 0x78
 800a736:	f002 fc74 	bl	800d022 <__copybits>
 800a73a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a73c:	4658      	mov	r0, fp
 800a73e:	f002 f8e7 	bl	800c910 <_Bfree>
 800a742:	3c01      	subs	r4, #1
 800a744:	2c04      	cmp	r4, #4
 800a746:	d806      	bhi.n	800a756 <_strtod_l+0xf6>
 800a748:	e8df f004 	tbb	[pc, r4]
 800a74c:	1714030a 	.word	0x1714030a
 800a750:	0a          	.byte	0x0a
 800a751:	00          	.byte	0x00
 800a752:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800a756:	0731      	lsls	r1, r6, #28
 800a758:	d5c1      	bpl.n	800a6de <_strtod_l+0x7e>
 800a75a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800a75e:	e7be      	b.n	800a6de <_strtod_l+0x7e>
 800a760:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a762:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800a766:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a76a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a76e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800a772:	e7f0      	b.n	800a756 <_strtod_l+0xf6>
 800a774:	f8df a170 	ldr.w	sl, [pc, #368]	; 800a8e8 <_strtod_l+0x288>
 800a778:	e7ed      	b.n	800a756 <_strtod_l+0xf6>
 800a77a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800a77e:	f04f 39ff 	mov.w	r9, #4294967295
 800a782:	e7e8      	b.n	800a756 <_strtod_l+0xf6>
 800a784:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a786:	1c5a      	adds	r2, r3, #1
 800a788:	921b      	str	r2, [sp, #108]	; 0x6c
 800a78a:	785b      	ldrb	r3, [r3, #1]
 800a78c:	2b30      	cmp	r3, #48	; 0x30
 800a78e:	d0f9      	beq.n	800a784 <_strtod_l+0x124>
 800a790:	2b00      	cmp	r3, #0
 800a792:	d0a4      	beq.n	800a6de <_strtod_l+0x7e>
 800a794:	2301      	movs	r3, #1
 800a796:	2500      	movs	r5, #0
 800a798:	220a      	movs	r2, #10
 800a79a:	9307      	str	r3, [sp, #28]
 800a79c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a79e:	9506      	str	r5, [sp, #24]
 800a7a0:	9308      	str	r3, [sp, #32]
 800a7a2:	9504      	str	r5, [sp, #16]
 800a7a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a7a6:	7807      	ldrb	r7, [r0, #0]
 800a7a8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a7ac:	b2d9      	uxtb	r1, r3
 800a7ae:	2909      	cmp	r1, #9
 800a7b0:	d929      	bls.n	800a806 <_strtod_l+0x1a6>
 800a7b2:	4622      	mov	r2, r4
 800a7b4:	f8d8 1000 	ldr.w	r1, [r8]
 800a7b8:	f002 ff1e 	bl	800d5f8 <strncmp>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d031      	beq.n	800a824 <_strtod_l+0x1c4>
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	463b      	mov	r3, r7
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	9c04      	ldr	r4, [sp, #16]
 800a7c8:	9005      	str	r0, [sp, #20]
 800a7ca:	2b65      	cmp	r3, #101	; 0x65
 800a7cc:	d001      	beq.n	800a7d2 <_strtod_l+0x172>
 800a7ce:	2b45      	cmp	r3, #69	; 0x45
 800a7d0:	d114      	bne.n	800a7fc <_strtod_l+0x19c>
 800a7d2:	b924      	cbnz	r4, 800a7de <_strtod_l+0x17e>
 800a7d4:	b910      	cbnz	r0, 800a7dc <_strtod_l+0x17c>
 800a7d6:	9b07      	ldr	r3, [sp, #28]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d09e      	beq.n	800a71a <_strtod_l+0xba>
 800a7dc:	2400      	movs	r4, #0
 800a7de:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a7e0:	1c73      	adds	r3, r6, #1
 800a7e2:	931b      	str	r3, [sp, #108]	; 0x6c
 800a7e4:	7873      	ldrb	r3, [r6, #1]
 800a7e6:	2b2b      	cmp	r3, #43	; 0x2b
 800a7e8:	d078      	beq.n	800a8dc <_strtod_l+0x27c>
 800a7ea:	2b2d      	cmp	r3, #45	; 0x2d
 800a7ec:	d070      	beq.n	800a8d0 <_strtod_l+0x270>
 800a7ee:	f04f 0c00 	mov.w	ip, #0
 800a7f2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a7f6:	2f09      	cmp	r7, #9
 800a7f8:	d97c      	bls.n	800a8f4 <_strtod_l+0x294>
 800a7fa:	961b      	str	r6, [sp, #108]	; 0x6c
 800a7fc:	f04f 0e00 	mov.w	lr, #0
 800a800:	e09a      	b.n	800a938 <_strtod_l+0x2d8>
 800a802:	2300      	movs	r3, #0
 800a804:	e7c7      	b.n	800a796 <_strtod_l+0x136>
 800a806:	9904      	ldr	r1, [sp, #16]
 800a808:	3001      	adds	r0, #1
 800a80a:	2908      	cmp	r1, #8
 800a80c:	bfd7      	itett	le
 800a80e:	9906      	ldrle	r1, [sp, #24]
 800a810:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a814:	fb02 3301 	mlale	r3, r2, r1, r3
 800a818:	9306      	strle	r3, [sp, #24]
 800a81a:	9b04      	ldr	r3, [sp, #16]
 800a81c:	901b      	str	r0, [sp, #108]	; 0x6c
 800a81e:	3301      	adds	r3, #1
 800a820:	9304      	str	r3, [sp, #16]
 800a822:	e7bf      	b.n	800a7a4 <_strtod_l+0x144>
 800a824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a826:	191a      	adds	r2, r3, r4
 800a828:	921b      	str	r2, [sp, #108]	; 0x6c
 800a82a:	9a04      	ldr	r2, [sp, #16]
 800a82c:	5d1b      	ldrb	r3, [r3, r4]
 800a82e:	2a00      	cmp	r2, #0
 800a830:	d037      	beq.n	800a8a2 <_strtod_l+0x242>
 800a832:	4602      	mov	r2, r0
 800a834:	9c04      	ldr	r4, [sp, #16]
 800a836:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a83a:	2909      	cmp	r1, #9
 800a83c:	d913      	bls.n	800a866 <_strtod_l+0x206>
 800a83e:	2101      	movs	r1, #1
 800a840:	9105      	str	r1, [sp, #20]
 800a842:	e7c2      	b.n	800a7ca <_strtod_l+0x16a>
 800a844:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a846:	3001      	adds	r0, #1
 800a848:	1c5a      	adds	r2, r3, #1
 800a84a:	921b      	str	r2, [sp, #108]	; 0x6c
 800a84c:	785b      	ldrb	r3, [r3, #1]
 800a84e:	2b30      	cmp	r3, #48	; 0x30
 800a850:	d0f8      	beq.n	800a844 <_strtod_l+0x1e4>
 800a852:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a856:	2a08      	cmp	r2, #8
 800a858:	f200 84f0 	bhi.w	800b23c <_strtod_l+0xbdc>
 800a85c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a85e:	9208      	str	r2, [sp, #32]
 800a860:	4602      	mov	r2, r0
 800a862:	2000      	movs	r0, #0
 800a864:	4604      	mov	r4, r0
 800a866:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a86a:	f100 0101 	add.w	r1, r0, #1
 800a86e:	d012      	beq.n	800a896 <_strtod_l+0x236>
 800a870:	440a      	add	r2, r1
 800a872:	270a      	movs	r7, #10
 800a874:	4621      	mov	r1, r4
 800a876:	eb00 0c04 	add.w	ip, r0, r4
 800a87a:	458c      	cmp	ip, r1
 800a87c:	d113      	bne.n	800a8a6 <_strtod_l+0x246>
 800a87e:	1821      	adds	r1, r4, r0
 800a880:	2908      	cmp	r1, #8
 800a882:	f104 0401 	add.w	r4, r4, #1
 800a886:	4404      	add	r4, r0
 800a888:	dc19      	bgt.n	800a8be <_strtod_l+0x25e>
 800a88a:	210a      	movs	r1, #10
 800a88c:	9b06      	ldr	r3, [sp, #24]
 800a88e:	fb01 e303 	mla	r3, r1, r3, lr
 800a892:	9306      	str	r3, [sp, #24]
 800a894:	2100      	movs	r1, #0
 800a896:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a898:	1c58      	adds	r0, r3, #1
 800a89a:	901b      	str	r0, [sp, #108]	; 0x6c
 800a89c:	785b      	ldrb	r3, [r3, #1]
 800a89e:	4608      	mov	r0, r1
 800a8a0:	e7c9      	b.n	800a836 <_strtod_l+0x1d6>
 800a8a2:	9804      	ldr	r0, [sp, #16]
 800a8a4:	e7d3      	b.n	800a84e <_strtod_l+0x1ee>
 800a8a6:	2908      	cmp	r1, #8
 800a8a8:	f101 0101 	add.w	r1, r1, #1
 800a8ac:	dc03      	bgt.n	800a8b6 <_strtod_l+0x256>
 800a8ae:	9b06      	ldr	r3, [sp, #24]
 800a8b0:	437b      	muls	r3, r7
 800a8b2:	9306      	str	r3, [sp, #24]
 800a8b4:	e7e1      	b.n	800a87a <_strtod_l+0x21a>
 800a8b6:	2910      	cmp	r1, #16
 800a8b8:	bfd8      	it	le
 800a8ba:	437d      	mulle	r5, r7
 800a8bc:	e7dd      	b.n	800a87a <_strtod_l+0x21a>
 800a8be:	2c10      	cmp	r4, #16
 800a8c0:	bfdc      	itt	le
 800a8c2:	210a      	movle	r1, #10
 800a8c4:	fb01 e505 	mlale	r5, r1, r5, lr
 800a8c8:	e7e4      	b.n	800a894 <_strtod_l+0x234>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	9305      	str	r3, [sp, #20]
 800a8ce:	e781      	b.n	800a7d4 <_strtod_l+0x174>
 800a8d0:	f04f 0c01 	mov.w	ip, #1
 800a8d4:	1cb3      	adds	r3, r6, #2
 800a8d6:	931b      	str	r3, [sp, #108]	; 0x6c
 800a8d8:	78b3      	ldrb	r3, [r6, #2]
 800a8da:	e78a      	b.n	800a7f2 <_strtod_l+0x192>
 800a8dc:	f04f 0c00 	mov.w	ip, #0
 800a8e0:	e7f8      	b.n	800a8d4 <_strtod_l+0x274>
 800a8e2:	bf00      	nop
 800a8e4:	0800dbb8 	.word	0x0800dbb8
 800a8e8:	7ff00000 	.word	0x7ff00000
 800a8ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a8ee:	1c5f      	adds	r7, r3, #1
 800a8f0:	971b      	str	r7, [sp, #108]	; 0x6c
 800a8f2:	785b      	ldrb	r3, [r3, #1]
 800a8f4:	2b30      	cmp	r3, #48	; 0x30
 800a8f6:	d0f9      	beq.n	800a8ec <_strtod_l+0x28c>
 800a8f8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a8fc:	2f08      	cmp	r7, #8
 800a8fe:	f63f af7d 	bhi.w	800a7fc <_strtod_l+0x19c>
 800a902:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a906:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a908:	9309      	str	r3, [sp, #36]	; 0x24
 800a90a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a90c:	1c5f      	adds	r7, r3, #1
 800a90e:	971b      	str	r7, [sp, #108]	; 0x6c
 800a910:	785b      	ldrb	r3, [r3, #1]
 800a912:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a916:	f1b8 0f09 	cmp.w	r8, #9
 800a91a:	d937      	bls.n	800a98c <_strtod_l+0x32c>
 800a91c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a91e:	1a7f      	subs	r7, r7, r1
 800a920:	2f08      	cmp	r7, #8
 800a922:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a926:	dc37      	bgt.n	800a998 <_strtod_l+0x338>
 800a928:	45be      	cmp	lr, r7
 800a92a:	bfa8      	it	ge
 800a92c:	46be      	movge	lr, r7
 800a92e:	f1bc 0f00 	cmp.w	ip, #0
 800a932:	d001      	beq.n	800a938 <_strtod_l+0x2d8>
 800a934:	f1ce 0e00 	rsb	lr, lr, #0
 800a938:	2c00      	cmp	r4, #0
 800a93a:	d151      	bne.n	800a9e0 <_strtod_l+0x380>
 800a93c:	2800      	cmp	r0, #0
 800a93e:	f47f aece 	bne.w	800a6de <_strtod_l+0x7e>
 800a942:	9a07      	ldr	r2, [sp, #28]
 800a944:	2a00      	cmp	r2, #0
 800a946:	f47f aeca 	bne.w	800a6de <_strtod_l+0x7e>
 800a94a:	9a05      	ldr	r2, [sp, #20]
 800a94c:	2a00      	cmp	r2, #0
 800a94e:	f47f aee4 	bne.w	800a71a <_strtod_l+0xba>
 800a952:	2b4e      	cmp	r3, #78	; 0x4e
 800a954:	d027      	beq.n	800a9a6 <_strtod_l+0x346>
 800a956:	dc21      	bgt.n	800a99c <_strtod_l+0x33c>
 800a958:	2b49      	cmp	r3, #73	; 0x49
 800a95a:	f47f aede 	bne.w	800a71a <_strtod_l+0xba>
 800a95e:	49a4      	ldr	r1, [pc, #656]	; (800abf0 <_strtod_l+0x590>)
 800a960:	a81b      	add	r0, sp, #108	; 0x6c
 800a962:	f001 feb5 	bl	800c6d0 <__match>
 800a966:	2800      	cmp	r0, #0
 800a968:	f43f aed7 	beq.w	800a71a <_strtod_l+0xba>
 800a96c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a96e:	49a1      	ldr	r1, [pc, #644]	; (800abf4 <_strtod_l+0x594>)
 800a970:	3b01      	subs	r3, #1
 800a972:	a81b      	add	r0, sp, #108	; 0x6c
 800a974:	931b      	str	r3, [sp, #108]	; 0x6c
 800a976:	f001 feab 	bl	800c6d0 <__match>
 800a97a:	b910      	cbnz	r0, 800a982 <_strtod_l+0x322>
 800a97c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a97e:	3301      	adds	r3, #1
 800a980:	931b      	str	r3, [sp, #108]	; 0x6c
 800a982:	f8df a284 	ldr.w	sl, [pc, #644]	; 800ac08 <_strtod_l+0x5a8>
 800a986:	f04f 0900 	mov.w	r9, #0
 800a98a:	e6a8      	b.n	800a6de <_strtod_l+0x7e>
 800a98c:	210a      	movs	r1, #10
 800a98e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a992:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a996:	e7b8      	b.n	800a90a <_strtod_l+0x2aa>
 800a998:	46be      	mov	lr, r7
 800a99a:	e7c8      	b.n	800a92e <_strtod_l+0x2ce>
 800a99c:	2b69      	cmp	r3, #105	; 0x69
 800a99e:	d0de      	beq.n	800a95e <_strtod_l+0x2fe>
 800a9a0:	2b6e      	cmp	r3, #110	; 0x6e
 800a9a2:	f47f aeba 	bne.w	800a71a <_strtod_l+0xba>
 800a9a6:	4994      	ldr	r1, [pc, #592]	; (800abf8 <_strtod_l+0x598>)
 800a9a8:	a81b      	add	r0, sp, #108	; 0x6c
 800a9aa:	f001 fe91 	bl	800c6d0 <__match>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	f43f aeb3 	beq.w	800a71a <_strtod_l+0xba>
 800a9b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	2b28      	cmp	r3, #40	; 0x28
 800a9ba:	d10e      	bne.n	800a9da <_strtod_l+0x37a>
 800a9bc:	aa1e      	add	r2, sp, #120	; 0x78
 800a9be:	498f      	ldr	r1, [pc, #572]	; (800abfc <_strtod_l+0x59c>)
 800a9c0:	a81b      	add	r0, sp, #108	; 0x6c
 800a9c2:	f001 fe99 	bl	800c6f8 <__hexnan>
 800a9c6:	2805      	cmp	r0, #5
 800a9c8:	d107      	bne.n	800a9da <_strtod_l+0x37a>
 800a9ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a9cc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800a9d0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800a9d4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800a9d8:	e681      	b.n	800a6de <_strtod_l+0x7e>
 800a9da:	f8df a234 	ldr.w	sl, [pc, #564]	; 800ac10 <_strtod_l+0x5b0>
 800a9de:	e7d2      	b.n	800a986 <_strtod_l+0x326>
 800a9e0:	ebae 0302 	sub.w	r3, lr, r2
 800a9e4:	9307      	str	r3, [sp, #28]
 800a9e6:	9b04      	ldr	r3, [sp, #16]
 800a9e8:	9806      	ldr	r0, [sp, #24]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	bf08      	it	eq
 800a9ee:	4623      	moveq	r3, r4
 800a9f0:	2c10      	cmp	r4, #16
 800a9f2:	9304      	str	r3, [sp, #16]
 800a9f4:	46a0      	mov	r8, r4
 800a9f6:	bfa8      	it	ge
 800a9f8:	f04f 0810 	movge.w	r8, #16
 800a9fc:	f7f5 fcf2 	bl	80003e4 <__aeabi_ui2d>
 800aa00:	2c09      	cmp	r4, #9
 800aa02:	4681      	mov	r9, r0
 800aa04:	468a      	mov	sl, r1
 800aa06:	dc13      	bgt.n	800aa30 <_strtod_l+0x3d0>
 800aa08:	9b07      	ldr	r3, [sp, #28]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f43f ae67 	beq.w	800a6de <_strtod_l+0x7e>
 800aa10:	9b07      	ldr	r3, [sp, #28]
 800aa12:	dd7e      	ble.n	800ab12 <_strtod_l+0x4b2>
 800aa14:	2b16      	cmp	r3, #22
 800aa16:	dc65      	bgt.n	800aae4 <_strtod_l+0x484>
 800aa18:	4a79      	ldr	r2, [pc, #484]	; (800ac00 <_strtod_l+0x5a0>)
 800aa1a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800aa1e:	464a      	mov	r2, r9
 800aa20:	e9de 0100 	ldrd	r0, r1, [lr]
 800aa24:	4653      	mov	r3, sl
 800aa26:	f7f5 fd57 	bl	80004d8 <__aeabi_dmul>
 800aa2a:	4681      	mov	r9, r0
 800aa2c:	468a      	mov	sl, r1
 800aa2e:	e656      	b.n	800a6de <_strtod_l+0x7e>
 800aa30:	4b73      	ldr	r3, [pc, #460]	; (800ac00 <_strtod_l+0x5a0>)
 800aa32:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aa36:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aa3a:	f7f5 fd4d 	bl	80004d8 <__aeabi_dmul>
 800aa3e:	4606      	mov	r6, r0
 800aa40:	4628      	mov	r0, r5
 800aa42:	460f      	mov	r7, r1
 800aa44:	f7f5 fcce 	bl	80003e4 <__aeabi_ui2d>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	4639      	mov	r1, r7
 800aa50:	f7f5 fb8c 	bl	800016c <__adddf3>
 800aa54:	2c0f      	cmp	r4, #15
 800aa56:	4681      	mov	r9, r0
 800aa58:	468a      	mov	sl, r1
 800aa5a:	ddd5      	ble.n	800aa08 <_strtod_l+0x3a8>
 800aa5c:	9b07      	ldr	r3, [sp, #28]
 800aa5e:	eba4 0808 	sub.w	r8, r4, r8
 800aa62:	4498      	add	r8, r3
 800aa64:	f1b8 0f00 	cmp.w	r8, #0
 800aa68:	f340 809a 	ble.w	800aba0 <_strtod_l+0x540>
 800aa6c:	f018 030f 	ands.w	r3, r8, #15
 800aa70:	d00a      	beq.n	800aa88 <_strtod_l+0x428>
 800aa72:	4963      	ldr	r1, [pc, #396]	; (800ac00 <_strtod_l+0x5a0>)
 800aa74:	464a      	mov	r2, r9
 800aa76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa7e:	4653      	mov	r3, sl
 800aa80:	f7f5 fd2a 	bl	80004d8 <__aeabi_dmul>
 800aa84:	4681      	mov	r9, r0
 800aa86:	468a      	mov	sl, r1
 800aa88:	f038 080f 	bics.w	r8, r8, #15
 800aa8c:	d077      	beq.n	800ab7e <_strtod_l+0x51e>
 800aa8e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800aa92:	dd4b      	ble.n	800ab2c <_strtod_l+0x4cc>
 800aa94:	f04f 0800 	mov.w	r8, #0
 800aa98:	f8cd 8010 	str.w	r8, [sp, #16]
 800aa9c:	f8cd 8020 	str.w	r8, [sp, #32]
 800aaa0:	f8cd 8018 	str.w	r8, [sp, #24]
 800aaa4:	2322      	movs	r3, #34	; 0x22
 800aaa6:	f04f 0900 	mov.w	r9, #0
 800aaaa:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800ac08 <_strtod_l+0x5a8>
 800aaae:	f8cb 3000 	str.w	r3, [fp]
 800aab2:	9b08      	ldr	r3, [sp, #32]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f43f ae12 	beq.w	800a6de <_strtod_l+0x7e>
 800aaba:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aabc:	4658      	mov	r0, fp
 800aabe:	f001 ff27 	bl	800c910 <_Bfree>
 800aac2:	9906      	ldr	r1, [sp, #24]
 800aac4:	4658      	mov	r0, fp
 800aac6:	f001 ff23 	bl	800c910 <_Bfree>
 800aaca:	9904      	ldr	r1, [sp, #16]
 800aacc:	4658      	mov	r0, fp
 800aace:	f001 ff1f 	bl	800c910 <_Bfree>
 800aad2:	9908      	ldr	r1, [sp, #32]
 800aad4:	4658      	mov	r0, fp
 800aad6:	f001 ff1b 	bl	800c910 <_Bfree>
 800aada:	4641      	mov	r1, r8
 800aadc:	4658      	mov	r0, fp
 800aade:	f001 ff17 	bl	800c910 <_Bfree>
 800aae2:	e5fc      	b.n	800a6de <_strtod_l+0x7e>
 800aae4:	9a07      	ldr	r2, [sp, #28]
 800aae6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800aaea:	4293      	cmp	r3, r2
 800aaec:	dbb6      	blt.n	800aa5c <_strtod_l+0x3fc>
 800aaee:	4d44      	ldr	r5, [pc, #272]	; (800ac00 <_strtod_l+0x5a0>)
 800aaf0:	f1c4 040f 	rsb	r4, r4, #15
 800aaf4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800aaf8:	464a      	mov	r2, r9
 800aafa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aafe:	4653      	mov	r3, sl
 800ab00:	f7f5 fcea 	bl	80004d8 <__aeabi_dmul>
 800ab04:	9b07      	ldr	r3, [sp, #28]
 800ab06:	1b1c      	subs	r4, r3, r4
 800ab08:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ab0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab10:	e789      	b.n	800aa26 <_strtod_l+0x3c6>
 800ab12:	f113 0f16 	cmn.w	r3, #22
 800ab16:	dba1      	blt.n	800aa5c <_strtod_l+0x3fc>
 800ab18:	4a39      	ldr	r2, [pc, #228]	; (800ac00 <_strtod_l+0x5a0>)
 800ab1a:	4648      	mov	r0, r9
 800ab1c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800ab20:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ab24:	4651      	mov	r1, sl
 800ab26:	f7f5 fe01 	bl	800072c <__aeabi_ddiv>
 800ab2a:	e77e      	b.n	800aa2a <_strtod_l+0x3ca>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	4648      	mov	r0, r9
 800ab30:	4651      	mov	r1, sl
 800ab32:	461d      	mov	r5, r3
 800ab34:	4e33      	ldr	r6, [pc, #204]	; (800ac04 <_strtod_l+0x5a4>)
 800ab36:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ab3a:	f1b8 0f01 	cmp.w	r8, #1
 800ab3e:	dc21      	bgt.n	800ab84 <_strtod_l+0x524>
 800ab40:	b10b      	cbz	r3, 800ab46 <_strtod_l+0x4e6>
 800ab42:	4681      	mov	r9, r0
 800ab44:	468a      	mov	sl, r1
 800ab46:	4b2f      	ldr	r3, [pc, #188]	; (800ac04 <_strtod_l+0x5a4>)
 800ab48:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800ab4c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ab50:	464a      	mov	r2, r9
 800ab52:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ab56:	4653      	mov	r3, sl
 800ab58:	f7f5 fcbe 	bl	80004d8 <__aeabi_dmul>
 800ab5c:	4b2a      	ldr	r3, [pc, #168]	; (800ac08 <_strtod_l+0x5a8>)
 800ab5e:	460a      	mov	r2, r1
 800ab60:	400b      	ands	r3, r1
 800ab62:	492a      	ldr	r1, [pc, #168]	; (800ac0c <_strtod_l+0x5ac>)
 800ab64:	4681      	mov	r9, r0
 800ab66:	428b      	cmp	r3, r1
 800ab68:	d894      	bhi.n	800aa94 <_strtod_l+0x434>
 800ab6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ab6e:	428b      	cmp	r3, r1
 800ab70:	bf86      	itte	hi
 800ab72:	f04f 39ff 	movhi.w	r9, #4294967295
 800ab76:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800ac14 <_strtod_l+0x5b4>
 800ab7a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800ab7e:	2300      	movs	r3, #0
 800ab80:	9305      	str	r3, [sp, #20]
 800ab82:	e07b      	b.n	800ac7c <_strtod_l+0x61c>
 800ab84:	f018 0f01 	tst.w	r8, #1
 800ab88:	d006      	beq.n	800ab98 <_strtod_l+0x538>
 800ab8a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800ab8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab92:	f7f5 fca1 	bl	80004d8 <__aeabi_dmul>
 800ab96:	2301      	movs	r3, #1
 800ab98:	3501      	adds	r5, #1
 800ab9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab9e:	e7cc      	b.n	800ab3a <_strtod_l+0x4da>
 800aba0:	d0ed      	beq.n	800ab7e <_strtod_l+0x51e>
 800aba2:	f1c8 0800 	rsb	r8, r8, #0
 800aba6:	f018 020f 	ands.w	r2, r8, #15
 800abaa:	d00a      	beq.n	800abc2 <_strtod_l+0x562>
 800abac:	4b14      	ldr	r3, [pc, #80]	; (800ac00 <_strtod_l+0x5a0>)
 800abae:	4648      	mov	r0, r9
 800abb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abb4:	4651      	mov	r1, sl
 800abb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abba:	f7f5 fdb7 	bl	800072c <__aeabi_ddiv>
 800abbe:	4681      	mov	r9, r0
 800abc0:	468a      	mov	sl, r1
 800abc2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800abc6:	d0da      	beq.n	800ab7e <_strtod_l+0x51e>
 800abc8:	f1b8 0f1f 	cmp.w	r8, #31
 800abcc:	dd24      	ble.n	800ac18 <_strtod_l+0x5b8>
 800abce:	f04f 0800 	mov.w	r8, #0
 800abd2:	f8cd 8010 	str.w	r8, [sp, #16]
 800abd6:	f8cd 8020 	str.w	r8, [sp, #32]
 800abda:	f8cd 8018 	str.w	r8, [sp, #24]
 800abde:	2322      	movs	r3, #34	; 0x22
 800abe0:	f04f 0900 	mov.w	r9, #0
 800abe4:	f04f 0a00 	mov.w	sl, #0
 800abe8:	f8cb 3000 	str.w	r3, [fp]
 800abec:	e761      	b.n	800aab2 <_strtod_l+0x452>
 800abee:	bf00      	nop
 800abf0:	0800db81 	.word	0x0800db81
 800abf4:	0800dc0b 	.word	0x0800dc0b
 800abf8:	0800db89 	.word	0x0800db89
 800abfc:	0800dbcc 	.word	0x0800dbcc
 800ac00:	0800dc48 	.word	0x0800dc48
 800ac04:	0800dc20 	.word	0x0800dc20
 800ac08:	7ff00000 	.word	0x7ff00000
 800ac0c:	7ca00000 	.word	0x7ca00000
 800ac10:	fff80000 	.word	0xfff80000
 800ac14:	7fefffff 	.word	0x7fefffff
 800ac18:	f018 0310 	ands.w	r3, r8, #16
 800ac1c:	bf18      	it	ne
 800ac1e:	236a      	movne	r3, #106	; 0x6a
 800ac20:	4648      	mov	r0, r9
 800ac22:	9305      	str	r3, [sp, #20]
 800ac24:	4651      	mov	r1, sl
 800ac26:	2300      	movs	r3, #0
 800ac28:	4da1      	ldr	r5, [pc, #644]	; (800aeb0 <_strtod_l+0x850>)
 800ac2a:	f1b8 0f00 	cmp.w	r8, #0
 800ac2e:	f300 8113 	bgt.w	800ae58 <_strtod_l+0x7f8>
 800ac32:	b10b      	cbz	r3, 800ac38 <_strtod_l+0x5d8>
 800ac34:	4681      	mov	r9, r0
 800ac36:	468a      	mov	sl, r1
 800ac38:	9b05      	ldr	r3, [sp, #20]
 800ac3a:	b1bb      	cbz	r3, 800ac6c <_strtod_l+0x60c>
 800ac3c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800ac40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	4651      	mov	r1, sl
 800ac48:	dd10      	ble.n	800ac6c <_strtod_l+0x60c>
 800ac4a:	2b1f      	cmp	r3, #31
 800ac4c:	f340 8110 	ble.w	800ae70 <_strtod_l+0x810>
 800ac50:	2b34      	cmp	r3, #52	; 0x34
 800ac52:	bfd8      	it	le
 800ac54:	f04f 32ff 	movle.w	r2, #4294967295
 800ac58:	f04f 0900 	mov.w	r9, #0
 800ac5c:	bfcf      	iteee	gt
 800ac5e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800ac62:	3b20      	suble	r3, #32
 800ac64:	fa02 f303 	lslle.w	r3, r2, r3
 800ac68:	ea03 0a01 	andle.w	sl, r3, r1
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	2300      	movs	r3, #0
 800ac70:	4648      	mov	r0, r9
 800ac72:	4651      	mov	r1, sl
 800ac74:	f7f5 fe98 	bl	80009a8 <__aeabi_dcmpeq>
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	d1a8      	bne.n	800abce <_strtod_l+0x56e>
 800ac7c:	9b06      	ldr	r3, [sp, #24]
 800ac7e:	9a04      	ldr	r2, [sp, #16]
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	9908      	ldr	r1, [sp, #32]
 800ac84:	4623      	mov	r3, r4
 800ac86:	4658      	mov	r0, fp
 800ac88:	f001 fe94 	bl	800c9b4 <__s2b>
 800ac8c:	9008      	str	r0, [sp, #32]
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	f43f af00 	beq.w	800aa94 <_strtod_l+0x434>
 800ac94:	9a07      	ldr	r2, [sp, #28]
 800ac96:	9b07      	ldr	r3, [sp, #28]
 800ac98:	2a00      	cmp	r2, #0
 800ac9a:	f1c3 0300 	rsb	r3, r3, #0
 800ac9e:	bfa8      	it	ge
 800aca0:	2300      	movge	r3, #0
 800aca2:	f04f 0800 	mov.w	r8, #0
 800aca6:	930e      	str	r3, [sp, #56]	; 0x38
 800aca8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800acac:	9316      	str	r3, [sp, #88]	; 0x58
 800acae:	f8cd 8010 	str.w	r8, [sp, #16]
 800acb2:	9b08      	ldr	r3, [sp, #32]
 800acb4:	4658      	mov	r0, fp
 800acb6:	6859      	ldr	r1, [r3, #4]
 800acb8:	f001 fdf6 	bl	800c8a8 <_Balloc>
 800acbc:	9006      	str	r0, [sp, #24]
 800acbe:	2800      	cmp	r0, #0
 800acc0:	f43f aef0 	beq.w	800aaa4 <_strtod_l+0x444>
 800acc4:	9b08      	ldr	r3, [sp, #32]
 800acc6:	300c      	adds	r0, #12
 800acc8:	691a      	ldr	r2, [r3, #16]
 800acca:	f103 010c 	add.w	r1, r3, #12
 800acce:	3202      	adds	r2, #2
 800acd0:	0092      	lsls	r2, r2, #2
 800acd2:	f7fe fcbf 	bl	8009654 <memcpy>
 800acd6:	ab1e      	add	r3, sp, #120	; 0x78
 800acd8:	9301      	str	r3, [sp, #4]
 800acda:	ab1d      	add	r3, sp, #116	; 0x74
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	464a      	mov	r2, r9
 800ace0:	4653      	mov	r3, sl
 800ace2:	4658      	mov	r0, fp
 800ace4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800ace8:	f002 f91e 	bl	800cf28 <__d2b>
 800acec:	901c      	str	r0, [sp, #112]	; 0x70
 800acee:	2800      	cmp	r0, #0
 800acf0:	f43f aed8 	beq.w	800aaa4 <_strtod_l+0x444>
 800acf4:	2101      	movs	r1, #1
 800acf6:	4658      	mov	r0, fp
 800acf8:	f001 fee8 	bl	800cacc <__i2b>
 800acfc:	9004      	str	r0, [sp, #16]
 800acfe:	4603      	mov	r3, r0
 800ad00:	2800      	cmp	r0, #0
 800ad02:	f43f aecf 	beq.w	800aaa4 <_strtod_l+0x444>
 800ad06:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800ad08:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ad0a:	2d00      	cmp	r5, #0
 800ad0c:	bfab      	itete	ge
 800ad0e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ad10:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ad12:	18ee      	addge	r6, r5, r3
 800ad14:	1b5c      	sublt	r4, r3, r5
 800ad16:	9b05      	ldr	r3, [sp, #20]
 800ad18:	bfa8      	it	ge
 800ad1a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800ad1c:	eba5 0503 	sub.w	r5, r5, r3
 800ad20:	4415      	add	r5, r2
 800ad22:	4b64      	ldr	r3, [pc, #400]	; (800aeb4 <_strtod_l+0x854>)
 800ad24:	f105 35ff 	add.w	r5, r5, #4294967295
 800ad28:	bfb8      	it	lt
 800ad2a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800ad2c:	429d      	cmp	r5, r3
 800ad2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ad32:	f280 80af 	bge.w	800ae94 <_strtod_l+0x834>
 800ad36:	1b5b      	subs	r3, r3, r5
 800ad38:	2b1f      	cmp	r3, #31
 800ad3a:	eba2 0203 	sub.w	r2, r2, r3
 800ad3e:	f04f 0701 	mov.w	r7, #1
 800ad42:	f300 809c 	bgt.w	800ae7e <_strtod_l+0x81e>
 800ad46:	2500      	movs	r5, #0
 800ad48:	fa07 f303 	lsl.w	r3, r7, r3
 800ad4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad4e:	18b7      	adds	r7, r6, r2
 800ad50:	9b05      	ldr	r3, [sp, #20]
 800ad52:	42be      	cmp	r6, r7
 800ad54:	4414      	add	r4, r2
 800ad56:	441c      	add	r4, r3
 800ad58:	4633      	mov	r3, r6
 800ad5a:	bfa8      	it	ge
 800ad5c:	463b      	movge	r3, r7
 800ad5e:	42a3      	cmp	r3, r4
 800ad60:	bfa8      	it	ge
 800ad62:	4623      	movge	r3, r4
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	bfc2      	ittt	gt
 800ad68:	1aff      	subgt	r7, r7, r3
 800ad6a:	1ae4      	subgt	r4, r4, r3
 800ad6c:	1af6      	subgt	r6, r6, r3
 800ad6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad70:	b1bb      	cbz	r3, 800ada2 <_strtod_l+0x742>
 800ad72:	461a      	mov	r2, r3
 800ad74:	9904      	ldr	r1, [sp, #16]
 800ad76:	4658      	mov	r0, fp
 800ad78:	f001 ff46 	bl	800cc08 <__pow5mult>
 800ad7c:	9004      	str	r0, [sp, #16]
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	f43f ae90 	beq.w	800aaa4 <_strtod_l+0x444>
 800ad84:	4601      	mov	r1, r0
 800ad86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ad88:	4658      	mov	r0, fp
 800ad8a:	f001 fea8 	bl	800cade <__multiply>
 800ad8e:	9009      	str	r0, [sp, #36]	; 0x24
 800ad90:	2800      	cmp	r0, #0
 800ad92:	f43f ae87 	beq.w	800aaa4 <_strtod_l+0x444>
 800ad96:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad98:	4658      	mov	r0, fp
 800ad9a:	f001 fdb9 	bl	800c910 <_Bfree>
 800ad9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ada0:	931c      	str	r3, [sp, #112]	; 0x70
 800ada2:	2f00      	cmp	r7, #0
 800ada4:	dc7a      	bgt.n	800ae9c <_strtod_l+0x83c>
 800ada6:	9b07      	ldr	r3, [sp, #28]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	dd08      	ble.n	800adbe <_strtod_l+0x75e>
 800adac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800adae:	9906      	ldr	r1, [sp, #24]
 800adb0:	4658      	mov	r0, fp
 800adb2:	f001 ff29 	bl	800cc08 <__pow5mult>
 800adb6:	9006      	str	r0, [sp, #24]
 800adb8:	2800      	cmp	r0, #0
 800adba:	f43f ae73 	beq.w	800aaa4 <_strtod_l+0x444>
 800adbe:	2c00      	cmp	r4, #0
 800adc0:	dd08      	ble.n	800add4 <_strtod_l+0x774>
 800adc2:	4622      	mov	r2, r4
 800adc4:	9906      	ldr	r1, [sp, #24]
 800adc6:	4658      	mov	r0, fp
 800adc8:	f001 ff6c 	bl	800cca4 <__lshift>
 800adcc:	9006      	str	r0, [sp, #24]
 800adce:	2800      	cmp	r0, #0
 800add0:	f43f ae68 	beq.w	800aaa4 <_strtod_l+0x444>
 800add4:	2e00      	cmp	r6, #0
 800add6:	dd08      	ble.n	800adea <_strtod_l+0x78a>
 800add8:	4632      	mov	r2, r6
 800adda:	9904      	ldr	r1, [sp, #16]
 800addc:	4658      	mov	r0, fp
 800adde:	f001 ff61 	bl	800cca4 <__lshift>
 800ade2:	9004      	str	r0, [sp, #16]
 800ade4:	2800      	cmp	r0, #0
 800ade6:	f43f ae5d 	beq.w	800aaa4 <_strtod_l+0x444>
 800adea:	9a06      	ldr	r2, [sp, #24]
 800adec:	991c      	ldr	r1, [sp, #112]	; 0x70
 800adee:	4658      	mov	r0, fp
 800adf0:	f001 ffc6 	bl	800cd80 <__mdiff>
 800adf4:	4680      	mov	r8, r0
 800adf6:	2800      	cmp	r0, #0
 800adf8:	f43f ae54 	beq.w	800aaa4 <_strtod_l+0x444>
 800adfc:	2400      	movs	r4, #0
 800adfe:	68c3      	ldr	r3, [r0, #12]
 800ae00:	9904      	ldr	r1, [sp, #16]
 800ae02:	60c4      	str	r4, [r0, #12]
 800ae04:	930c      	str	r3, [sp, #48]	; 0x30
 800ae06:	f001 ffa1 	bl	800cd4c <__mcmp>
 800ae0a:	42a0      	cmp	r0, r4
 800ae0c:	da54      	bge.n	800aeb8 <_strtod_l+0x858>
 800ae0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae10:	b9f3      	cbnz	r3, 800ae50 <_strtod_l+0x7f0>
 800ae12:	f1b9 0f00 	cmp.w	r9, #0
 800ae16:	d11b      	bne.n	800ae50 <_strtod_l+0x7f0>
 800ae18:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800ae1c:	b9c3      	cbnz	r3, 800ae50 <_strtod_l+0x7f0>
 800ae1e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ae22:	0d1b      	lsrs	r3, r3, #20
 800ae24:	051b      	lsls	r3, r3, #20
 800ae26:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ae2a:	d911      	bls.n	800ae50 <_strtod_l+0x7f0>
 800ae2c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ae30:	b91b      	cbnz	r3, 800ae3a <_strtod_l+0x7da>
 800ae32:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	dd0a      	ble.n	800ae50 <_strtod_l+0x7f0>
 800ae3a:	4641      	mov	r1, r8
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	4658      	mov	r0, fp
 800ae40:	f001 ff30 	bl	800cca4 <__lshift>
 800ae44:	9904      	ldr	r1, [sp, #16]
 800ae46:	4680      	mov	r8, r0
 800ae48:	f001 ff80 	bl	800cd4c <__mcmp>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	dc68      	bgt.n	800af22 <_strtod_l+0x8c2>
 800ae50:	9b05      	ldr	r3, [sp, #20]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d172      	bne.n	800af3c <_strtod_l+0x8dc>
 800ae56:	e630      	b.n	800aaba <_strtod_l+0x45a>
 800ae58:	f018 0f01 	tst.w	r8, #1
 800ae5c:	d004      	beq.n	800ae68 <_strtod_l+0x808>
 800ae5e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae62:	f7f5 fb39 	bl	80004d8 <__aeabi_dmul>
 800ae66:	2301      	movs	r3, #1
 800ae68:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ae6c:	3508      	adds	r5, #8
 800ae6e:	e6dc      	b.n	800ac2a <_strtod_l+0x5ca>
 800ae70:	f04f 32ff 	mov.w	r2, #4294967295
 800ae74:	fa02 f303 	lsl.w	r3, r2, r3
 800ae78:	ea03 0909 	and.w	r9, r3, r9
 800ae7c:	e6f6      	b.n	800ac6c <_strtod_l+0x60c>
 800ae7e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ae82:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ae86:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ae8a:	35e2      	adds	r5, #226	; 0xe2
 800ae8c:	fa07 f505 	lsl.w	r5, r7, r5
 800ae90:	970f      	str	r7, [sp, #60]	; 0x3c
 800ae92:	e75c      	b.n	800ad4e <_strtod_l+0x6ee>
 800ae94:	2301      	movs	r3, #1
 800ae96:	2500      	movs	r5, #0
 800ae98:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae9a:	e758      	b.n	800ad4e <_strtod_l+0x6ee>
 800ae9c:	463a      	mov	r2, r7
 800ae9e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aea0:	4658      	mov	r0, fp
 800aea2:	f001 feff 	bl	800cca4 <__lshift>
 800aea6:	901c      	str	r0, [sp, #112]	; 0x70
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	f47f af7c 	bne.w	800ada6 <_strtod_l+0x746>
 800aeae:	e5f9      	b.n	800aaa4 <_strtod_l+0x444>
 800aeb0:	0800dbe0 	.word	0x0800dbe0
 800aeb4:	fffffc02 	.word	0xfffffc02
 800aeb8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800aebc:	f040 8089 	bne.w	800afd2 <_strtod_l+0x972>
 800aec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aec2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800aec6:	b342      	cbz	r2, 800af1a <_strtod_l+0x8ba>
 800aec8:	4aaf      	ldr	r2, [pc, #700]	; (800b188 <_strtod_l+0xb28>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d156      	bne.n	800af7c <_strtod_l+0x91c>
 800aece:	9b05      	ldr	r3, [sp, #20]
 800aed0:	4648      	mov	r0, r9
 800aed2:	b1eb      	cbz	r3, 800af10 <_strtod_l+0x8b0>
 800aed4:	4653      	mov	r3, sl
 800aed6:	4aad      	ldr	r2, [pc, #692]	; (800b18c <_strtod_l+0xb2c>)
 800aed8:	f04f 31ff 	mov.w	r1, #4294967295
 800aedc:	401a      	ands	r2, r3
 800aede:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800aee2:	d818      	bhi.n	800af16 <_strtod_l+0x8b6>
 800aee4:	0d12      	lsrs	r2, r2, #20
 800aee6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aeea:	fa01 f303 	lsl.w	r3, r1, r3
 800aeee:	4298      	cmp	r0, r3
 800aef0:	d144      	bne.n	800af7c <_strtod_l+0x91c>
 800aef2:	4ba7      	ldr	r3, [pc, #668]	; (800b190 <_strtod_l+0xb30>)
 800aef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d102      	bne.n	800af00 <_strtod_l+0x8a0>
 800aefa:	3001      	adds	r0, #1
 800aefc:	f43f add2 	beq.w	800aaa4 <_strtod_l+0x444>
 800af00:	4ba2      	ldr	r3, [pc, #648]	; (800b18c <_strtod_l+0xb2c>)
 800af02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af04:	f04f 0900 	mov.w	r9, #0
 800af08:	401a      	ands	r2, r3
 800af0a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800af0e:	e79f      	b.n	800ae50 <_strtod_l+0x7f0>
 800af10:	f04f 33ff 	mov.w	r3, #4294967295
 800af14:	e7eb      	b.n	800aeee <_strtod_l+0x88e>
 800af16:	460b      	mov	r3, r1
 800af18:	e7e9      	b.n	800aeee <_strtod_l+0x88e>
 800af1a:	bb7b      	cbnz	r3, 800af7c <_strtod_l+0x91c>
 800af1c:	f1b9 0f00 	cmp.w	r9, #0
 800af20:	d12c      	bne.n	800af7c <_strtod_l+0x91c>
 800af22:	9905      	ldr	r1, [sp, #20]
 800af24:	4653      	mov	r3, sl
 800af26:	4a99      	ldr	r2, [pc, #612]	; (800b18c <_strtod_l+0xb2c>)
 800af28:	b1f1      	cbz	r1, 800af68 <_strtod_l+0x908>
 800af2a:	ea02 010a 	and.w	r1, r2, sl
 800af2e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800af32:	dc19      	bgt.n	800af68 <_strtod_l+0x908>
 800af34:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800af38:	f77f ae51 	ble.w	800abde <_strtod_l+0x57e>
 800af3c:	2300      	movs	r3, #0
 800af3e:	4a95      	ldr	r2, [pc, #596]	; (800b194 <_strtod_l+0xb34>)
 800af40:	4648      	mov	r0, r9
 800af42:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800af46:	4651      	mov	r1, sl
 800af48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800af4c:	f7f5 fac4 	bl	80004d8 <__aeabi_dmul>
 800af50:	4681      	mov	r9, r0
 800af52:	468a      	mov	sl, r1
 800af54:	2900      	cmp	r1, #0
 800af56:	f47f adb0 	bne.w	800aaba <_strtod_l+0x45a>
 800af5a:	2800      	cmp	r0, #0
 800af5c:	f47f adad 	bne.w	800aaba <_strtod_l+0x45a>
 800af60:	2322      	movs	r3, #34	; 0x22
 800af62:	f8cb 3000 	str.w	r3, [fp]
 800af66:	e5a8      	b.n	800aaba <_strtod_l+0x45a>
 800af68:	4013      	ands	r3, r2
 800af6a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800af6e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800af72:	f04f 39ff 	mov.w	r9, #4294967295
 800af76:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800af7a:	e769      	b.n	800ae50 <_strtod_l+0x7f0>
 800af7c:	b19d      	cbz	r5, 800afa6 <_strtod_l+0x946>
 800af7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af80:	421d      	tst	r5, r3
 800af82:	f43f af65 	beq.w	800ae50 <_strtod_l+0x7f0>
 800af86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af88:	9a05      	ldr	r2, [sp, #20]
 800af8a:	4648      	mov	r0, r9
 800af8c:	4651      	mov	r1, sl
 800af8e:	b173      	cbz	r3, 800afae <_strtod_l+0x94e>
 800af90:	f7ff fb43 	bl	800a61a <sulp>
 800af94:	4602      	mov	r2, r0
 800af96:	460b      	mov	r3, r1
 800af98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af9c:	f7f5 f8e6 	bl	800016c <__adddf3>
 800afa0:	4681      	mov	r9, r0
 800afa2:	468a      	mov	sl, r1
 800afa4:	e754      	b.n	800ae50 <_strtod_l+0x7f0>
 800afa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afa8:	ea13 0f09 	tst.w	r3, r9
 800afac:	e7e9      	b.n	800af82 <_strtod_l+0x922>
 800afae:	f7ff fb34 	bl	800a61a <sulp>
 800afb2:	4602      	mov	r2, r0
 800afb4:	460b      	mov	r3, r1
 800afb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800afba:	f7f5 f8d5 	bl	8000168 <__aeabi_dsub>
 800afbe:	2200      	movs	r2, #0
 800afc0:	2300      	movs	r3, #0
 800afc2:	4681      	mov	r9, r0
 800afc4:	468a      	mov	sl, r1
 800afc6:	f7f5 fcef 	bl	80009a8 <__aeabi_dcmpeq>
 800afca:	2800      	cmp	r0, #0
 800afcc:	f47f ae07 	bne.w	800abde <_strtod_l+0x57e>
 800afd0:	e73e      	b.n	800ae50 <_strtod_l+0x7f0>
 800afd2:	9904      	ldr	r1, [sp, #16]
 800afd4:	4640      	mov	r0, r8
 800afd6:	f001 fff6 	bl	800cfc6 <__ratio>
 800afda:	2200      	movs	r2, #0
 800afdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800afe0:	4606      	mov	r6, r0
 800afe2:	460f      	mov	r7, r1
 800afe4:	f7f5 fcf4 	bl	80009d0 <__aeabi_dcmple>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d075      	beq.n	800b0d8 <_strtod_l+0xa78>
 800afec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d047      	beq.n	800b082 <_strtod_l+0xa22>
 800aff2:	2600      	movs	r6, #0
 800aff4:	4f68      	ldr	r7, [pc, #416]	; (800b198 <_strtod_l+0xb38>)
 800aff6:	4d68      	ldr	r5, [pc, #416]	; (800b198 <_strtod_l+0xb38>)
 800aff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800affa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800affe:	0d1b      	lsrs	r3, r3, #20
 800b000:	051b      	lsls	r3, r3, #20
 800b002:	930f      	str	r3, [sp, #60]	; 0x3c
 800b004:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b006:	4b65      	ldr	r3, [pc, #404]	; (800b19c <_strtod_l+0xb3c>)
 800b008:	429a      	cmp	r2, r3
 800b00a:	f040 80cf 	bne.w	800b1ac <_strtod_l+0xb4c>
 800b00e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b012:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b018:	4648      	mov	r0, r9
 800b01a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800b01e:	4651      	mov	r1, sl
 800b020:	f001 ff0c 	bl	800ce3c <__ulp>
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	4630      	mov	r0, r6
 800b02a:	4639      	mov	r1, r7
 800b02c:	f7f5 fa54 	bl	80004d8 <__aeabi_dmul>
 800b030:	464a      	mov	r2, r9
 800b032:	4653      	mov	r3, sl
 800b034:	f7f5 f89a 	bl	800016c <__adddf3>
 800b038:	460b      	mov	r3, r1
 800b03a:	4954      	ldr	r1, [pc, #336]	; (800b18c <_strtod_l+0xb2c>)
 800b03c:	4a58      	ldr	r2, [pc, #352]	; (800b1a0 <_strtod_l+0xb40>)
 800b03e:	4019      	ands	r1, r3
 800b040:	4291      	cmp	r1, r2
 800b042:	4681      	mov	r9, r0
 800b044:	d95e      	bls.n	800b104 <_strtod_l+0xaa4>
 800b046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b048:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d103      	bne.n	800b058 <_strtod_l+0x9f8>
 800b050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b052:	3301      	adds	r3, #1
 800b054:	f43f ad26 	beq.w	800aaa4 <_strtod_l+0x444>
 800b058:	f04f 39ff 	mov.w	r9, #4294967295
 800b05c:	f8df a130 	ldr.w	sl, [pc, #304]	; 800b190 <_strtod_l+0xb30>
 800b060:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b062:	4658      	mov	r0, fp
 800b064:	f001 fc54 	bl	800c910 <_Bfree>
 800b068:	9906      	ldr	r1, [sp, #24]
 800b06a:	4658      	mov	r0, fp
 800b06c:	f001 fc50 	bl	800c910 <_Bfree>
 800b070:	9904      	ldr	r1, [sp, #16]
 800b072:	4658      	mov	r0, fp
 800b074:	f001 fc4c 	bl	800c910 <_Bfree>
 800b078:	4641      	mov	r1, r8
 800b07a:	4658      	mov	r0, fp
 800b07c:	f001 fc48 	bl	800c910 <_Bfree>
 800b080:	e617      	b.n	800acb2 <_strtod_l+0x652>
 800b082:	f1b9 0f00 	cmp.w	r9, #0
 800b086:	d119      	bne.n	800b0bc <_strtod_l+0xa5c>
 800b088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b08a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b08e:	b9e3      	cbnz	r3, 800b0ca <_strtod_l+0xa6a>
 800b090:	2200      	movs	r2, #0
 800b092:	4b41      	ldr	r3, [pc, #260]	; (800b198 <_strtod_l+0xb38>)
 800b094:	4630      	mov	r0, r6
 800b096:	4639      	mov	r1, r7
 800b098:	f7f5 fc90 	bl	80009bc <__aeabi_dcmplt>
 800b09c:	b9c8      	cbnz	r0, 800b0d2 <_strtod_l+0xa72>
 800b09e:	2200      	movs	r2, #0
 800b0a0:	4b40      	ldr	r3, [pc, #256]	; (800b1a4 <_strtod_l+0xb44>)
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	4639      	mov	r1, r7
 800b0a6:	f7f5 fa17 	bl	80004d8 <__aeabi_dmul>
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	460d      	mov	r5, r1
 800b0ae:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b0b2:	9418      	str	r4, [sp, #96]	; 0x60
 800b0b4:	9319      	str	r3, [sp, #100]	; 0x64
 800b0b6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800b0ba:	e79d      	b.n	800aff8 <_strtod_l+0x998>
 800b0bc:	f1b9 0f01 	cmp.w	r9, #1
 800b0c0:	d103      	bne.n	800b0ca <_strtod_l+0xa6a>
 800b0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	f43f ad8a 	beq.w	800abde <_strtod_l+0x57e>
 800b0ca:	2600      	movs	r6, #0
 800b0cc:	4f36      	ldr	r7, [pc, #216]	; (800b1a8 <_strtod_l+0xb48>)
 800b0ce:	2400      	movs	r4, #0
 800b0d0:	e791      	b.n	800aff6 <_strtod_l+0x996>
 800b0d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b0d4:	4d33      	ldr	r5, [pc, #204]	; (800b1a4 <_strtod_l+0xb44>)
 800b0d6:	e7ea      	b.n	800b0ae <_strtod_l+0xa4e>
 800b0d8:	4b32      	ldr	r3, [pc, #200]	; (800b1a4 <_strtod_l+0xb44>)
 800b0da:	2200      	movs	r2, #0
 800b0dc:	4630      	mov	r0, r6
 800b0de:	4639      	mov	r1, r7
 800b0e0:	f7f5 f9fa 	bl	80004d8 <__aeabi_dmul>
 800b0e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	460d      	mov	r5, r1
 800b0ea:	b933      	cbnz	r3, 800b0fa <_strtod_l+0xa9a>
 800b0ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0f0:	9010      	str	r0, [sp, #64]	; 0x40
 800b0f2:	9311      	str	r3, [sp, #68]	; 0x44
 800b0f4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b0f8:	e77e      	b.n	800aff8 <_strtod_l+0x998>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b102:	e7f7      	b.n	800b0f4 <_strtod_l+0xa94>
 800b104:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800b108:	9b05      	ldr	r3, [sp, #20]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1a8      	bne.n	800b060 <_strtod_l+0xa00>
 800b10e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b112:	0d1b      	lsrs	r3, r3, #20
 800b114:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b116:	051b      	lsls	r3, r3, #20
 800b118:	429a      	cmp	r2, r3
 800b11a:	4656      	mov	r6, sl
 800b11c:	d1a0      	bne.n	800b060 <_strtod_l+0xa00>
 800b11e:	4629      	mov	r1, r5
 800b120:	4620      	mov	r0, r4
 800b122:	f7f5 fc89 	bl	8000a38 <__aeabi_d2iz>
 800b126:	f7f5 f96d 	bl	8000404 <__aeabi_i2d>
 800b12a:	460b      	mov	r3, r1
 800b12c:	4602      	mov	r2, r0
 800b12e:	4629      	mov	r1, r5
 800b130:	4620      	mov	r0, r4
 800b132:	f7f5 f819 	bl	8000168 <__aeabi_dsub>
 800b136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b138:	4604      	mov	r4, r0
 800b13a:	460d      	mov	r5, r1
 800b13c:	b933      	cbnz	r3, 800b14c <_strtod_l+0xaec>
 800b13e:	f1b9 0f00 	cmp.w	r9, #0
 800b142:	d103      	bne.n	800b14c <_strtod_l+0xaec>
 800b144:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800b148:	2e00      	cmp	r6, #0
 800b14a:	d06a      	beq.n	800b222 <_strtod_l+0xbc2>
 800b14c:	a30a      	add	r3, pc, #40	; (adr r3, 800b178 <_strtod_l+0xb18>)
 800b14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b152:	4620      	mov	r0, r4
 800b154:	4629      	mov	r1, r5
 800b156:	f7f5 fc31 	bl	80009bc <__aeabi_dcmplt>
 800b15a:	2800      	cmp	r0, #0
 800b15c:	f47f acad 	bne.w	800aaba <_strtod_l+0x45a>
 800b160:	a307      	add	r3, pc, #28	; (adr r3, 800b180 <_strtod_l+0xb20>)
 800b162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b166:	4620      	mov	r0, r4
 800b168:	4629      	mov	r1, r5
 800b16a:	f7f5 fc45 	bl	80009f8 <__aeabi_dcmpgt>
 800b16e:	2800      	cmp	r0, #0
 800b170:	f43f af76 	beq.w	800b060 <_strtod_l+0xa00>
 800b174:	e4a1      	b.n	800aaba <_strtod_l+0x45a>
 800b176:	bf00      	nop
 800b178:	94a03595 	.word	0x94a03595
 800b17c:	3fdfffff 	.word	0x3fdfffff
 800b180:	35afe535 	.word	0x35afe535
 800b184:	3fe00000 	.word	0x3fe00000
 800b188:	000fffff 	.word	0x000fffff
 800b18c:	7ff00000 	.word	0x7ff00000
 800b190:	7fefffff 	.word	0x7fefffff
 800b194:	39500000 	.word	0x39500000
 800b198:	3ff00000 	.word	0x3ff00000
 800b19c:	7fe00000 	.word	0x7fe00000
 800b1a0:	7c9fffff 	.word	0x7c9fffff
 800b1a4:	3fe00000 	.word	0x3fe00000
 800b1a8:	bff00000 	.word	0xbff00000
 800b1ac:	9b05      	ldr	r3, [sp, #20]
 800b1ae:	b313      	cbz	r3, 800b1f6 <_strtod_l+0xb96>
 800b1b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1b2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b1b6:	d81e      	bhi.n	800b1f6 <_strtod_l+0xb96>
 800b1b8:	a325      	add	r3, pc, #148	; (adr r3, 800b250 <_strtod_l+0xbf0>)
 800b1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1be:	4620      	mov	r0, r4
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	f7f5 fc05 	bl	80009d0 <__aeabi_dcmple>
 800b1c6:	b190      	cbz	r0, 800b1ee <_strtod_l+0xb8e>
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f7f5 fc5c 	bl	8000a88 <__aeabi_d2uiz>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	bf08      	it	eq
 800b1d4:	2001      	moveq	r0, #1
 800b1d6:	f7f5 f905 	bl	80003e4 <__aeabi_ui2d>
 800b1da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1dc:	4604      	mov	r4, r0
 800b1de:	460d      	mov	r5, r1
 800b1e0:	b9d3      	cbnz	r3, 800b218 <_strtod_l+0xbb8>
 800b1e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1e6:	9012      	str	r0, [sp, #72]	; 0x48
 800b1e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800b1ea:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b1ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1f0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b1f4:	1a9f      	subs	r7, r3, r2
 800b1f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b1fa:	f001 fe1f 	bl	800ce3c <__ulp>
 800b1fe:	4602      	mov	r2, r0
 800b200:	460b      	mov	r3, r1
 800b202:	4630      	mov	r0, r6
 800b204:	4639      	mov	r1, r7
 800b206:	f7f5 f967 	bl	80004d8 <__aeabi_dmul>
 800b20a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b20e:	f7f4 ffad 	bl	800016c <__adddf3>
 800b212:	4681      	mov	r9, r0
 800b214:	468a      	mov	sl, r1
 800b216:	e777      	b.n	800b108 <_strtod_l+0xaa8>
 800b218:	4602      	mov	r2, r0
 800b21a:	460b      	mov	r3, r1
 800b21c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b220:	e7e3      	b.n	800b1ea <_strtod_l+0xb8a>
 800b222:	a30d      	add	r3, pc, #52	; (adr r3, 800b258 <_strtod_l+0xbf8>)
 800b224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b228:	f7f5 fbc8 	bl	80009bc <__aeabi_dcmplt>
 800b22c:	e79f      	b.n	800b16e <_strtod_l+0xb0e>
 800b22e:	2300      	movs	r3, #0
 800b230:	930d      	str	r3, [sp, #52]	; 0x34
 800b232:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b234:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b236:	6013      	str	r3, [r2, #0]
 800b238:	f7ff ba55 	b.w	800a6e6 <_strtod_l+0x86>
 800b23c:	2b65      	cmp	r3, #101	; 0x65
 800b23e:	f04f 0200 	mov.w	r2, #0
 800b242:	f43f ab42 	beq.w	800a8ca <_strtod_l+0x26a>
 800b246:	2101      	movs	r1, #1
 800b248:	4614      	mov	r4, r2
 800b24a:	9105      	str	r1, [sp, #20]
 800b24c:	f7ff babf 	b.w	800a7ce <_strtod_l+0x16e>
 800b250:	ffc00000 	.word	0xffc00000
 800b254:	41dfffff 	.word	0x41dfffff
 800b258:	94a03595 	.word	0x94a03595
 800b25c:	3fcfffff 	.word	0x3fcfffff

0800b260 <_strtod_r>:
 800b260:	4b05      	ldr	r3, [pc, #20]	; (800b278 <_strtod_r+0x18>)
 800b262:	b410      	push	{r4}
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4c05      	ldr	r4, [pc, #20]	; (800b27c <_strtod_r+0x1c>)
 800b268:	6a1b      	ldr	r3, [r3, #32]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	bf08      	it	eq
 800b26e:	4623      	moveq	r3, r4
 800b270:	bc10      	pop	{r4}
 800b272:	f7ff b9f5 	b.w	800a660 <_strtod_l>
 800b276:	bf00      	nop
 800b278:	2000018c 	.word	0x2000018c
 800b27c:	200001f0 	.word	0x200001f0

0800b280 <_strtol_l.isra.0>:
 800b280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b284:	4680      	mov	r8, r0
 800b286:	4689      	mov	r9, r1
 800b288:	4692      	mov	sl, r2
 800b28a:	461e      	mov	r6, r3
 800b28c:	460f      	mov	r7, r1
 800b28e:	463d      	mov	r5, r7
 800b290:	9808      	ldr	r0, [sp, #32]
 800b292:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b296:	f001 fabf 	bl	800c818 <__locale_ctype_ptr_l>
 800b29a:	4420      	add	r0, r4
 800b29c:	7843      	ldrb	r3, [r0, #1]
 800b29e:	f013 0308 	ands.w	r3, r3, #8
 800b2a2:	d132      	bne.n	800b30a <_strtol_l.isra.0+0x8a>
 800b2a4:	2c2d      	cmp	r4, #45	; 0x2d
 800b2a6:	d132      	bne.n	800b30e <_strtol_l.isra.0+0x8e>
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	787c      	ldrb	r4, [r7, #1]
 800b2ac:	1cbd      	adds	r5, r7, #2
 800b2ae:	2e00      	cmp	r6, #0
 800b2b0:	d05d      	beq.n	800b36e <_strtol_l.isra.0+0xee>
 800b2b2:	2e10      	cmp	r6, #16
 800b2b4:	d109      	bne.n	800b2ca <_strtol_l.isra.0+0x4a>
 800b2b6:	2c30      	cmp	r4, #48	; 0x30
 800b2b8:	d107      	bne.n	800b2ca <_strtol_l.isra.0+0x4a>
 800b2ba:	782b      	ldrb	r3, [r5, #0]
 800b2bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b2c0:	2b58      	cmp	r3, #88	; 0x58
 800b2c2:	d14f      	bne.n	800b364 <_strtol_l.isra.0+0xe4>
 800b2c4:	2610      	movs	r6, #16
 800b2c6:	786c      	ldrb	r4, [r5, #1]
 800b2c8:	3502      	adds	r5, #2
 800b2ca:	2a00      	cmp	r2, #0
 800b2cc:	bf14      	ite	ne
 800b2ce:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b2d2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b2d6:	2700      	movs	r7, #0
 800b2d8:	fbb1 fcf6 	udiv	ip, r1, r6
 800b2dc:	4638      	mov	r0, r7
 800b2de:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b2e2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b2e6:	2b09      	cmp	r3, #9
 800b2e8:	d817      	bhi.n	800b31a <_strtol_l.isra.0+0x9a>
 800b2ea:	461c      	mov	r4, r3
 800b2ec:	42a6      	cmp	r6, r4
 800b2ee:	dd23      	ble.n	800b338 <_strtol_l.isra.0+0xb8>
 800b2f0:	1c7b      	adds	r3, r7, #1
 800b2f2:	d007      	beq.n	800b304 <_strtol_l.isra.0+0x84>
 800b2f4:	4584      	cmp	ip, r0
 800b2f6:	d31c      	bcc.n	800b332 <_strtol_l.isra.0+0xb2>
 800b2f8:	d101      	bne.n	800b2fe <_strtol_l.isra.0+0x7e>
 800b2fa:	45a6      	cmp	lr, r4
 800b2fc:	db19      	blt.n	800b332 <_strtol_l.isra.0+0xb2>
 800b2fe:	2701      	movs	r7, #1
 800b300:	fb00 4006 	mla	r0, r0, r6, r4
 800b304:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b308:	e7eb      	b.n	800b2e2 <_strtol_l.isra.0+0x62>
 800b30a:	462f      	mov	r7, r5
 800b30c:	e7bf      	b.n	800b28e <_strtol_l.isra.0+0xe>
 800b30e:	2c2b      	cmp	r4, #43	; 0x2b
 800b310:	bf04      	itt	eq
 800b312:	1cbd      	addeq	r5, r7, #2
 800b314:	787c      	ldrbeq	r4, [r7, #1]
 800b316:	461a      	mov	r2, r3
 800b318:	e7c9      	b.n	800b2ae <_strtol_l.isra.0+0x2e>
 800b31a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b31e:	2b19      	cmp	r3, #25
 800b320:	d801      	bhi.n	800b326 <_strtol_l.isra.0+0xa6>
 800b322:	3c37      	subs	r4, #55	; 0x37
 800b324:	e7e2      	b.n	800b2ec <_strtol_l.isra.0+0x6c>
 800b326:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b32a:	2b19      	cmp	r3, #25
 800b32c:	d804      	bhi.n	800b338 <_strtol_l.isra.0+0xb8>
 800b32e:	3c57      	subs	r4, #87	; 0x57
 800b330:	e7dc      	b.n	800b2ec <_strtol_l.isra.0+0x6c>
 800b332:	f04f 37ff 	mov.w	r7, #4294967295
 800b336:	e7e5      	b.n	800b304 <_strtol_l.isra.0+0x84>
 800b338:	1c7b      	adds	r3, r7, #1
 800b33a:	d108      	bne.n	800b34e <_strtol_l.isra.0+0xce>
 800b33c:	2322      	movs	r3, #34	; 0x22
 800b33e:	4608      	mov	r0, r1
 800b340:	f8c8 3000 	str.w	r3, [r8]
 800b344:	f1ba 0f00 	cmp.w	sl, #0
 800b348:	d107      	bne.n	800b35a <_strtol_l.isra.0+0xda>
 800b34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34e:	b102      	cbz	r2, 800b352 <_strtol_l.isra.0+0xd2>
 800b350:	4240      	negs	r0, r0
 800b352:	f1ba 0f00 	cmp.w	sl, #0
 800b356:	d0f8      	beq.n	800b34a <_strtol_l.isra.0+0xca>
 800b358:	b10f      	cbz	r7, 800b35e <_strtol_l.isra.0+0xde>
 800b35a:	f105 39ff 	add.w	r9, r5, #4294967295
 800b35e:	f8ca 9000 	str.w	r9, [sl]
 800b362:	e7f2      	b.n	800b34a <_strtol_l.isra.0+0xca>
 800b364:	2430      	movs	r4, #48	; 0x30
 800b366:	2e00      	cmp	r6, #0
 800b368:	d1af      	bne.n	800b2ca <_strtol_l.isra.0+0x4a>
 800b36a:	2608      	movs	r6, #8
 800b36c:	e7ad      	b.n	800b2ca <_strtol_l.isra.0+0x4a>
 800b36e:	2c30      	cmp	r4, #48	; 0x30
 800b370:	d0a3      	beq.n	800b2ba <_strtol_l.isra.0+0x3a>
 800b372:	260a      	movs	r6, #10
 800b374:	e7a9      	b.n	800b2ca <_strtol_l.isra.0+0x4a>
	...

0800b378 <_strtol_r>:
 800b378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b37a:	4c06      	ldr	r4, [pc, #24]	; (800b394 <_strtol_r+0x1c>)
 800b37c:	4d06      	ldr	r5, [pc, #24]	; (800b398 <_strtol_r+0x20>)
 800b37e:	6824      	ldr	r4, [r4, #0]
 800b380:	6a24      	ldr	r4, [r4, #32]
 800b382:	2c00      	cmp	r4, #0
 800b384:	bf08      	it	eq
 800b386:	462c      	moveq	r4, r5
 800b388:	9400      	str	r4, [sp, #0]
 800b38a:	f7ff ff79 	bl	800b280 <_strtol_l.isra.0>
 800b38e:	b003      	add	sp, #12
 800b390:	bd30      	pop	{r4, r5, pc}
 800b392:	bf00      	nop
 800b394:	2000018c 	.word	0x2000018c
 800b398:	200001f0 	.word	0x200001f0

0800b39c <_write_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	4605      	mov	r5, r0
 800b3a0:	4608      	mov	r0, r1
 800b3a2:	4611      	mov	r1, r2
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	4c05      	ldr	r4, [pc, #20]	; (800b3bc <_write_r+0x20>)
 800b3a8:	6022      	str	r2, [r4, #0]
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	f7fc ff50 	bl	8008250 <_write>
 800b3b0:	1c43      	adds	r3, r0, #1
 800b3b2:	d102      	bne.n	800b3ba <_write_r+0x1e>
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	b103      	cbz	r3, 800b3ba <_write_r+0x1e>
 800b3b8:	602b      	str	r3, [r5, #0]
 800b3ba:	bd38      	pop	{r3, r4, r5, pc}
 800b3bc:	2000181c 	.word	0x2000181c

0800b3c0 <_close_r>:
 800b3c0:	b538      	push	{r3, r4, r5, lr}
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	4c05      	ldr	r4, [pc, #20]	; (800b3dc <_close_r+0x1c>)
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	4608      	mov	r0, r1
 800b3ca:	6023      	str	r3, [r4, #0]
 800b3cc:	f002 fac2 	bl	800d954 <_close>
 800b3d0:	1c43      	adds	r3, r0, #1
 800b3d2:	d102      	bne.n	800b3da <_close_r+0x1a>
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	b103      	cbz	r3, 800b3da <_close_r+0x1a>
 800b3d8:	602b      	str	r3, [r5, #0]
 800b3da:	bd38      	pop	{r3, r4, r5, pc}
 800b3dc:	2000181c 	.word	0x2000181c

0800b3e0 <quorem>:
 800b3e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e4:	6903      	ldr	r3, [r0, #16]
 800b3e6:	690c      	ldr	r4, [r1, #16]
 800b3e8:	4680      	mov	r8, r0
 800b3ea:	42a3      	cmp	r3, r4
 800b3ec:	f2c0 8084 	blt.w	800b4f8 <quorem+0x118>
 800b3f0:	3c01      	subs	r4, #1
 800b3f2:	f101 0714 	add.w	r7, r1, #20
 800b3f6:	f100 0614 	add.w	r6, r0, #20
 800b3fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b3fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b402:	3501      	adds	r5, #1
 800b404:	fbb0 f5f5 	udiv	r5, r0, r5
 800b408:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b40c:	eb06 030c 	add.w	r3, r6, ip
 800b410:	eb07 090c 	add.w	r9, r7, ip
 800b414:	9301      	str	r3, [sp, #4]
 800b416:	b39d      	cbz	r5, 800b480 <quorem+0xa0>
 800b418:	f04f 0a00 	mov.w	sl, #0
 800b41c:	4638      	mov	r0, r7
 800b41e:	46b6      	mov	lr, r6
 800b420:	46d3      	mov	fp, sl
 800b422:	f850 2b04 	ldr.w	r2, [r0], #4
 800b426:	b293      	uxth	r3, r2
 800b428:	fb05 a303 	mla	r3, r5, r3, sl
 800b42c:	0c12      	lsrs	r2, r2, #16
 800b42e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b432:	fb05 a202 	mla	r2, r5, r2, sl
 800b436:	b29b      	uxth	r3, r3
 800b438:	ebab 0303 	sub.w	r3, fp, r3
 800b43c:	f8de b000 	ldr.w	fp, [lr]
 800b440:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b444:	fa1f fb8b 	uxth.w	fp, fp
 800b448:	445b      	add	r3, fp
 800b44a:	fa1f fb82 	uxth.w	fp, r2
 800b44e:	f8de 2000 	ldr.w	r2, [lr]
 800b452:	4581      	cmp	r9, r0
 800b454:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b458:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b462:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b466:	f84e 3b04 	str.w	r3, [lr], #4
 800b46a:	d2da      	bcs.n	800b422 <quorem+0x42>
 800b46c:	f856 300c 	ldr.w	r3, [r6, ip]
 800b470:	b933      	cbnz	r3, 800b480 <quorem+0xa0>
 800b472:	9b01      	ldr	r3, [sp, #4]
 800b474:	3b04      	subs	r3, #4
 800b476:	429e      	cmp	r6, r3
 800b478:	461a      	mov	r2, r3
 800b47a:	d331      	bcc.n	800b4e0 <quorem+0x100>
 800b47c:	f8c8 4010 	str.w	r4, [r8, #16]
 800b480:	4640      	mov	r0, r8
 800b482:	f001 fc63 	bl	800cd4c <__mcmp>
 800b486:	2800      	cmp	r0, #0
 800b488:	db26      	blt.n	800b4d8 <quorem+0xf8>
 800b48a:	4630      	mov	r0, r6
 800b48c:	f04f 0c00 	mov.w	ip, #0
 800b490:	3501      	adds	r5, #1
 800b492:	f857 1b04 	ldr.w	r1, [r7], #4
 800b496:	f8d0 e000 	ldr.w	lr, [r0]
 800b49a:	b28b      	uxth	r3, r1
 800b49c:	ebac 0303 	sub.w	r3, ip, r3
 800b4a0:	fa1f f28e 	uxth.w	r2, lr
 800b4a4:	4413      	add	r3, r2
 800b4a6:	0c0a      	lsrs	r2, r1, #16
 800b4a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b4ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4b6:	45b9      	cmp	r9, r7
 800b4b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b4bc:	f840 3b04 	str.w	r3, [r0], #4
 800b4c0:	d2e7      	bcs.n	800b492 <quorem+0xb2>
 800b4c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b4c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b4ca:	b92a      	cbnz	r2, 800b4d8 <quorem+0xf8>
 800b4cc:	3b04      	subs	r3, #4
 800b4ce:	429e      	cmp	r6, r3
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	d30b      	bcc.n	800b4ec <quorem+0x10c>
 800b4d4:	f8c8 4010 	str.w	r4, [r8, #16]
 800b4d8:	4628      	mov	r0, r5
 800b4da:	b003      	add	sp, #12
 800b4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e0:	6812      	ldr	r2, [r2, #0]
 800b4e2:	3b04      	subs	r3, #4
 800b4e4:	2a00      	cmp	r2, #0
 800b4e6:	d1c9      	bne.n	800b47c <quorem+0x9c>
 800b4e8:	3c01      	subs	r4, #1
 800b4ea:	e7c4      	b.n	800b476 <quorem+0x96>
 800b4ec:	6812      	ldr	r2, [r2, #0]
 800b4ee:	3b04      	subs	r3, #4
 800b4f0:	2a00      	cmp	r2, #0
 800b4f2:	d1ef      	bne.n	800b4d4 <quorem+0xf4>
 800b4f4:	3c01      	subs	r4, #1
 800b4f6:	e7ea      	b.n	800b4ce <quorem+0xee>
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	e7ee      	b.n	800b4da <quorem+0xfa>
 800b4fc:	0000      	movs	r0, r0
	...

0800b500 <_dtoa_r>:
 800b500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b504:	4616      	mov	r6, r2
 800b506:	461f      	mov	r7, r3
 800b508:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b50a:	b095      	sub	sp, #84	; 0x54
 800b50c:	4604      	mov	r4, r0
 800b50e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800b512:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b516:	b93d      	cbnz	r5, 800b528 <_dtoa_r+0x28>
 800b518:	2010      	movs	r0, #16
 800b51a:	f7fe f88b 	bl	8009634 <malloc>
 800b51e:	6260      	str	r0, [r4, #36]	; 0x24
 800b520:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b524:	6005      	str	r5, [r0, #0]
 800b526:	60c5      	str	r5, [r0, #12]
 800b528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b52a:	6819      	ldr	r1, [r3, #0]
 800b52c:	b151      	cbz	r1, 800b544 <_dtoa_r+0x44>
 800b52e:	685a      	ldr	r2, [r3, #4]
 800b530:	2301      	movs	r3, #1
 800b532:	4093      	lsls	r3, r2
 800b534:	604a      	str	r2, [r1, #4]
 800b536:	608b      	str	r3, [r1, #8]
 800b538:	4620      	mov	r0, r4
 800b53a:	f001 f9e9 	bl	800c910 <_Bfree>
 800b53e:	2200      	movs	r2, #0
 800b540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b542:	601a      	str	r2, [r3, #0]
 800b544:	1e3b      	subs	r3, r7, #0
 800b546:	bfaf      	iteee	ge
 800b548:	2300      	movge	r3, #0
 800b54a:	2201      	movlt	r2, #1
 800b54c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b550:	9303      	strlt	r3, [sp, #12]
 800b552:	bfac      	ite	ge
 800b554:	f8c8 3000 	strge.w	r3, [r8]
 800b558:	f8c8 2000 	strlt.w	r2, [r8]
 800b55c:	4bae      	ldr	r3, [pc, #696]	; (800b818 <_dtoa_r+0x318>)
 800b55e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b562:	ea33 0308 	bics.w	r3, r3, r8
 800b566:	d11b      	bne.n	800b5a0 <_dtoa_r+0xa0>
 800b568:	f242 730f 	movw	r3, #9999	; 0x270f
 800b56c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b56e:	6013      	str	r3, [r2, #0]
 800b570:	9b02      	ldr	r3, [sp, #8]
 800b572:	b923      	cbnz	r3, 800b57e <_dtoa_r+0x7e>
 800b574:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b578:	2800      	cmp	r0, #0
 800b57a:	f000 8545 	beq.w	800c008 <_dtoa_r+0xb08>
 800b57e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b580:	b953      	cbnz	r3, 800b598 <_dtoa_r+0x98>
 800b582:	4ba6      	ldr	r3, [pc, #664]	; (800b81c <_dtoa_r+0x31c>)
 800b584:	e021      	b.n	800b5ca <_dtoa_r+0xca>
 800b586:	4ba6      	ldr	r3, [pc, #664]	; (800b820 <_dtoa_r+0x320>)
 800b588:	9306      	str	r3, [sp, #24]
 800b58a:	3308      	adds	r3, #8
 800b58c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b58e:	6013      	str	r3, [r2, #0]
 800b590:	9806      	ldr	r0, [sp, #24]
 800b592:	b015      	add	sp, #84	; 0x54
 800b594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b598:	4ba0      	ldr	r3, [pc, #640]	; (800b81c <_dtoa_r+0x31c>)
 800b59a:	9306      	str	r3, [sp, #24]
 800b59c:	3303      	adds	r3, #3
 800b59e:	e7f5      	b.n	800b58c <_dtoa_r+0x8c>
 800b5a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	4639      	mov	r1, r7
 800b5ac:	f7f5 f9fc 	bl	80009a8 <__aeabi_dcmpeq>
 800b5b0:	4682      	mov	sl, r0
 800b5b2:	b160      	cbz	r0, 800b5ce <_dtoa_r+0xce>
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b5b8:	6013      	str	r3, [r2, #0]
 800b5ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f000 8520 	beq.w	800c002 <_dtoa_r+0xb02>
 800b5c2:	4b98      	ldr	r3, [pc, #608]	; (800b824 <_dtoa_r+0x324>)
 800b5c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	9306      	str	r3, [sp, #24]
 800b5cc:	e7e0      	b.n	800b590 <_dtoa_r+0x90>
 800b5ce:	ab12      	add	r3, sp, #72	; 0x48
 800b5d0:	9301      	str	r3, [sp, #4]
 800b5d2:	ab13      	add	r3, sp, #76	; 0x4c
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	4632      	mov	r2, r6
 800b5d8:	463b      	mov	r3, r7
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f001 fca4 	bl	800cf28 <__d2b>
 800b5e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b5e4:	4683      	mov	fp, r0
 800b5e6:	2d00      	cmp	r5, #0
 800b5e8:	d07d      	beq.n	800b6e6 <_dtoa_r+0x1e6>
 800b5ea:	46b0      	mov	r8, r6
 800b5ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b5f0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800b5f4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800b5f8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b5fc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800b600:	2200      	movs	r2, #0
 800b602:	4b89      	ldr	r3, [pc, #548]	; (800b828 <_dtoa_r+0x328>)
 800b604:	4640      	mov	r0, r8
 800b606:	4649      	mov	r1, r9
 800b608:	f7f4 fdae 	bl	8000168 <__aeabi_dsub>
 800b60c:	a37c      	add	r3, pc, #496	; (adr r3, 800b800 <_dtoa_r+0x300>)
 800b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b612:	f7f4 ff61 	bl	80004d8 <__aeabi_dmul>
 800b616:	a37c      	add	r3, pc, #496	; (adr r3, 800b808 <_dtoa_r+0x308>)
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	f7f4 fda6 	bl	800016c <__adddf3>
 800b620:	4606      	mov	r6, r0
 800b622:	4628      	mov	r0, r5
 800b624:	460f      	mov	r7, r1
 800b626:	f7f4 feed 	bl	8000404 <__aeabi_i2d>
 800b62a:	a379      	add	r3, pc, #484	; (adr r3, 800b810 <_dtoa_r+0x310>)
 800b62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b630:	f7f4 ff52 	bl	80004d8 <__aeabi_dmul>
 800b634:	4602      	mov	r2, r0
 800b636:	460b      	mov	r3, r1
 800b638:	4630      	mov	r0, r6
 800b63a:	4639      	mov	r1, r7
 800b63c:	f7f4 fd96 	bl	800016c <__adddf3>
 800b640:	4606      	mov	r6, r0
 800b642:	460f      	mov	r7, r1
 800b644:	f7f5 f9f8 	bl	8000a38 <__aeabi_d2iz>
 800b648:	2200      	movs	r2, #0
 800b64a:	4682      	mov	sl, r0
 800b64c:	2300      	movs	r3, #0
 800b64e:	4630      	mov	r0, r6
 800b650:	4639      	mov	r1, r7
 800b652:	f7f5 f9b3 	bl	80009bc <__aeabi_dcmplt>
 800b656:	b148      	cbz	r0, 800b66c <_dtoa_r+0x16c>
 800b658:	4650      	mov	r0, sl
 800b65a:	f7f4 fed3 	bl	8000404 <__aeabi_i2d>
 800b65e:	4632      	mov	r2, r6
 800b660:	463b      	mov	r3, r7
 800b662:	f7f5 f9a1 	bl	80009a8 <__aeabi_dcmpeq>
 800b666:	b908      	cbnz	r0, 800b66c <_dtoa_r+0x16c>
 800b668:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b66c:	f1ba 0f16 	cmp.w	sl, #22
 800b670:	d85a      	bhi.n	800b728 <_dtoa_r+0x228>
 800b672:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b676:	496d      	ldr	r1, [pc, #436]	; (800b82c <_dtoa_r+0x32c>)
 800b678:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b67c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b680:	f7f5 f9ba 	bl	80009f8 <__aeabi_dcmpgt>
 800b684:	2800      	cmp	r0, #0
 800b686:	d051      	beq.n	800b72c <_dtoa_r+0x22c>
 800b688:	2300      	movs	r3, #0
 800b68a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b68e:	930d      	str	r3, [sp, #52]	; 0x34
 800b690:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b692:	1b5d      	subs	r5, r3, r5
 800b694:	1e6b      	subs	r3, r5, #1
 800b696:	9307      	str	r3, [sp, #28]
 800b698:	bf43      	ittte	mi
 800b69a:	2300      	movmi	r3, #0
 800b69c:	f1c5 0901 	rsbmi	r9, r5, #1
 800b6a0:	9307      	strmi	r3, [sp, #28]
 800b6a2:	f04f 0900 	movpl.w	r9, #0
 800b6a6:	f1ba 0f00 	cmp.w	sl, #0
 800b6aa:	db41      	blt.n	800b730 <_dtoa_r+0x230>
 800b6ac:	9b07      	ldr	r3, [sp, #28]
 800b6ae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800b6b2:	4453      	add	r3, sl
 800b6b4:	9307      	str	r3, [sp, #28]
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	9308      	str	r3, [sp, #32]
 800b6ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b6bc:	2b09      	cmp	r3, #9
 800b6be:	f200 808f 	bhi.w	800b7e0 <_dtoa_r+0x2e0>
 800b6c2:	2b05      	cmp	r3, #5
 800b6c4:	bfc4      	itt	gt
 800b6c6:	3b04      	subgt	r3, #4
 800b6c8:	931e      	strgt	r3, [sp, #120]	; 0x78
 800b6ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b6cc:	bfc8      	it	gt
 800b6ce:	2500      	movgt	r5, #0
 800b6d0:	f1a3 0302 	sub.w	r3, r3, #2
 800b6d4:	bfd8      	it	le
 800b6d6:	2501      	movle	r5, #1
 800b6d8:	2b03      	cmp	r3, #3
 800b6da:	f200 808d 	bhi.w	800b7f8 <_dtoa_r+0x2f8>
 800b6de:	e8df f003 	tbb	[pc, r3]
 800b6e2:	7d7b      	.short	0x7d7b
 800b6e4:	6f2f      	.short	0x6f2f
 800b6e6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b6ea:	441d      	add	r5, r3
 800b6ec:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b6f0:	2820      	cmp	r0, #32
 800b6f2:	dd13      	ble.n	800b71c <_dtoa_r+0x21c>
 800b6f4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b6f8:	9b02      	ldr	r3, [sp, #8]
 800b6fa:	fa08 f800 	lsl.w	r8, r8, r0
 800b6fe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b702:	fa23 f000 	lsr.w	r0, r3, r0
 800b706:	ea48 0000 	orr.w	r0, r8, r0
 800b70a:	f7f4 fe6b 	bl	80003e4 <__aeabi_ui2d>
 800b70e:	2301      	movs	r3, #1
 800b710:	4680      	mov	r8, r0
 800b712:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800b716:	3d01      	subs	r5, #1
 800b718:	9310      	str	r3, [sp, #64]	; 0x40
 800b71a:	e771      	b.n	800b600 <_dtoa_r+0x100>
 800b71c:	9b02      	ldr	r3, [sp, #8]
 800b71e:	f1c0 0020 	rsb	r0, r0, #32
 800b722:	fa03 f000 	lsl.w	r0, r3, r0
 800b726:	e7f0      	b.n	800b70a <_dtoa_r+0x20a>
 800b728:	2301      	movs	r3, #1
 800b72a:	e7b0      	b.n	800b68e <_dtoa_r+0x18e>
 800b72c:	900d      	str	r0, [sp, #52]	; 0x34
 800b72e:	e7af      	b.n	800b690 <_dtoa_r+0x190>
 800b730:	f1ca 0300 	rsb	r3, sl, #0
 800b734:	9308      	str	r3, [sp, #32]
 800b736:	2300      	movs	r3, #0
 800b738:	eba9 090a 	sub.w	r9, r9, sl
 800b73c:	930c      	str	r3, [sp, #48]	; 0x30
 800b73e:	e7bc      	b.n	800b6ba <_dtoa_r+0x1ba>
 800b740:	2301      	movs	r3, #1
 800b742:	9309      	str	r3, [sp, #36]	; 0x24
 800b744:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b746:	2b00      	cmp	r3, #0
 800b748:	dd74      	ble.n	800b834 <_dtoa_r+0x334>
 800b74a:	4698      	mov	r8, r3
 800b74c:	9304      	str	r3, [sp, #16]
 800b74e:	2200      	movs	r2, #0
 800b750:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b752:	6072      	str	r2, [r6, #4]
 800b754:	2204      	movs	r2, #4
 800b756:	f102 0014 	add.w	r0, r2, #20
 800b75a:	4298      	cmp	r0, r3
 800b75c:	6871      	ldr	r1, [r6, #4]
 800b75e:	d96e      	bls.n	800b83e <_dtoa_r+0x33e>
 800b760:	4620      	mov	r0, r4
 800b762:	f001 f8a1 	bl	800c8a8 <_Balloc>
 800b766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b768:	6030      	str	r0, [r6, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f1b8 0f0e 	cmp.w	r8, #14
 800b770:	9306      	str	r3, [sp, #24]
 800b772:	f200 80ed 	bhi.w	800b950 <_dtoa_r+0x450>
 800b776:	2d00      	cmp	r5, #0
 800b778:	f000 80ea 	beq.w	800b950 <_dtoa_r+0x450>
 800b77c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b780:	f1ba 0f00 	cmp.w	sl, #0
 800b784:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b788:	dd77      	ble.n	800b87a <_dtoa_r+0x37a>
 800b78a:	4a28      	ldr	r2, [pc, #160]	; (800b82c <_dtoa_r+0x32c>)
 800b78c:	f00a 030f 	and.w	r3, sl, #15
 800b790:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b794:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b798:	06f0      	lsls	r0, r6, #27
 800b79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b7a2:	d568      	bpl.n	800b876 <_dtoa_r+0x376>
 800b7a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b7a8:	4b21      	ldr	r3, [pc, #132]	; (800b830 <_dtoa_r+0x330>)
 800b7aa:	2503      	movs	r5, #3
 800b7ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b7b0:	f7f4 ffbc 	bl	800072c <__aeabi_ddiv>
 800b7b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7b8:	f006 060f 	and.w	r6, r6, #15
 800b7bc:	4f1c      	ldr	r7, [pc, #112]	; (800b830 <_dtoa_r+0x330>)
 800b7be:	e04f      	b.n	800b860 <_dtoa_r+0x360>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b7c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b7c6:	4453      	add	r3, sl
 800b7c8:	f103 0801 	add.w	r8, r3, #1
 800b7cc:	9304      	str	r3, [sp, #16]
 800b7ce:	4643      	mov	r3, r8
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	bfb8      	it	lt
 800b7d4:	2301      	movlt	r3, #1
 800b7d6:	e7ba      	b.n	800b74e <_dtoa_r+0x24e>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	e7b2      	b.n	800b742 <_dtoa_r+0x242>
 800b7dc:	2300      	movs	r3, #0
 800b7de:	e7f0      	b.n	800b7c2 <_dtoa_r+0x2c2>
 800b7e0:	2501      	movs	r5, #1
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	9509      	str	r5, [sp, #36]	; 0x24
 800b7e6:	931e      	str	r3, [sp, #120]	; 0x78
 800b7e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	9304      	str	r3, [sp, #16]
 800b7f0:	4698      	mov	r8, r3
 800b7f2:	2312      	movs	r3, #18
 800b7f4:	921f      	str	r2, [sp, #124]	; 0x7c
 800b7f6:	e7aa      	b.n	800b74e <_dtoa_r+0x24e>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b7fc:	e7f4      	b.n	800b7e8 <_dtoa_r+0x2e8>
 800b7fe:	bf00      	nop
 800b800:	636f4361 	.word	0x636f4361
 800b804:	3fd287a7 	.word	0x3fd287a7
 800b808:	8b60c8b3 	.word	0x8b60c8b3
 800b80c:	3fc68a28 	.word	0x3fc68a28
 800b810:	509f79fb 	.word	0x509f79fb
 800b814:	3fd34413 	.word	0x3fd34413
 800b818:	7ff00000 	.word	0x7ff00000
 800b81c:	0800dc11 	.word	0x0800dc11
 800b820:	0800dc08 	.word	0x0800dc08
 800b824:	0800db8d 	.word	0x0800db8d
 800b828:	3ff80000 	.word	0x3ff80000
 800b82c:	0800dc48 	.word	0x0800dc48
 800b830:	0800dc20 	.word	0x0800dc20
 800b834:	2301      	movs	r3, #1
 800b836:	9304      	str	r3, [sp, #16]
 800b838:	4698      	mov	r8, r3
 800b83a:	461a      	mov	r2, r3
 800b83c:	e7da      	b.n	800b7f4 <_dtoa_r+0x2f4>
 800b83e:	3101      	adds	r1, #1
 800b840:	6071      	str	r1, [r6, #4]
 800b842:	0052      	lsls	r2, r2, #1
 800b844:	e787      	b.n	800b756 <_dtoa_r+0x256>
 800b846:	07f1      	lsls	r1, r6, #31
 800b848:	d508      	bpl.n	800b85c <_dtoa_r+0x35c>
 800b84a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b84e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b852:	f7f4 fe41 	bl	80004d8 <__aeabi_dmul>
 800b856:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b85a:	3501      	adds	r5, #1
 800b85c:	1076      	asrs	r6, r6, #1
 800b85e:	3708      	adds	r7, #8
 800b860:	2e00      	cmp	r6, #0
 800b862:	d1f0      	bne.n	800b846 <_dtoa_r+0x346>
 800b864:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b86c:	f7f4 ff5e 	bl	800072c <__aeabi_ddiv>
 800b870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b874:	e01b      	b.n	800b8ae <_dtoa_r+0x3ae>
 800b876:	2502      	movs	r5, #2
 800b878:	e7a0      	b.n	800b7bc <_dtoa_r+0x2bc>
 800b87a:	f000 80a4 	beq.w	800b9c6 <_dtoa_r+0x4c6>
 800b87e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b882:	f1ca 0600 	rsb	r6, sl, #0
 800b886:	4ba0      	ldr	r3, [pc, #640]	; (800bb08 <_dtoa_r+0x608>)
 800b888:	f006 020f 	and.w	r2, r6, #15
 800b88c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b894:	f7f4 fe20 	bl	80004d8 <__aeabi_dmul>
 800b898:	2502      	movs	r5, #2
 800b89a:	2300      	movs	r3, #0
 800b89c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8a0:	4f9a      	ldr	r7, [pc, #616]	; (800bb0c <_dtoa_r+0x60c>)
 800b8a2:	1136      	asrs	r6, r6, #4
 800b8a4:	2e00      	cmp	r6, #0
 800b8a6:	f040 8083 	bne.w	800b9b0 <_dtoa_r+0x4b0>
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1e0      	bne.n	800b870 <_dtoa_r+0x370>
 800b8ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f000 808a 	beq.w	800b9ca <_dtoa_r+0x4ca>
 800b8b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b8be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	4b92      	ldr	r3, [pc, #584]	; (800bb10 <_dtoa_r+0x610>)
 800b8c6:	f7f5 f879 	bl	80009bc <__aeabi_dcmplt>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d07d      	beq.n	800b9ca <_dtoa_r+0x4ca>
 800b8ce:	f1b8 0f00 	cmp.w	r8, #0
 800b8d2:	d07a      	beq.n	800b9ca <_dtoa_r+0x4ca>
 800b8d4:	9b04      	ldr	r3, [sp, #16]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	dd36      	ble.n	800b948 <_dtoa_r+0x448>
 800b8da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b8de:	2200      	movs	r2, #0
 800b8e0:	4b8c      	ldr	r3, [pc, #560]	; (800bb14 <_dtoa_r+0x614>)
 800b8e2:	f7f4 fdf9 	bl	80004d8 <__aeabi_dmul>
 800b8e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8ea:	9e04      	ldr	r6, [sp, #16]
 800b8ec:	f10a 37ff 	add.w	r7, sl, #4294967295
 800b8f0:	3501      	adds	r5, #1
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	f7f4 fd86 	bl	8000404 <__aeabi_i2d>
 800b8f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8fc:	f7f4 fdec 	bl	80004d8 <__aeabi_dmul>
 800b900:	2200      	movs	r2, #0
 800b902:	4b85      	ldr	r3, [pc, #532]	; (800bb18 <_dtoa_r+0x618>)
 800b904:	f7f4 fc32 	bl	800016c <__adddf3>
 800b908:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800b90c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b910:	950b      	str	r5, [sp, #44]	; 0x2c
 800b912:	2e00      	cmp	r6, #0
 800b914:	d15c      	bne.n	800b9d0 <_dtoa_r+0x4d0>
 800b916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b91a:	2200      	movs	r2, #0
 800b91c:	4b7f      	ldr	r3, [pc, #508]	; (800bb1c <_dtoa_r+0x61c>)
 800b91e:	f7f4 fc23 	bl	8000168 <__aeabi_dsub>
 800b922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b924:	462b      	mov	r3, r5
 800b926:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b92a:	f7f5 f865 	bl	80009f8 <__aeabi_dcmpgt>
 800b92e:	2800      	cmp	r0, #0
 800b930:	f040 8281 	bne.w	800be36 <_dtoa_r+0x936>
 800b934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b93a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b93e:	f7f5 f83d 	bl	80009bc <__aeabi_dcmplt>
 800b942:	2800      	cmp	r0, #0
 800b944:	f040 8275 	bne.w	800be32 <_dtoa_r+0x932>
 800b948:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b94c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b950:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b952:	2b00      	cmp	r3, #0
 800b954:	f2c0 814b 	blt.w	800bbee <_dtoa_r+0x6ee>
 800b958:	f1ba 0f0e 	cmp.w	sl, #14
 800b95c:	f300 8147 	bgt.w	800bbee <_dtoa_r+0x6ee>
 800b960:	4b69      	ldr	r3, [pc, #420]	; (800bb08 <_dtoa_r+0x608>)
 800b962:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b96e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b970:	2b00      	cmp	r3, #0
 800b972:	f280 80d7 	bge.w	800bb24 <_dtoa_r+0x624>
 800b976:	f1b8 0f00 	cmp.w	r8, #0
 800b97a:	f300 80d3 	bgt.w	800bb24 <_dtoa_r+0x624>
 800b97e:	f040 8257 	bne.w	800be30 <_dtoa_r+0x930>
 800b982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b986:	2200      	movs	r2, #0
 800b988:	4b64      	ldr	r3, [pc, #400]	; (800bb1c <_dtoa_r+0x61c>)
 800b98a:	f7f4 fda5 	bl	80004d8 <__aeabi_dmul>
 800b98e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b992:	f7f5 f827 	bl	80009e4 <__aeabi_dcmpge>
 800b996:	4646      	mov	r6, r8
 800b998:	4647      	mov	r7, r8
 800b99a:	2800      	cmp	r0, #0
 800b99c:	f040 822d 	bne.w	800bdfa <_dtoa_r+0x8fa>
 800b9a0:	9b06      	ldr	r3, [sp, #24]
 800b9a2:	9a06      	ldr	r2, [sp, #24]
 800b9a4:	1c5d      	adds	r5, r3, #1
 800b9a6:	2331      	movs	r3, #49	; 0x31
 800b9a8:	f10a 0a01 	add.w	sl, sl, #1
 800b9ac:	7013      	strb	r3, [r2, #0]
 800b9ae:	e228      	b.n	800be02 <_dtoa_r+0x902>
 800b9b0:	07f2      	lsls	r2, r6, #31
 800b9b2:	d505      	bpl.n	800b9c0 <_dtoa_r+0x4c0>
 800b9b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9b8:	f7f4 fd8e 	bl	80004d8 <__aeabi_dmul>
 800b9bc:	2301      	movs	r3, #1
 800b9be:	3501      	adds	r5, #1
 800b9c0:	1076      	asrs	r6, r6, #1
 800b9c2:	3708      	adds	r7, #8
 800b9c4:	e76e      	b.n	800b8a4 <_dtoa_r+0x3a4>
 800b9c6:	2502      	movs	r5, #2
 800b9c8:	e771      	b.n	800b8ae <_dtoa_r+0x3ae>
 800b9ca:	4657      	mov	r7, sl
 800b9cc:	4646      	mov	r6, r8
 800b9ce:	e790      	b.n	800b8f2 <_dtoa_r+0x3f2>
 800b9d0:	4b4d      	ldr	r3, [pc, #308]	; (800bb08 <_dtoa_r+0x608>)
 800b9d2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b9d6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b9da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d048      	beq.n	800ba72 <_dtoa_r+0x572>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	494e      	ldr	r1, [pc, #312]	; (800bb20 <_dtoa_r+0x620>)
 800b9e8:	f7f4 fea0 	bl	800072c <__aeabi_ddiv>
 800b9ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b9f0:	f7f4 fbba 	bl	8000168 <__aeabi_dsub>
 800b9f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b9f8:	9d06      	ldr	r5, [sp, #24]
 800b9fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9fe:	f7f5 f81b 	bl	8000a38 <__aeabi_d2iz>
 800ba02:	9011      	str	r0, [sp, #68]	; 0x44
 800ba04:	f7f4 fcfe 	bl	8000404 <__aeabi_i2d>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba10:	f7f4 fbaa 	bl	8000168 <__aeabi_dsub>
 800ba14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba1a:	3330      	adds	r3, #48	; 0x30
 800ba1c:	f805 3b01 	strb.w	r3, [r5], #1
 800ba20:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ba24:	f7f4 ffca 	bl	80009bc <__aeabi_dcmplt>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d163      	bne.n	800baf4 <_dtoa_r+0x5f4>
 800ba2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba30:	2000      	movs	r0, #0
 800ba32:	4937      	ldr	r1, [pc, #220]	; (800bb10 <_dtoa_r+0x610>)
 800ba34:	f7f4 fb98 	bl	8000168 <__aeabi_dsub>
 800ba38:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ba3c:	f7f4 ffbe 	bl	80009bc <__aeabi_dcmplt>
 800ba40:	2800      	cmp	r0, #0
 800ba42:	f040 80b5 	bne.w	800bbb0 <_dtoa_r+0x6b0>
 800ba46:	9b06      	ldr	r3, [sp, #24]
 800ba48:	1aeb      	subs	r3, r5, r3
 800ba4a:	429e      	cmp	r6, r3
 800ba4c:	f77f af7c 	ble.w	800b948 <_dtoa_r+0x448>
 800ba50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba54:	2200      	movs	r2, #0
 800ba56:	4b2f      	ldr	r3, [pc, #188]	; (800bb14 <_dtoa_r+0x614>)
 800ba58:	f7f4 fd3e 	bl	80004d8 <__aeabi_dmul>
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ba62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba66:	4b2b      	ldr	r3, [pc, #172]	; (800bb14 <_dtoa_r+0x614>)
 800ba68:	f7f4 fd36 	bl	80004d8 <__aeabi_dmul>
 800ba6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba70:	e7c3      	b.n	800b9fa <_dtoa_r+0x4fa>
 800ba72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ba76:	f7f4 fd2f 	bl	80004d8 <__aeabi_dmul>
 800ba7a:	9b06      	ldr	r3, [sp, #24]
 800ba7c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ba80:	199d      	adds	r5, r3, r6
 800ba82:	461e      	mov	r6, r3
 800ba84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba88:	f7f4 ffd6 	bl	8000a38 <__aeabi_d2iz>
 800ba8c:	9011      	str	r0, [sp, #68]	; 0x44
 800ba8e:	f7f4 fcb9 	bl	8000404 <__aeabi_i2d>
 800ba92:	4602      	mov	r2, r0
 800ba94:	460b      	mov	r3, r1
 800ba96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba9a:	f7f4 fb65 	bl	8000168 <__aeabi_dsub>
 800ba9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800baa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baa4:	3330      	adds	r3, #48	; 0x30
 800baa6:	f806 3b01 	strb.w	r3, [r6], #1
 800baaa:	42ae      	cmp	r6, r5
 800baac:	f04f 0200 	mov.w	r2, #0
 800bab0:	d124      	bne.n	800bafc <_dtoa_r+0x5fc>
 800bab2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bab6:	4b1a      	ldr	r3, [pc, #104]	; (800bb20 <_dtoa_r+0x620>)
 800bab8:	f7f4 fb58 	bl	800016c <__adddf3>
 800babc:	4602      	mov	r2, r0
 800babe:	460b      	mov	r3, r1
 800bac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bac4:	f7f4 ff98 	bl	80009f8 <__aeabi_dcmpgt>
 800bac8:	2800      	cmp	r0, #0
 800baca:	d171      	bne.n	800bbb0 <_dtoa_r+0x6b0>
 800bacc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bad0:	2000      	movs	r0, #0
 800bad2:	4913      	ldr	r1, [pc, #76]	; (800bb20 <_dtoa_r+0x620>)
 800bad4:	f7f4 fb48 	bl	8000168 <__aeabi_dsub>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bae0:	f7f4 ff6c 	bl	80009bc <__aeabi_dcmplt>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	f43f af2f 	beq.w	800b948 <_dtoa_r+0x448>
 800baea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800baee:	1e6a      	subs	r2, r5, #1
 800baf0:	2b30      	cmp	r3, #48	; 0x30
 800baf2:	d001      	beq.n	800baf8 <_dtoa_r+0x5f8>
 800baf4:	46ba      	mov	sl, r7
 800baf6:	e04a      	b.n	800bb8e <_dtoa_r+0x68e>
 800baf8:	4615      	mov	r5, r2
 800bafa:	e7f6      	b.n	800baea <_dtoa_r+0x5ea>
 800bafc:	4b05      	ldr	r3, [pc, #20]	; (800bb14 <_dtoa_r+0x614>)
 800bafe:	f7f4 fceb 	bl	80004d8 <__aeabi_dmul>
 800bb02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb06:	e7bd      	b.n	800ba84 <_dtoa_r+0x584>
 800bb08:	0800dc48 	.word	0x0800dc48
 800bb0c:	0800dc20 	.word	0x0800dc20
 800bb10:	3ff00000 	.word	0x3ff00000
 800bb14:	40240000 	.word	0x40240000
 800bb18:	401c0000 	.word	0x401c0000
 800bb1c:	40140000 	.word	0x40140000
 800bb20:	3fe00000 	.word	0x3fe00000
 800bb24:	9d06      	ldr	r5, [sp, #24]
 800bb26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bb2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb2e:	4630      	mov	r0, r6
 800bb30:	4639      	mov	r1, r7
 800bb32:	f7f4 fdfb 	bl	800072c <__aeabi_ddiv>
 800bb36:	f7f4 ff7f 	bl	8000a38 <__aeabi_d2iz>
 800bb3a:	4681      	mov	r9, r0
 800bb3c:	f7f4 fc62 	bl	8000404 <__aeabi_i2d>
 800bb40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb44:	f7f4 fcc8 	bl	80004d8 <__aeabi_dmul>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	4639      	mov	r1, r7
 800bb50:	f7f4 fb0a 	bl	8000168 <__aeabi_dsub>
 800bb54:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800bb58:	f805 6b01 	strb.w	r6, [r5], #1
 800bb5c:	9e06      	ldr	r6, [sp, #24]
 800bb5e:	4602      	mov	r2, r0
 800bb60:	1bae      	subs	r6, r5, r6
 800bb62:	45b0      	cmp	r8, r6
 800bb64:	460b      	mov	r3, r1
 800bb66:	d135      	bne.n	800bbd4 <_dtoa_r+0x6d4>
 800bb68:	f7f4 fb00 	bl	800016c <__adddf3>
 800bb6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb70:	4606      	mov	r6, r0
 800bb72:	460f      	mov	r7, r1
 800bb74:	f7f4 ff40 	bl	80009f8 <__aeabi_dcmpgt>
 800bb78:	b9c8      	cbnz	r0, 800bbae <_dtoa_r+0x6ae>
 800bb7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb7e:	4630      	mov	r0, r6
 800bb80:	4639      	mov	r1, r7
 800bb82:	f7f4 ff11 	bl	80009a8 <__aeabi_dcmpeq>
 800bb86:	b110      	cbz	r0, 800bb8e <_dtoa_r+0x68e>
 800bb88:	f019 0f01 	tst.w	r9, #1
 800bb8c:	d10f      	bne.n	800bbae <_dtoa_r+0x6ae>
 800bb8e:	4659      	mov	r1, fp
 800bb90:	4620      	mov	r0, r4
 800bb92:	f000 febd 	bl	800c910 <_Bfree>
 800bb96:	2300      	movs	r3, #0
 800bb98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bb9a:	702b      	strb	r3, [r5, #0]
 800bb9c:	f10a 0301 	add.w	r3, sl, #1
 800bba0:	6013      	str	r3, [r2, #0]
 800bba2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f43f acf3 	beq.w	800b590 <_dtoa_r+0x90>
 800bbaa:	601d      	str	r5, [r3, #0]
 800bbac:	e4f0      	b.n	800b590 <_dtoa_r+0x90>
 800bbae:	4657      	mov	r7, sl
 800bbb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bbb4:	1e6b      	subs	r3, r5, #1
 800bbb6:	2a39      	cmp	r2, #57	; 0x39
 800bbb8:	d106      	bne.n	800bbc8 <_dtoa_r+0x6c8>
 800bbba:	9a06      	ldr	r2, [sp, #24]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d107      	bne.n	800bbd0 <_dtoa_r+0x6d0>
 800bbc0:	2330      	movs	r3, #48	; 0x30
 800bbc2:	7013      	strb	r3, [r2, #0]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	3701      	adds	r7, #1
 800bbc8:	781a      	ldrb	r2, [r3, #0]
 800bbca:	3201      	adds	r2, #1
 800bbcc:	701a      	strb	r2, [r3, #0]
 800bbce:	e791      	b.n	800baf4 <_dtoa_r+0x5f4>
 800bbd0:	461d      	mov	r5, r3
 800bbd2:	e7ed      	b.n	800bbb0 <_dtoa_r+0x6b0>
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	4b99      	ldr	r3, [pc, #612]	; (800be3c <_dtoa_r+0x93c>)
 800bbd8:	f7f4 fc7e 	bl	80004d8 <__aeabi_dmul>
 800bbdc:	2200      	movs	r2, #0
 800bbde:	2300      	movs	r3, #0
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	460f      	mov	r7, r1
 800bbe4:	f7f4 fee0 	bl	80009a8 <__aeabi_dcmpeq>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d09e      	beq.n	800bb2a <_dtoa_r+0x62a>
 800bbec:	e7cf      	b.n	800bb8e <_dtoa_r+0x68e>
 800bbee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbf0:	2a00      	cmp	r2, #0
 800bbf2:	f000 8088 	beq.w	800bd06 <_dtoa_r+0x806>
 800bbf6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bbf8:	2a01      	cmp	r2, #1
 800bbfa:	dc6d      	bgt.n	800bcd8 <_dtoa_r+0x7d8>
 800bbfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bbfe:	2a00      	cmp	r2, #0
 800bc00:	d066      	beq.n	800bcd0 <_dtoa_r+0x7d0>
 800bc02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bc06:	464d      	mov	r5, r9
 800bc08:	9e08      	ldr	r6, [sp, #32]
 800bc0a:	9a07      	ldr	r2, [sp, #28]
 800bc0c:	2101      	movs	r1, #1
 800bc0e:	441a      	add	r2, r3
 800bc10:	4620      	mov	r0, r4
 800bc12:	4499      	add	r9, r3
 800bc14:	9207      	str	r2, [sp, #28]
 800bc16:	f000 ff59 	bl	800cacc <__i2b>
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	2d00      	cmp	r5, #0
 800bc1e:	dd0b      	ble.n	800bc38 <_dtoa_r+0x738>
 800bc20:	9b07      	ldr	r3, [sp, #28]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	dd08      	ble.n	800bc38 <_dtoa_r+0x738>
 800bc26:	42ab      	cmp	r3, r5
 800bc28:	bfa8      	it	ge
 800bc2a:	462b      	movge	r3, r5
 800bc2c:	9a07      	ldr	r2, [sp, #28]
 800bc2e:	eba9 0903 	sub.w	r9, r9, r3
 800bc32:	1aed      	subs	r5, r5, r3
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	9307      	str	r3, [sp, #28]
 800bc38:	9b08      	ldr	r3, [sp, #32]
 800bc3a:	b1eb      	cbz	r3, 800bc78 <_dtoa_r+0x778>
 800bc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d065      	beq.n	800bd0e <_dtoa_r+0x80e>
 800bc42:	b18e      	cbz	r6, 800bc68 <_dtoa_r+0x768>
 800bc44:	4639      	mov	r1, r7
 800bc46:	4632      	mov	r2, r6
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f000 ffdd 	bl	800cc08 <__pow5mult>
 800bc4e:	465a      	mov	r2, fp
 800bc50:	4601      	mov	r1, r0
 800bc52:	4607      	mov	r7, r0
 800bc54:	4620      	mov	r0, r4
 800bc56:	f000 ff42 	bl	800cade <__multiply>
 800bc5a:	4659      	mov	r1, fp
 800bc5c:	900a      	str	r0, [sp, #40]	; 0x28
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f000 fe56 	bl	800c910 <_Bfree>
 800bc64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc66:	469b      	mov	fp, r3
 800bc68:	9b08      	ldr	r3, [sp, #32]
 800bc6a:	1b9a      	subs	r2, r3, r6
 800bc6c:	d004      	beq.n	800bc78 <_dtoa_r+0x778>
 800bc6e:	4659      	mov	r1, fp
 800bc70:	4620      	mov	r0, r4
 800bc72:	f000 ffc9 	bl	800cc08 <__pow5mult>
 800bc76:	4683      	mov	fp, r0
 800bc78:	2101      	movs	r1, #1
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f000 ff26 	bl	800cacc <__i2b>
 800bc80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc82:	4606      	mov	r6, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	f000 81c6 	beq.w	800c016 <_dtoa_r+0xb16>
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	4601      	mov	r1, r0
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f000 ffba 	bl	800cc08 <__pow5mult>
 800bc94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bc96:	4606      	mov	r6, r0
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	dc3e      	bgt.n	800bd1a <_dtoa_r+0x81a>
 800bc9c:	9b02      	ldr	r3, [sp, #8]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d137      	bne.n	800bd12 <_dtoa_r+0x812>
 800bca2:	9b03      	ldr	r3, [sp, #12]
 800bca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d134      	bne.n	800bd16 <_dtoa_r+0x816>
 800bcac:	9b03      	ldr	r3, [sp, #12]
 800bcae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bcb2:	0d1b      	lsrs	r3, r3, #20
 800bcb4:	051b      	lsls	r3, r3, #20
 800bcb6:	b12b      	cbz	r3, 800bcc4 <_dtoa_r+0x7c4>
 800bcb8:	9b07      	ldr	r3, [sp, #28]
 800bcba:	f109 0901 	add.w	r9, r9, #1
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	9307      	str	r3, [sp, #28]
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	9308      	str	r3, [sp, #32]
 800bcc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d128      	bne.n	800bd1e <_dtoa_r+0x81e>
 800bccc:	2001      	movs	r0, #1
 800bcce:	e02e      	b.n	800bd2e <_dtoa_r+0x82e>
 800bcd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bcd2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bcd6:	e796      	b.n	800bc06 <_dtoa_r+0x706>
 800bcd8:	9b08      	ldr	r3, [sp, #32]
 800bcda:	f108 36ff 	add.w	r6, r8, #4294967295
 800bcde:	42b3      	cmp	r3, r6
 800bce0:	bfb7      	itett	lt
 800bce2:	9b08      	ldrlt	r3, [sp, #32]
 800bce4:	1b9e      	subge	r6, r3, r6
 800bce6:	1af2      	sublt	r2, r6, r3
 800bce8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800bcea:	bfbf      	itttt	lt
 800bcec:	9608      	strlt	r6, [sp, #32]
 800bcee:	189b      	addlt	r3, r3, r2
 800bcf0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800bcf2:	2600      	movlt	r6, #0
 800bcf4:	f1b8 0f00 	cmp.w	r8, #0
 800bcf8:	bfb9      	ittee	lt
 800bcfa:	eba9 0508 	sublt.w	r5, r9, r8
 800bcfe:	2300      	movlt	r3, #0
 800bd00:	464d      	movge	r5, r9
 800bd02:	4643      	movge	r3, r8
 800bd04:	e781      	b.n	800bc0a <_dtoa_r+0x70a>
 800bd06:	9e08      	ldr	r6, [sp, #32]
 800bd08:	464d      	mov	r5, r9
 800bd0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bd0c:	e786      	b.n	800bc1c <_dtoa_r+0x71c>
 800bd0e:	9a08      	ldr	r2, [sp, #32]
 800bd10:	e7ad      	b.n	800bc6e <_dtoa_r+0x76e>
 800bd12:	2300      	movs	r3, #0
 800bd14:	e7d6      	b.n	800bcc4 <_dtoa_r+0x7c4>
 800bd16:	9b02      	ldr	r3, [sp, #8]
 800bd18:	e7d4      	b.n	800bcc4 <_dtoa_r+0x7c4>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	9308      	str	r3, [sp, #32]
 800bd1e:	6933      	ldr	r3, [r6, #16]
 800bd20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd24:	6918      	ldr	r0, [r3, #16]
 800bd26:	f000 fe83 	bl	800ca30 <__hi0bits>
 800bd2a:	f1c0 0020 	rsb	r0, r0, #32
 800bd2e:	9b07      	ldr	r3, [sp, #28]
 800bd30:	4418      	add	r0, r3
 800bd32:	f010 001f 	ands.w	r0, r0, #31
 800bd36:	d047      	beq.n	800bdc8 <_dtoa_r+0x8c8>
 800bd38:	f1c0 0320 	rsb	r3, r0, #32
 800bd3c:	2b04      	cmp	r3, #4
 800bd3e:	dd3b      	ble.n	800bdb8 <_dtoa_r+0x8b8>
 800bd40:	9b07      	ldr	r3, [sp, #28]
 800bd42:	f1c0 001c 	rsb	r0, r0, #28
 800bd46:	4481      	add	r9, r0
 800bd48:	4405      	add	r5, r0
 800bd4a:	4403      	add	r3, r0
 800bd4c:	9307      	str	r3, [sp, #28]
 800bd4e:	f1b9 0f00 	cmp.w	r9, #0
 800bd52:	dd05      	ble.n	800bd60 <_dtoa_r+0x860>
 800bd54:	4659      	mov	r1, fp
 800bd56:	464a      	mov	r2, r9
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f000 ffa3 	bl	800cca4 <__lshift>
 800bd5e:	4683      	mov	fp, r0
 800bd60:	9b07      	ldr	r3, [sp, #28]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	dd05      	ble.n	800bd72 <_dtoa_r+0x872>
 800bd66:	4631      	mov	r1, r6
 800bd68:	461a      	mov	r2, r3
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f000 ff9a 	bl	800cca4 <__lshift>
 800bd70:	4606      	mov	r6, r0
 800bd72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd74:	b353      	cbz	r3, 800bdcc <_dtoa_r+0x8cc>
 800bd76:	4631      	mov	r1, r6
 800bd78:	4658      	mov	r0, fp
 800bd7a:	f000 ffe7 	bl	800cd4c <__mcmp>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	da24      	bge.n	800bdcc <_dtoa_r+0x8cc>
 800bd82:	2300      	movs	r3, #0
 800bd84:	4659      	mov	r1, fp
 800bd86:	220a      	movs	r2, #10
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 fdd8 	bl	800c93e <__multadd>
 800bd8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd90:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd94:	4683      	mov	fp, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f000 8144 	beq.w	800c024 <_dtoa_r+0xb24>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	4639      	mov	r1, r7
 800bda0:	220a      	movs	r2, #10
 800bda2:	4620      	mov	r0, r4
 800bda4:	f000 fdcb 	bl	800c93e <__multadd>
 800bda8:	9b04      	ldr	r3, [sp, #16]
 800bdaa:	4607      	mov	r7, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	dc4d      	bgt.n	800be4c <_dtoa_r+0x94c>
 800bdb0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bdb2:	2b02      	cmp	r3, #2
 800bdb4:	dd4a      	ble.n	800be4c <_dtoa_r+0x94c>
 800bdb6:	e011      	b.n	800bddc <_dtoa_r+0x8dc>
 800bdb8:	d0c9      	beq.n	800bd4e <_dtoa_r+0x84e>
 800bdba:	9a07      	ldr	r2, [sp, #28]
 800bdbc:	331c      	adds	r3, #28
 800bdbe:	441a      	add	r2, r3
 800bdc0:	4499      	add	r9, r3
 800bdc2:	441d      	add	r5, r3
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	e7c1      	b.n	800bd4c <_dtoa_r+0x84c>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	e7f6      	b.n	800bdba <_dtoa_r+0x8ba>
 800bdcc:	f1b8 0f00 	cmp.w	r8, #0
 800bdd0:	dc36      	bgt.n	800be40 <_dtoa_r+0x940>
 800bdd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bdd4:	2b02      	cmp	r3, #2
 800bdd6:	dd33      	ble.n	800be40 <_dtoa_r+0x940>
 800bdd8:	f8cd 8010 	str.w	r8, [sp, #16]
 800bddc:	9b04      	ldr	r3, [sp, #16]
 800bdde:	b963      	cbnz	r3, 800bdfa <_dtoa_r+0x8fa>
 800bde0:	4631      	mov	r1, r6
 800bde2:	2205      	movs	r2, #5
 800bde4:	4620      	mov	r0, r4
 800bde6:	f000 fdaa 	bl	800c93e <__multadd>
 800bdea:	4601      	mov	r1, r0
 800bdec:	4606      	mov	r6, r0
 800bdee:	4658      	mov	r0, fp
 800bdf0:	f000 ffac 	bl	800cd4c <__mcmp>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	f73f add3 	bgt.w	800b9a0 <_dtoa_r+0x4a0>
 800bdfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bdfc:	9d06      	ldr	r5, [sp, #24]
 800bdfe:	ea6f 0a03 	mvn.w	sl, r3
 800be02:	f04f 0900 	mov.w	r9, #0
 800be06:	4631      	mov	r1, r6
 800be08:	4620      	mov	r0, r4
 800be0a:	f000 fd81 	bl	800c910 <_Bfree>
 800be0e:	2f00      	cmp	r7, #0
 800be10:	f43f aebd 	beq.w	800bb8e <_dtoa_r+0x68e>
 800be14:	f1b9 0f00 	cmp.w	r9, #0
 800be18:	d005      	beq.n	800be26 <_dtoa_r+0x926>
 800be1a:	45b9      	cmp	r9, r7
 800be1c:	d003      	beq.n	800be26 <_dtoa_r+0x926>
 800be1e:	4649      	mov	r1, r9
 800be20:	4620      	mov	r0, r4
 800be22:	f000 fd75 	bl	800c910 <_Bfree>
 800be26:	4639      	mov	r1, r7
 800be28:	4620      	mov	r0, r4
 800be2a:	f000 fd71 	bl	800c910 <_Bfree>
 800be2e:	e6ae      	b.n	800bb8e <_dtoa_r+0x68e>
 800be30:	2600      	movs	r6, #0
 800be32:	4637      	mov	r7, r6
 800be34:	e7e1      	b.n	800bdfa <_dtoa_r+0x8fa>
 800be36:	46ba      	mov	sl, r7
 800be38:	4637      	mov	r7, r6
 800be3a:	e5b1      	b.n	800b9a0 <_dtoa_r+0x4a0>
 800be3c:	40240000 	.word	0x40240000
 800be40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be42:	f8cd 8010 	str.w	r8, [sp, #16]
 800be46:	2b00      	cmp	r3, #0
 800be48:	f000 80f3 	beq.w	800c032 <_dtoa_r+0xb32>
 800be4c:	2d00      	cmp	r5, #0
 800be4e:	dd05      	ble.n	800be5c <_dtoa_r+0x95c>
 800be50:	4639      	mov	r1, r7
 800be52:	462a      	mov	r2, r5
 800be54:	4620      	mov	r0, r4
 800be56:	f000 ff25 	bl	800cca4 <__lshift>
 800be5a:	4607      	mov	r7, r0
 800be5c:	9b08      	ldr	r3, [sp, #32]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d04c      	beq.n	800befc <_dtoa_r+0x9fc>
 800be62:	6879      	ldr	r1, [r7, #4]
 800be64:	4620      	mov	r0, r4
 800be66:	f000 fd1f 	bl	800c8a8 <_Balloc>
 800be6a:	4605      	mov	r5, r0
 800be6c:	693a      	ldr	r2, [r7, #16]
 800be6e:	f107 010c 	add.w	r1, r7, #12
 800be72:	3202      	adds	r2, #2
 800be74:	0092      	lsls	r2, r2, #2
 800be76:	300c      	adds	r0, #12
 800be78:	f7fd fbec 	bl	8009654 <memcpy>
 800be7c:	2201      	movs	r2, #1
 800be7e:	4629      	mov	r1, r5
 800be80:	4620      	mov	r0, r4
 800be82:	f000 ff0f 	bl	800cca4 <__lshift>
 800be86:	46b9      	mov	r9, r7
 800be88:	4607      	mov	r7, r0
 800be8a:	9b06      	ldr	r3, [sp, #24]
 800be8c:	9307      	str	r3, [sp, #28]
 800be8e:	9b02      	ldr	r3, [sp, #8]
 800be90:	f003 0301 	and.w	r3, r3, #1
 800be94:	9308      	str	r3, [sp, #32]
 800be96:	4631      	mov	r1, r6
 800be98:	4658      	mov	r0, fp
 800be9a:	f7ff faa1 	bl	800b3e0 <quorem>
 800be9e:	4649      	mov	r1, r9
 800bea0:	4605      	mov	r5, r0
 800bea2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bea6:	4658      	mov	r0, fp
 800bea8:	f000 ff50 	bl	800cd4c <__mcmp>
 800beac:	463a      	mov	r2, r7
 800beae:	9002      	str	r0, [sp, #8]
 800beb0:	4631      	mov	r1, r6
 800beb2:	4620      	mov	r0, r4
 800beb4:	f000 ff64 	bl	800cd80 <__mdiff>
 800beb8:	68c3      	ldr	r3, [r0, #12]
 800beba:	4602      	mov	r2, r0
 800bebc:	bb03      	cbnz	r3, 800bf00 <_dtoa_r+0xa00>
 800bebe:	4601      	mov	r1, r0
 800bec0:	9009      	str	r0, [sp, #36]	; 0x24
 800bec2:	4658      	mov	r0, fp
 800bec4:	f000 ff42 	bl	800cd4c <__mcmp>
 800bec8:	4603      	mov	r3, r0
 800beca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800becc:	4611      	mov	r1, r2
 800bece:	4620      	mov	r0, r4
 800bed0:	9309      	str	r3, [sp, #36]	; 0x24
 800bed2:	f000 fd1d 	bl	800c910 <_Bfree>
 800bed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bed8:	b9a3      	cbnz	r3, 800bf04 <_dtoa_r+0xa04>
 800beda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bedc:	b992      	cbnz	r2, 800bf04 <_dtoa_r+0xa04>
 800bede:	9a08      	ldr	r2, [sp, #32]
 800bee0:	b982      	cbnz	r2, 800bf04 <_dtoa_r+0xa04>
 800bee2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bee6:	d029      	beq.n	800bf3c <_dtoa_r+0xa3c>
 800bee8:	9b02      	ldr	r3, [sp, #8]
 800beea:	2b00      	cmp	r3, #0
 800beec:	dd01      	ble.n	800bef2 <_dtoa_r+0x9f2>
 800beee:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800bef2:	9b07      	ldr	r3, [sp, #28]
 800bef4:	1c5d      	adds	r5, r3, #1
 800bef6:	f883 8000 	strb.w	r8, [r3]
 800befa:	e784      	b.n	800be06 <_dtoa_r+0x906>
 800befc:	4638      	mov	r0, r7
 800befe:	e7c2      	b.n	800be86 <_dtoa_r+0x986>
 800bf00:	2301      	movs	r3, #1
 800bf02:	e7e3      	b.n	800becc <_dtoa_r+0x9cc>
 800bf04:	9a02      	ldr	r2, [sp, #8]
 800bf06:	2a00      	cmp	r2, #0
 800bf08:	db04      	blt.n	800bf14 <_dtoa_r+0xa14>
 800bf0a:	d123      	bne.n	800bf54 <_dtoa_r+0xa54>
 800bf0c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bf0e:	bb0a      	cbnz	r2, 800bf54 <_dtoa_r+0xa54>
 800bf10:	9a08      	ldr	r2, [sp, #32]
 800bf12:	b9fa      	cbnz	r2, 800bf54 <_dtoa_r+0xa54>
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	ddec      	ble.n	800bef2 <_dtoa_r+0x9f2>
 800bf18:	4659      	mov	r1, fp
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	f000 fec1 	bl	800cca4 <__lshift>
 800bf22:	4631      	mov	r1, r6
 800bf24:	4683      	mov	fp, r0
 800bf26:	f000 ff11 	bl	800cd4c <__mcmp>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	dc03      	bgt.n	800bf36 <_dtoa_r+0xa36>
 800bf2e:	d1e0      	bne.n	800bef2 <_dtoa_r+0x9f2>
 800bf30:	f018 0f01 	tst.w	r8, #1
 800bf34:	d0dd      	beq.n	800bef2 <_dtoa_r+0x9f2>
 800bf36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bf3a:	d1d8      	bne.n	800beee <_dtoa_r+0x9ee>
 800bf3c:	9b07      	ldr	r3, [sp, #28]
 800bf3e:	9a07      	ldr	r2, [sp, #28]
 800bf40:	1c5d      	adds	r5, r3, #1
 800bf42:	2339      	movs	r3, #57	; 0x39
 800bf44:	7013      	strb	r3, [r2, #0]
 800bf46:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf4a:	1e6a      	subs	r2, r5, #1
 800bf4c:	2b39      	cmp	r3, #57	; 0x39
 800bf4e:	d04d      	beq.n	800bfec <_dtoa_r+0xaec>
 800bf50:	3301      	adds	r3, #1
 800bf52:	e052      	b.n	800bffa <_dtoa_r+0xafa>
 800bf54:	9a07      	ldr	r2, [sp, #28]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	f102 0501 	add.w	r5, r2, #1
 800bf5c:	dd06      	ble.n	800bf6c <_dtoa_r+0xa6c>
 800bf5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bf62:	d0eb      	beq.n	800bf3c <_dtoa_r+0xa3c>
 800bf64:	f108 0801 	add.w	r8, r8, #1
 800bf68:	9b07      	ldr	r3, [sp, #28]
 800bf6a:	e7c4      	b.n	800bef6 <_dtoa_r+0x9f6>
 800bf6c:	9b06      	ldr	r3, [sp, #24]
 800bf6e:	9a04      	ldr	r2, [sp, #16]
 800bf70:	1aeb      	subs	r3, r5, r3
 800bf72:	4293      	cmp	r3, r2
 800bf74:	f805 8c01 	strb.w	r8, [r5, #-1]
 800bf78:	d021      	beq.n	800bfbe <_dtoa_r+0xabe>
 800bf7a:	4659      	mov	r1, fp
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	220a      	movs	r2, #10
 800bf80:	4620      	mov	r0, r4
 800bf82:	f000 fcdc 	bl	800c93e <__multadd>
 800bf86:	45b9      	cmp	r9, r7
 800bf88:	4683      	mov	fp, r0
 800bf8a:	f04f 0300 	mov.w	r3, #0
 800bf8e:	f04f 020a 	mov.w	r2, #10
 800bf92:	4649      	mov	r1, r9
 800bf94:	4620      	mov	r0, r4
 800bf96:	d105      	bne.n	800bfa4 <_dtoa_r+0xaa4>
 800bf98:	f000 fcd1 	bl	800c93e <__multadd>
 800bf9c:	4681      	mov	r9, r0
 800bf9e:	4607      	mov	r7, r0
 800bfa0:	9507      	str	r5, [sp, #28]
 800bfa2:	e778      	b.n	800be96 <_dtoa_r+0x996>
 800bfa4:	f000 fccb 	bl	800c93e <__multadd>
 800bfa8:	4639      	mov	r1, r7
 800bfaa:	4681      	mov	r9, r0
 800bfac:	2300      	movs	r3, #0
 800bfae:	220a      	movs	r2, #10
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	f000 fcc4 	bl	800c93e <__multadd>
 800bfb6:	4607      	mov	r7, r0
 800bfb8:	e7f2      	b.n	800bfa0 <_dtoa_r+0xaa0>
 800bfba:	f04f 0900 	mov.w	r9, #0
 800bfbe:	4659      	mov	r1, fp
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	f000 fe6e 	bl	800cca4 <__lshift>
 800bfc8:	4631      	mov	r1, r6
 800bfca:	4683      	mov	fp, r0
 800bfcc:	f000 febe 	bl	800cd4c <__mcmp>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	dcb8      	bgt.n	800bf46 <_dtoa_r+0xa46>
 800bfd4:	d102      	bne.n	800bfdc <_dtoa_r+0xadc>
 800bfd6:	f018 0f01 	tst.w	r8, #1
 800bfda:	d1b4      	bne.n	800bf46 <_dtoa_r+0xa46>
 800bfdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bfe0:	1e6a      	subs	r2, r5, #1
 800bfe2:	2b30      	cmp	r3, #48	; 0x30
 800bfe4:	f47f af0f 	bne.w	800be06 <_dtoa_r+0x906>
 800bfe8:	4615      	mov	r5, r2
 800bfea:	e7f7      	b.n	800bfdc <_dtoa_r+0xadc>
 800bfec:	9b06      	ldr	r3, [sp, #24]
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d105      	bne.n	800bffe <_dtoa_r+0xafe>
 800bff2:	2331      	movs	r3, #49	; 0x31
 800bff4:	9a06      	ldr	r2, [sp, #24]
 800bff6:	f10a 0a01 	add.w	sl, sl, #1
 800bffa:	7013      	strb	r3, [r2, #0]
 800bffc:	e703      	b.n	800be06 <_dtoa_r+0x906>
 800bffe:	4615      	mov	r5, r2
 800c000:	e7a1      	b.n	800bf46 <_dtoa_r+0xa46>
 800c002:	4b17      	ldr	r3, [pc, #92]	; (800c060 <_dtoa_r+0xb60>)
 800c004:	f7ff bae1 	b.w	800b5ca <_dtoa_r+0xca>
 800c008:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f47f aabb 	bne.w	800b586 <_dtoa_r+0x86>
 800c010:	4b14      	ldr	r3, [pc, #80]	; (800c064 <_dtoa_r+0xb64>)
 800c012:	f7ff bada 	b.w	800b5ca <_dtoa_r+0xca>
 800c016:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c018:	2b01      	cmp	r3, #1
 800c01a:	f77f ae3f 	ble.w	800bc9c <_dtoa_r+0x79c>
 800c01e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c020:	9308      	str	r3, [sp, #32]
 800c022:	e653      	b.n	800bccc <_dtoa_r+0x7cc>
 800c024:	9b04      	ldr	r3, [sp, #16]
 800c026:	2b00      	cmp	r3, #0
 800c028:	dc03      	bgt.n	800c032 <_dtoa_r+0xb32>
 800c02a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	f73f aed5 	bgt.w	800bddc <_dtoa_r+0x8dc>
 800c032:	9d06      	ldr	r5, [sp, #24]
 800c034:	4631      	mov	r1, r6
 800c036:	4658      	mov	r0, fp
 800c038:	f7ff f9d2 	bl	800b3e0 <quorem>
 800c03c:	9b06      	ldr	r3, [sp, #24]
 800c03e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c042:	f805 8b01 	strb.w	r8, [r5], #1
 800c046:	9a04      	ldr	r2, [sp, #16]
 800c048:	1aeb      	subs	r3, r5, r3
 800c04a:	429a      	cmp	r2, r3
 800c04c:	ddb5      	ble.n	800bfba <_dtoa_r+0xaba>
 800c04e:	4659      	mov	r1, fp
 800c050:	2300      	movs	r3, #0
 800c052:	220a      	movs	r2, #10
 800c054:	4620      	mov	r0, r4
 800c056:	f000 fc72 	bl	800c93e <__multadd>
 800c05a:	4683      	mov	fp, r0
 800c05c:	e7ea      	b.n	800c034 <_dtoa_r+0xb34>
 800c05e:	bf00      	nop
 800c060:	0800db8c 	.word	0x0800db8c
 800c064:	0800dc08 	.word	0x0800dc08

0800c068 <__sflush_r>:
 800c068:	898a      	ldrh	r2, [r1, #12]
 800c06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c06e:	4605      	mov	r5, r0
 800c070:	0710      	lsls	r0, r2, #28
 800c072:	460c      	mov	r4, r1
 800c074:	d458      	bmi.n	800c128 <__sflush_r+0xc0>
 800c076:	684b      	ldr	r3, [r1, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	dc05      	bgt.n	800c088 <__sflush_r+0x20>
 800c07c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c07e:	2b00      	cmp	r3, #0
 800c080:	dc02      	bgt.n	800c088 <__sflush_r+0x20>
 800c082:	2000      	movs	r0, #0
 800c084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c08a:	2e00      	cmp	r6, #0
 800c08c:	d0f9      	beq.n	800c082 <__sflush_r+0x1a>
 800c08e:	2300      	movs	r3, #0
 800c090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c094:	682f      	ldr	r7, [r5, #0]
 800c096:	6a21      	ldr	r1, [r4, #32]
 800c098:	602b      	str	r3, [r5, #0]
 800c09a:	d032      	beq.n	800c102 <__sflush_r+0x9a>
 800c09c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c09e:	89a3      	ldrh	r3, [r4, #12]
 800c0a0:	075a      	lsls	r2, r3, #29
 800c0a2:	d505      	bpl.n	800c0b0 <__sflush_r+0x48>
 800c0a4:	6863      	ldr	r3, [r4, #4]
 800c0a6:	1ac0      	subs	r0, r0, r3
 800c0a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0aa:	b10b      	cbz	r3, 800c0b0 <__sflush_r+0x48>
 800c0ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0ae:	1ac0      	subs	r0, r0, r3
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0b6:	6a21      	ldr	r1, [r4, #32]
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	47b0      	blx	r6
 800c0bc:	1c43      	adds	r3, r0, #1
 800c0be:	89a3      	ldrh	r3, [r4, #12]
 800c0c0:	d106      	bne.n	800c0d0 <__sflush_r+0x68>
 800c0c2:	6829      	ldr	r1, [r5, #0]
 800c0c4:	291d      	cmp	r1, #29
 800c0c6:	d848      	bhi.n	800c15a <__sflush_r+0xf2>
 800c0c8:	4a29      	ldr	r2, [pc, #164]	; (800c170 <__sflush_r+0x108>)
 800c0ca:	40ca      	lsrs	r2, r1
 800c0cc:	07d6      	lsls	r6, r2, #31
 800c0ce:	d544      	bpl.n	800c15a <__sflush_r+0xf2>
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	6062      	str	r2, [r4, #4]
 800c0d4:	6922      	ldr	r2, [r4, #16]
 800c0d6:	04d9      	lsls	r1, r3, #19
 800c0d8:	6022      	str	r2, [r4, #0]
 800c0da:	d504      	bpl.n	800c0e6 <__sflush_r+0x7e>
 800c0dc:	1c42      	adds	r2, r0, #1
 800c0de:	d101      	bne.n	800c0e4 <__sflush_r+0x7c>
 800c0e0:	682b      	ldr	r3, [r5, #0]
 800c0e2:	b903      	cbnz	r3, 800c0e6 <__sflush_r+0x7e>
 800c0e4:	6560      	str	r0, [r4, #84]	; 0x54
 800c0e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0e8:	602f      	str	r7, [r5, #0]
 800c0ea:	2900      	cmp	r1, #0
 800c0ec:	d0c9      	beq.n	800c082 <__sflush_r+0x1a>
 800c0ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0f2:	4299      	cmp	r1, r3
 800c0f4:	d002      	beq.n	800c0fc <__sflush_r+0x94>
 800c0f6:	4628      	mov	r0, r5
 800c0f8:	f7fd fac0 	bl	800967c <_free_r>
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	6360      	str	r0, [r4, #52]	; 0x34
 800c100:	e7c0      	b.n	800c084 <__sflush_r+0x1c>
 800c102:	2301      	movs	r3, #1
 800c104:	4628      	mov	r0, r5
 800c106:	47b0      	blx	r6
 800c108:	1c41      	adds	r1, r0, #1
 800c10a:	d1c8      	bne.n	800c09e <__sflush_r+0x36>
 800c10c:	682b      	ldr	r3, [r5, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d0c5      	beq.n	800c09e <__sflush_r+0x36>
 800c112:	2b1d      	cmp	r3, #29
 800c114:	d001      	beq.n	800c11a <__sflush_r+0xb2>
 800c116:	2b16      	cmp	r3, #22
 800c118:	d101      	bne.n	800c11e <__sflush_r+0xb6>
 800c11a:	602f      	str	r7, [r5, #0]
 800c11c:	e7b1      	b.n	800c082 <__sflush_r+0x1a>
 800c11e:	89a3      	ldrh	r3, [r4, #12]
 800c120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c124:	81a3      	strh	r3, [r4, #12]
 800c126:	e7ad      	b.n	800c084 <__sflush_r+0x1c>
 800c128:	690f      	ldr	r7, [r1, #16]
 800c12a:	2f00      	cmp	r7, #0
 800c12c:	d0a9      	beq.n	800c082 <__sflush_r+0x1a>
 800c12e:	0793      	lsls	r3, r2, #30
 800c130:	bf18      	it	ne
 800c132:	2300      	movne	r3, #0
 800c134:	680e      	ldr	r6, [r1, #0]
 800c136:	bf08      	it	eq
 800c138:	694b      	ldreq	r3, [r1, #20]
 800c13a:	eba6 0807 	sub.w	r8, r6, r7
 800c13e:	600f      	str	r7, [r1, #0]
 800c140:	608b      	str	r3, [r1, #8]
 800c142:	f1b8 0f00 	cmp.w	r8, #0
 800c146:	dd9c      	ble.n	800c082 <__sflush_r+0x1a>
 800c148:	4643      	mov	r3, r8
 800c14a:	463a      	mov	r2, r7
 800c14c:	6a21      	ldr	r1, [r4, #32]
 800c14e:	4628      	mov	r0, r5
 800c150:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c152:	47b0      	blx	r6
 800c154:	2800      	cmp	r0, #0
 800c156:	dc06      	bgt.n	800c166 <__sflush_r+0xfe>
 800c158:	89a3      	ldrh	r3, [r4, #12]
 800c15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c15e:	81a3      	strh	r3, [r4, #12]
 800c160:	f04f 30ff 	mov.w	r0, #4294967295
 800c164:	e78e      	b.n	800c084 <__sflush_r+0x1c>
 800c166:	4407      	add	r7, r0
 800c168:	eba8 0800 	sub.w	r8, r8, r0
 800c16c:	e7e9      	b.n	800c142 <__sflush_r+0xda>
 800c16e:	bf00      	nop
 800c170:	20400001 	.word	0x20400001

0800c174 <_fflush_r>:
 800c174:	b538      	push	{r3, r4, r5, lr}
 800c176:	690b      	ldr	r3, [r1, #16]
 800c178:	4605      	mov	r5, r0
 800c17a:	460c      	mov	r4, r1
 800c17c:	b1db      	cbz	r3, 800c1b6 <_fflush_r+0x42>
 800c17e:	b118      	cbz	r0, 800c188 <_fflush_r+0x14>
 800c180:	6983      	ldr	r3, [r0, #24]
 800c182:	b90b      	cbnz	r3, 800c188 <_fflush_r+0x14>
 800c184:	f7fd f9a8 	bl	80094d8 <__sinit>
 800c188:	4b0c      	ldr	r3, [pc, #48]	; (800c1bc <_fflush_r+0x48>)
 800c18a:	429c      	cmp	r4, r3
 800c18c:	d109      	bne.n	800c1a2 <_fflush_r+0x2e>
 800c18e:	686c      	ldr	r4, [r5, #4]
 800c190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c194:	b17b      	cbz	r3, 800c1b6 <_fflush_r+0x42>
 800c196:	4621      	mov	r1, r4
 800c198:	4628      	mov	r0, r5
 800c19a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c19e:	f7ff bf63 	b.w	800c068 <__sflush_r>
 800c1a2:	4b07      	ldr	r3, [pc, #28]	; (800c1c0 <_fflush_r+0x4c>)
 800c1a4:	429c      	cmp	r4, r3
 800c1a6:	d101      	bne.n	800c1ac <_fflush_r+0x38>
 800c1a8:	68ac      	ldr	r4, [r5, #8]
 800c1aa:	e7f1      	b.n	800c190 <_fflush_r+0x1c>
 800c1ac:	4b05      	ldr	r3, [pc, #20]	; (800c1c4 <_fflush_r+0x50>)
 800c1ae:	429c      	cmp	r4, r3
 800c1b0:	bf08      	it	eq
 800c1b2:	68ec      	ldreq	r4, [r5, #12]
 800c1b4:	e7ec      	b.n	800c190 <_fflush_r+0x1c>
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	bd38      	pop	{r3, r4, r5, pc}
 800c1ba:	bf00      	nop
 800c1bc:	0800db38 	.word	0x0800db38
 800c1c0:	0800db58 	.word	0x0800db58
 800c1c4:	0800db18 	.word	0x0800db18

0800c1c8 <rshift>:
 800c1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1ca:	6906      	ldr	r6, [r0, #16]
 800c1cc:	114b      	asrs	r3, r1, #5
 800c1ce:	429e      	cmp	r6, r3
 800c1d0:	f100 0414 	add.w	r4, r0, #20
 800c1d4:	dd31      	ble.n	800c23a <rshift+0x72>
 800c1d6:	f011 011f 	ands.w	r1, r1, #31
 800c1da:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c1de:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c1e2:	d108      	bne.n	800c1f6 <rshift+0x2e>
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	42b2      	cmp	r2, r6
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	d211      	bcs.n	800c210 <rshift+0x48>
 800c1ec:	f852 3b04 	ldr.w	r3, [r2], #4
 800c1f0:	f841 3b04 	str.w	r3, [r1], #4
 800c1f4:	e7f7      	b.n	800c1e6 <rshift+0x1e>
 800c1f6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c1fa:	4623      	mov	r3, r4
 800c1fc:	f1c1 0c20 	rsb	ip, r1, #32
 800c200:	40cd      	lsrs	r5, r1
 800c202:	3204      	adds	r2, #4
 800c204:	42b2      	cmp	r2, r6
 800c206:	4617      	mov	r7, r2
 800c208:	d30d      	bcc.n	800c226 <rshift+0x5e>
 800c20a:	601d      	str	r5, [r3, #0]
 800c20c:	b105      	cbz	r5, 800c210 <rshift+0x48>
 800c20e:	3304      	adds	r3, #4
 800c210:	42a3      	cmp	r3, r4
 800c212:	eba3 0204 	sub.w	r2, r3, r4
 800c216:	bf08      	it	eq
 800c218:	2300      	moveq	r3, #0
 800c21a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c21e:	6102      	str	r2, [r0, #16]
 800c220:	bf08      	it	eq
 800c222:	6143      	streq	r3, [r0, #20]
 800c224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c226:	683f      	ldr	r7, [r7, #0]
 800c228:	fa07 f70c 	lsl.w	r7, r7, ip
 800c22c:	433d      	orrs	r5, r7
 800c22e:	f843 5b04 	str.w	r5, [r3], #4
 800c232:	f852 5b04 	ldr.w	r5, [r2], #4
 800c236:	40cd      	lsrs	r5, r1
 800c238:	e7e4      	b.n	800c204 <rshift+0x3c>
 800c23a:	4623      	mov	r3, r4
 800c23c:	e7e8      	b.n	800c210 <rshift+0x48>

0800c23e <__hexdig_fun>:
 800c23e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c242:	2b09      	cmp	r3, #9
 800c244:	d802      	bhi.n	800c24c <__hexdig_fun+0xe>
 800c246:	3820      	subs	r0, #32
 800c248:	b2c0      	uxtb	r0, r0
 800c24a:	4770      	bx	lr
 800c24c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c250:	2b05      	cmp	r3, #5
 800c252:	d801      	bhi.n	800c258 <__hexdig_fun+0x1a>
 800c254:	3847      	subs	r0, #71	; 0x47
 800c256:	e7f7      	b.n	800c248 <__hexdig_fun+0xa>
 800c258:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c25c:	2b05      	cmp	r3, #5
 800c25e:	d801      	bhi.n	800c264 <__hexdig_fun+0x26>
 800c260:	3827      	subs	r0, #39	; 0x27
 800c262:	e7f1      	b.n	800c248 <__hexdig_fun+0xa>
 800c264:	2000      	movs	r0, #0
 800c266:	4770      	bx	lr

0800c268 <__gethex>:
 800c268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c26c:	b08b      	sub	sp, #44	; 0x2c
 800c26e:	9002      	str	r0, [sp, #8]
 800c270:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c272:	468a      	mov	sl, r1
 800c274:	4690      	mov	r8, r2
 800c276:	9306      	str	r3, [sp, #24]
 800c278:	f000 fad1 	bl	800c81e <__localeconv_l>
 800c27c:	6803      	ldr	r3, [r0, #0]
 800c27e:	f04f 0b00 	mov.w	fp, #0
 800c282:	4618      	mov	r0, r3
 800c284:	9303      	str	r3, [sp, #12]
 800c286:	f7f3 ff63 	bl	8000150 <strlen>
 800c28a:	9b03      	ldr	r3, [sp, #12]
 800c28c:	9001      	str	r0, [sp, #4]
 800c28e:	4403      	add	r3, r0
 800c290:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c294:	9307      	str	r3, [sp, #28]
 800c296:	f8da 3000 	ldr.w	r3, [sl]
 800c29a:	3302      	adds	r3, #2
 800c29c:	461f      	mov	r7, r3
 800c29e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c2a2:	2830      	cmp	r0, #48	; 0x30
 800c2a4:	d06c      	beq.n	800c380 <__gethex+0x118>
 800c2a6:	f7ff ffca 	bl	800c23e <__hexdig_fun>
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	d16a      	bne.n	800c386 <__gethex+0x11e>
 800c2b0:	9a01      	ldr	r2, [sp, #4]
 800c2b2:	9903      	ldr	r1, [sp, #12]
 800c2b4:	4638      	mov	r0, r7
 800c2b6:	f001 f99f 	bl	800d5f8 <strncmp>
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	d166      	bne.n	800c38c <__gethex+0x124>
 800c2be:	9b01      	ldr	r3, [sp, #4]
 800c2c0:	5cf8      	ldrb	r0, [r7, r3]
 800c2c2:	18fe      	adds	r6, r7, r3
 800c2c4:	f7ff ffbb 	bl	800c23e <__hexdig_fun>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	d062      	beq.n	800c392 <__gethex+0x12a>
 800c2cc:	4633      	mov	r3, r6
 800c2ce:	7818      	ldrb	r0, [r3, #0]
 800c2d0:	461f      	mov	r7, r3
 800c2d2:	2830      	cmp	r0, #48	; 0x30
 800c2d4:	f103 0301 	add.w	r3, r3, #1
 800c2d8:	d0f9      	beq.n	800c2ce <__gethex+0x66>
 800c2da:	f7ff ffb0 	bl	800c23e <__hexdig_fun>
 800c2de:	fab0 f580 	clz	r5, r0
 800c2e2:	4634      	mov	r4, r6
 800c2e4:	f04f 0b01 	mov.w	fp, #1
 800c2e8:	096d      	lsrs	r5, r5, #5
 800c2ea:	463a      	mov	r2, r7
 800c2ec:	4616      	mov	r6, r2
 800c2ee:	7830      	ldrb	r0, [r6, #0]
 800c2f0:	3201      	adds	r2, #1
 800c2f2:	f7ff ffa4 	bl	800c23e <__hexdig_fun>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	d1f8      	bne.n	800c2ec <__gethex+0x84>
 800c2fa:	9a01      	ldr	r2, [sp, #4]
 800c2fc:	9903      	ldr	r1, [sp, #12]
 800c2fe:	4630      	mov	r0, r6
 800c300:	f001 f97a 	bl	800d5f8 <strncmp>
 800c304:	b950      	cbnz	r0, 800c31c <__gethex+0xb4>
 800c306:	b954      	cbnz	r4, 800c31e <__gethex+0xb6>
 800c308:	9b01      	ldr	r3, [sp, #4]
 800c30a:	18f4      	adds	r4, r6, r3
 800c30c:	4622      	mov	r2, r4
 800c30e:	4616      	mov	r6, r2
 800c310:	7830      	ldrb	r0, [r6, #0]
 800c312:	3201      	adds	r2, #1
 800c314:	f7ff ff93 	bl	800c23e <__hexdig_fun>
 800c318:	2800      	cmp	r0, #0
 800c31a:	d1f8      	bne.n	800c30e <__gethex+0xa6>
 800c31c:	b10c      	cbz	r4, 800c322 <__gethex+0xba>
 800c31e:	1ba4      	subs	r4, r4, r6
 800c320:	00a4      	lsls	r4, r4, #2
 800c322:	7833      	ldrb	r3, [r6, #0]
 800c324:	2b50      	cmp	r3, #80	; 0x50
 800c326:	d001      	beq.n	800c32c <__gethex+0xc4>
 800c328:	2b70      	cmp	r3, #112	; 0x70
 800c32a:	d140      	bne.n	800c3ae <__gethex+0x146>
 800c32c:	7873      	ldrb	r3, [r6, #1]
 800c32e:	2b2b      	cmp	r3, #43	; 0x2b
 800c330:	d031      	beq.n	800c396 <__gethex+0x12e>
 800c332:	2b2d      	cmp	r3, #45	; 0x2d
 800c334:	d033      	beq.n	800c39e <__gethex+0x136>
 800c336:	f04f 0900 	mov.w	r9, #0
 800c33a:	1c71      	adds	r1, r6, #1
 800c33c:	7808      	ldrb	r0, [r1, #0]
 800c33e:	f7ff ff7e 	bl	800c23e <__hexdig_fun>
 800c342:	1e43      	subs	r3, r0, #1
 800c344:	b2db      	uxtb	r3, r3
 800c346:	2b18      	cmp	r3, #24
 800c348:	d831      	bhi.n	800c3ae <__gethex+0x146>
 800c34a:	f1a0 0210 	sub.w	r2, r0, #16
 800c34e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c352:	f7ff ff74 	bl	800c23e <__hexdig_fun>
 800c356:	1e43      	subs	r3, r0, #1
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	2b18      	cmp	r3, #24
 800c35c:	d922      	bls.n	800c3a4 <__gethex+0x13c>
 800c35e:	f1b9 0f00 	cmp.w	r9, #0
 800c362:	d000      	beq.n	800c366 <__gethex+0xfe>
 800c364:	4252      	negs	r2, r2
 800c366:	4414      	add	r4, r2
 800c368:	f8ca 1000 	str.w	r1, [sl]
 800c36c:	b30d      	cbz	r5, 800c3b2 <__gethex+0x14a>
 800c36e:	f1bb 0f00 	cmp.w	fp, #0
 800c372:	bf0c      	ite	eq
 800c374:	2706      	moveq	r7, #6
 800c376:	2700      	movne	r7, #0
 800c378:	4638      	mov	r0, r7
 800c37a:	b00b      	add	sp, #44	; 0x2c
 800c37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c380:	f10b 0b01 	add.w	fp, fp, #1
 800c384:	e78a      	b.n	800c29c <__gethex+0x34>
 800c386:	2500      	movs	r5, #0
 800c388:	462c      	mov	r4, r5
 800c38a:	e7ae      	b.n	800c2ea <__gethex+0x82>
 800c38c:	463e      	mov	r6, r7
 800c38e:	2501      	movs	r5, #1
 800c390:	e7c7      	b.n	800c322 <__gethex+0xba>
 800c392:	4604      	mov	r4, r0
 800c394:	e7fb      	b.n	800c38e <__gethex+0x126>
 800c396:	f04f 0900 	mov.w	r9, #0
 800c39a:	1cb1      	adds	r1, r6, #2
 800c39c:	e7ce      	b.n	800c33c <__gethex+0xd4>
 800c39e:	f04f 0901 	mov.w	r9, #1
 800c3a2:	e7fa      	b.n	800c39a <__gethex+0x132>
 800c3a4:	230a      	movs	r3, #10
 800c3a6:	fb03 0202 	mla	r2, r3, r2, r0
 800c3aa:	3a10      	subs	r2, #16
 800c3ac:	e7cf      	b.n	800c34e <__gethex+0xe6>
 800c3ae:	4631      	mov	r1, r6
 800c3b0:	e7da      	b.n	800c368 <__gethex+0x100>
 800c3b2:	4629      	mov	r1, r5
 800c3b4:	1bf3      	subs	r3, r6, r7
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	2b07      	cmp	r3, #7
 800c3ba:	dc49      	bgt.n	800c450 <__gethex+0x1e8>
 800c3bc:	9802      	ldr	r0, [sp, #8]
 800c3be:	f000 fa73 	bl	800c8a8 <_Balloc>
 800c3c2:	f04f 0b00 	mov.w	fp, #0
 800c3c6:	4605      	mov	r5, r0
 800c3c8:	46da      	mov	sl, fp
 800c3ca:	9b01      	ldr	r3, [sp, #4]
 800c3cc:	f100 0914 	add.w	r9, r0, #20
 800c3d0:	f1c3 0301 	rsb	r3, r3, #1
 800c3d4:	f8cd 9010 	str.w	r9, [sp, #16]
 800c3d8:	9308      	str	r3, [sp, #32]
 800c3da:	42b7      	cmp	r7, r6
 800c3dc:	d33b      	bcc.n	800c456 <__gethex+0x1ee>
 800c3de:	9804      	ldr	r0, [sp, #16]
 800c3e0:	f840 ab04 	str.w	sl, [r0], #4
 800c3e4:	eba0 0009 	sub.w	r0, r0, r9
 800c3e8:	1080      	asrs	r0, r0, #2
 800c3ea:	6128      	str	r0, [r5, #16]
 800c3ec:	0147      	lsls	r7, r0, #5
 800c3ee:	4650      	mov	r0, sl
 800c3f0:	f000 fb1e 	bl	800ca30 <__hi0bits>
 800c3f4:	f8d8 6000 	ldr.w	r6, [r8]
 800c3f8:	1a3f      	subs	r7, r7, r0
 800c3fa:	42b7      	cmp	r7, r6
 800c3fc:	dd64      	ble.n	800c4c8 <__gethex+0x260>
 800c3fe:	1bbf      	subs	r7, r7, r6
 800c400:	4639      	mov	r1, r7
 800c402:	4628      	mov	r0, r5
 800c404:	f000 fe27 	bl	800d056 <__any_on>
 800c408:	4682      	mov	sl, r0
 800c40a:	b178      	cbz	r0, 800c42c <__gethex+0x1c4>
 800c40c:	f04f 0a01 	mov.w	sl, #1
 800c410:	1e7b      	subs	r3, r7, #1
 800c412:	1159      	asrs	r1, r3, #5
 800c414:	f003 021f 	and.w	r2, r3, #31
 800c418:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c41c:	fa0a f202 	lsl.w	r2, sl, r2
 800c420:	420a      	tst	r2, r1
 800c422:	d003      	beq.n	800c42c <__gethex+0x1c4>
 800c424:	4553      	cmp	r3, sl
 800c426:	dc46      	bgt.n	800c4b6 <__gethex+0x24e>
 800c428:	f04f 0a02 	mov.w	sl, #2
 800c42c:	4639      	mov	r1, r7
 800c42e:	4628      	mov	r0, r5
 800c430:	f7ff feca 	bl	800c1c8 <rshift>
 800c434:	443c      	add	r4, r7
 800c436:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c43a:	42a3      	cmp	r3, r4
 800c43c:	da52      	bge.n	800c4e4 <__gethex+0x27c>
 800c43e:	4629      	mov	r1, r5
 800c440:	9802      	ldr	r0, [sp, #8]
 800c442:	f000 fa65 	bl	800c910 <_Bfree>
 800c446:	2300      	movs	r3, #0
 800c448:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c44a:	27a3      	movs	r7, #163	; 0xa3
 800c44c:	6013      	str	r3, [r2, #0]
 800c44e:	e793      	b.n	800c378 <__gethex+0x110>
 800c450:	3101      	adds	r1, #1
 800c452:	105b      	asrs	r3, r3, #1
 800c454:	e7b0      	b.n	800c3b8 <__gethex+0x150>
 800c456:	1e73      	subs	r3, r6, #1
 800c458:	9305      	str	r3, [sp, #20]
 800c45a:	9a07      	ldr	r2, [sp, #28]
 800c45c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c460:	4293      	cmp	r3, r2
 800c462:	d018      	beq.n	800c496 <__gethex+0x22e>
 800c464:	f1bb 0f20 	cmp.w	fp, #32
 800c468:	d107      	bne.n	800c47a <__gethex+0x212>
 800c46a:	9b04      	ldr	r3, [sp, #16]
 800c46c:	f8c3 a000 	str.w	sl, [r3]
 800c470:	f04f 0a00 	mov.w	sl, #0
 800c474:	46d3      	mov	fp, sl
 800c476:	3304      	adds	r3, #4
 800c478:	9304      	str	r3, [sp, #16]
 800c47a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c47e:	f7ff fede 	bl	800c23e <__hexdig_fun>
 800c482:	f000 000f 	and.w	r0, r0, #15
 800c486:	fa00 f00b 	lsl.w	r0, r0, fp
 800c48a:	ea4a 0a00 	orr.w	sl, sl, r0
 800c48e:	f10b 0b04 	add.w	fp, fp, #4
 800c492:	9b05      	ldr	r3, [sp, #20]
 800c494:	e00d      	b.n	800c4b2 <__gethex+0x24a>
 800c496:	9b05      	ldr	r3, [sp, #20]
 800c498:	9a08      	ldr	r2, [sp, #32]
 800c49a:	4413      	add	r3, r2
 800c49c:	42bb      	cmp	r3, r7
 800c49e:	d3e1      	bcc.n	800c464 <__gethex+0x1fc>
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	9a01      	ldr	r2, [sp, #4]
 800c4a4:	9903      	ldr	r1, [sp, #12]
 800c4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a8:	f001 f8a6 	bl	800d5f8 <strncmp>
 800c4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	d1d8      	bne.n	800c464 <__gethex+0x1fc>
 800c4b2:	461e      	mov	r6, r3
 800c4b4:	e791      	b.n	800c3da <__gethex+0x172>
 800c4b6:	1eb9      	subs	r1, r7, #2
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	f000 fdcc 	bl	800d056 <__any_on>
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	d0b2      	beq.n	800c428 <__gethex+0x1c0>
 800c4c2:	f04f 0a03 	mov.w	sl, #3
 800c4c6:	e7b1      	b.n	800c42c <__gethex+0x1c4>
 800c4c8:	da09      	bge.n	800c4de <__gethex+0x276>
 800c4ca:	1bf7      	subs	r7, r6, r7
 800c4cc:	4629      	mov	r1, r5
 800c4ce:	463a      	mov	r2, r7
 800c4d0:	9802      	ldr	r0, [sp, #8]
 800c4d2:	f000 fbe7 	bl	800cca4 <__lshift>
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	1be4      	subs	r4, r4, r7
 800c4da:	f100 0914 	add.w	r9, r0, #20
 800c4de:	f04f 0a00 	mov.w	sl, #0
 800c4e2:	e7a8      	b.n	800c436 <__gethex+0x1ce>
 800c4e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c4e8:	42a0      	cmp	r0, r4
 800c4ea:	dd6b      	ble.n	800c5c4 <__gethex+0x35c>
 800c4ec:	1b04      	subs	r4, r0, r4
 800c4ee:	42a6      	cmp	r6, r4
 800c4f0:	dc2e      	bgt.n	800c550 <__gethex+0x2e8>
 800c4f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	d022      	beq.n	800c540 <__gethex+0x2d8>
 800c4fa:	2b03      	cmp	r3, #3
 800c4fc:	d024      	beq.n	800c548 <__gethex+0x2e0>
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d115      	bne.n	800c52e <__gethex+0x2c6>
 800c502:	42a6      	cmp	r6, r4
 800c504:	d113      	bne.n	800c52e <__gethex+0x2c6>
 800c506:	2e01      	cmp	r6, #1
 800c508:	dc0b      	bgt.n	800c522 <__gethex+0x2ba>
 800c50a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c50e:	9a06      	ldr	r2, [sp, #24]
 800c510:	2762      	movs	r7, #98	; 0x62
 800c512:	6013      	str	r3, [r2, #0]
 800c514:	2301      	movs	r3, #1
 800c516:	612b      	str	r3, [r5, #16]
 800c518:	f8c9 3000 	str.w	r3, [r9]
 800c51c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c51e:	601d      	str	r5, [r3, #0]
 800c520:	e72a      	b.n	800c378 <__gethex+0x110>
 800c522:	1e71      	subs	r1, r6, #1
 800c524:	4628      	mov	r0, r5
 800c526:	f000 fd96 	bl	800d056 <__any_on>
 800c52a:	2800      	cmp	r0, #0
 800c52c:	d1ed      	bne.n	800c50a <__gethex+0x2a2>
 800c52e:	4629      	mov	r1, r5
 800c530:	9802      	ldr	r0, [sp, #8]
 800c532:	f000 f9ed 	bl	800c910 <_Bfree>
 800c536:	2300      	movs	r3, #0
 800c538:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c53a:	2750      	movs	r7, #80	; 0x50
 800c53c:	6013      	str	r3, [r2, #0]
 800c53e:	e71b      	b.n	800c378 <__gethex+0x110>
 800c540:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c542:	2b00      	cmp	r3, #0
 800c544:	d0e1      	beq.n	800c50a <__gethex+0x2a2>
 800c546:	e7f2      	b.n	800c52e <__gethex+0x2c6>
 800c548:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1dd      	bne.n	800c50a <__gethex+0x2a2>
 800c54e:	e7ee      	b.n	800c52e <__gethex+0x2c6>
 800c550:	1e67      	subs	r7, r4, #1
 800c552:	f1ba 0f00 	cmp.w	sl, #0
 800c556:	d132      	bne.n	800c5be <__gethex+0x356>
 800c558:	b127      	cbz	r7, 800c564 <__gethex+0x2fc>
 800c55a:	4639      	mov	r1, r7
 800c55c:	4628      	mov	r0, r5
 800c55e:	f000 fd7a 	bl	800d056 <__any_on>
 800c562:	4682      	mov	sl, r0
 800c564:	2301      	movs	r3, #1
 800c566:	117a      	asrs	r2, r7, #5
 800c568:	f007 071f 	and.w	r7, r7, #31
 800c56c:	fa03 f707 	lsl.w	r7, r3, r7
 800c570:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c574:	4621      	mov	r1, r4
 800c576:	421f      	tst	r7, r3
 800c578:	f04f 0702 	mov.w	r7, #2
 800c57c:	4628      	mov	r0, r5
 800c57e:	bf18      	it	ne
 800c580:	f04a 0a02 	orrne.w	sl, sl, #2
 800c584:	1b36      	subs	r6, r6, r4
 800c586:	f7ff fe1f 	bl	800c1c8 <rshift>
 800c58a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c58e:	f1ba 0f00 	cmp.w	sl, #0
 800c592:	d048      	beq.n	800c626 <__gethex+0x3be>
 800c594:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c598:	2b02      	cmp	r3, #2
 800c59a:	d015      	beq.n	800c5c8 <__gethex+0x360>
 800c59c:	2b03      	cmp	r3, #3
 800c59e:	d017      	beq.n	800c5d0 <__gethex+0x368>
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d109      	bne.n	800c5b8 <__gethex+0x350>
 800c5a4:	f01a 0f02 	tst.w	sl, #2
 800c5a8:	d006      	beq.n	800c5b8 <__gethex+0x350>
 800c5aa:	f8d9 3000 	ldr.w	r3, [r9]
 800c5ae:	ea4a 0a03 	orr.w	sl, sl, r3
 800c5b2:	f01a 0f01 	tst.w	sl, #1
 800c5b6:	d10e      	bne.n	800c5d6 <__gethex+0x36e>
 800c5b8:	f047 0710 	orr.w	r7, r7, #16
 800c5bc:	e033      	b.n	800c626 <__gethex+0x3be>
 800c5be:	f04f 0a01 	mov.w	sl, #1
 800c5c2:	e7cf      	b.n	800c564 <__gethex+0x2fc>
 800c5c4:	2701      	movs	r7, #1
 800c5c6:	e7e2      	b.n	800c58e <__gethex+0x326>
 800c5c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5ca:	f1c3 0301 	rsb	r3, r3, #1
 800c5ce:	9315      	str	r3, [sp, #84]	; 0x54
 800c5d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d0f0      	beq.n	800c5b8 <__gethex+0x350>
 800c5d6:	f04f 0c00 	mov.w	ip, #0
 800c5da:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c5de:	f105 0314 	add.w	r3, r5, #20
 800c5e2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c5e6:	eb03 010a 	add.w	r1, r3, sl
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5f0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c5f4:	d01c      	beq.n	800c630 <__gethex+0x3c8>
 800c5f6:	3201      	adds	r2, #1
 800c5f8:	6002      	str	r2, [r0, #0]
 800c5fa:	2f02      	cmp	r7, #2
 800c5fc:	f105 0314 	add.w	r3, r5, #20
 800c600:	d138      	bne.n	800c674 <__gethex+0x40c>
 800c602:	f8d8 2000 	ldr.w	r2, [r8]
 800c606:	3a01      	subs	r2, #1
 800c608:	42b2      	cmp	r2, r6
 800c60a:	d10a      	bne.n	800c622 <__gethex+0x3ba>
 800c60c:	2201      	movs	r2, #1
 800c60e:	1171      	asrs	r1, r6, #5
 800c610:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c614:	f006 061f 	and.w	r6, r6, #31
 800c618:	fa02 f606 	lsl.w	r6, r2, r6
 800c61c:	421e      	tst	r6, r3
 800c61e:	bf18      	it	ne
 800c620:	4617      	movne	r7, r2
 800c622:	f047 0720 	orr.w	r7, r7, #32
 800c626:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c628:	601d      	str	r5, [r3, #0]
 800c62a:	9b06      	ldr	r3, [sp, #24]
 800c62c:	601c      	str	r4, [r3, #0]
 800c62e:	e6a3      	b.n	800c378 <__gethex+0x110>
 800c630:	4299      	cmp	r1, r3
 800c632:	f843 cc04 	str.w	ip, [r3, #-4]
 800c636:	d8d8      	bhi.n	800c5ea <__gethex+0x382>
 800c638:	68ab      	ldr	r3, [r5, #8]
 800c63a:	4599      	cmp	r9, r3
 800c63c:	db12      	blt.n	800c664 <__gethex+0x3fc>
 800c63e:	6869      	ldr	r1, [r5, #4]
 800c640:	9802      	ldr	r0, [sp, #8]
 800c642:	3101      	adds	r1, #1
 800c644:	f000 f930 	bl	800c8a8 <_Balloc>
 800c648:	4683      	mov	fp, r0
 800c64a:	692a      	ldr	r2, [r5, #16]
 800c64c:	f105 010c 	add.w	r1, r5, #12
 800c650:	3202      	adds	r2, #2
 800c652:	0092      	lsls	r2, r2, #2
 800c654:	300c      	adds	r0, #12
 800c656:	f7fc fffd 	bl	8009654 <memcpy>
 800c65a:	4629      	mov	r1, r5
 800c65c:	9802      	ldr	r0, [sp, #8]
 800c65e:	f000 f957 	bl	800c910 <_Bfree>
 800c662:	465d      	mov	r5, fp
 800c664:	692b      	ldr	r3, [r5, #16]
 800c666:	1c5a      	adds	r2, r3, #1
 800c668:	612a      	str	r2, [r5, #16]
 800c66a:	2201      	movs	r2, #1
 800c66c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c670:	615a      	str	r2, [r3, #20]
 800c672:	e7c2      	b.n	800c5fa <__gethex+0x392>
 800c674:	692a      	ldr	r2, [r5, #16]
 800c676:	454a      	cmp	r2, r9
 800c678:	dd0b      	ble.n	800c692 <__gethex+0x42a>
 800c67a:	2101      	movs	r1, #1
 800c67c:	4628      	mov	r0, r5
 800c67e:	f7ff fda3 	bl	800c1c8 <rshift>
 800c682:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c686:	3401      	adds	r4, #1
 800c688:	42a3      	cmp	r3, r4
 800c68a:	f6ff aed8 	blt.w	800c43e <__gethex+0x1d6>
 800c68e:	2701      	movs	r7, #1
 800c690:	e7c7      	b.n	800c622 <__gethex+0x3ba>
 800c692:	f016 061f 	ands.w	r6, r6, #31
 800c696:	d0fa      	beq.n	800c68e <__gethex+0x426>
 800c698:	449a      	add	sl, r3
 800c69a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c69e:	f000 f9c7 	bl	800ca30 <__hi0bits>
 800c6a2:	f1c6 0620 	rsb	r6, r6, #32
 800c6a6:	42b0      	cmp	r0, r6
 800c6a8:	dbe7      	blt.n	800c67a <__gethex+0x412>
 800c6aa:	e7f0      	b.n	800c68e <__gethex+0x426>

0800c6ac <L_shift>:
 800c6ac:	f1c2 0208 	rsb	r2, r2, #8
 800c6b0:	0092      	lsls	r2, r2, #2
 800c6b2:	b570      	push	{r4, r5, r6, lr}
 800c6b4:	f1c2 0620 	rsb	r6, r2, #32
 800c6b8:	6843      	ldr	r3, [r0, #4]
 800c6ba:	6804      	ldr	r4, [r0, #0]
 800c6bc:	fa03 f506 	lsl.w	r5, r3, r6
 800c6c0:	432c      	orrs	r4, r5
 800c6c2:	40d3      	lsrs	r3, r2
 800c6c4:	6004      	str	r4, [r0, #0]
 800c6c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c6ca:	4288      	cmp	r0, r1
 800c6cc:	d3f4      	bcc.n	800c6b8 <L_shift+0xc>
 800c6ce:	bd70      	pop	{r4, r5, r6, pc}

0800c6d0 <__match>:
 800c6d0:	b530      	push	{r4, r5, lr}
 800c6d2:	6803      	ldr	r3, [r0, #0]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6da:	b914      	cbnz	r4, 800c6e2 <__match+0x12>
 800c6dc:	6003      	str	r3, [r0, #0]
 800c6de:	2001      	movs	r0, #1
 800c6e0:	bd30      	pop	{r4, r5, pc}
 800c6e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c6ea:	2d19      	cmp	r5, #25
 800c6ec:	bf98      	it	ls
 800c6ee:	3220      	addls	r2, #32
 800c6f0:	42a2      	cmp	r2, r4
 800c6f2:	d0f0      	beq.n	800c6d6 <__match+0x6>
 800c6f4:	2000      	movs	r0, #0
 800c6f6:	e7f3      	b.n	800c6e0 <__match+0x10>

0800c6f8 <__hexnan>:
 800c6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6fc:	2500      	movs	r5, #0
 800c6fe:	680b      	ldr	r3, [r1, #0]
 800c700:	4682      	mov	sl, r0
 800c702:	115f      	asrs	r7, r3, #5
 800c704:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c708:	f013 031f 	ands.w	r3, r3, #31
 800c70c:	bf18      	it	ne
 800c70e:	3704      	addne	r7, #4
 800c710:	1f3e      	subs	r6, r7, #4
 800c712:	4690      	mov	r8, r2
 800c714:	46b1      	mov	r9, r6
 800c716:	4634      	mov	r4, r6
 800c718:	46ab      	mov	fp, r5
 800c71a:	b087      	sub	sp, #28
 800c71c:	6801      	ldr	r1, [r0, #0]
 800c71e:	9301      	str	r3, [sp, #4]
 800c720:	f847 5c04 	str.w	r5, [r7, #-4]
 800c724:	9502      	str	r5, [sp, #8]
 800c726:	784a      	ldrb	r2, [r1, #1]
 800c728:	1c4b      	adds	r3, r1, #1
 800c72a:	9303      	str	r3, [sp, #12]
 800c72c:	b342      	cbz	r2, 800c780 <__hexnan+0x88>
 800c72e:	4610      	mov	r0, r2
 800c730:	9105      	str	r1, [sp, #20]
 800c732:	9204      	str	r2, [sp, #16]
 800c734:	f7ff fd83 	bl	800c23e <__hexdig_fun>
 800c738:	2800      	cmp	r0, #0
 800c73a:	d143      	bne.n	800c7c4 <__hexnan+0xcc>
 800c73c:	9a04      	ldr	r2, [sp, #16]
 800c73e:	9905      	ldr	r1, [sp, #20]
 800c740:	2a20      	cmp	r2, #32
 800c742:	d818      	bhi.n	800c776 <__hexnan+0x7e>
 800c744:	9b02      	ldr	r3, [sp, #8]
 800c746:	459b      	cmp	fp, r3
 800c748:	dd13      	ble.n	800c772 <__hexnan+0x7a>
 800c74a:	454c      	cmp	r4, r9
 800c74c:	d206      	bcs.n	800c75c <__hexnan+0x64>
 800c74e:	2d07      	cmp	r5, #7
 800c750:	dc04      	bgt.n	800c75c <__hexnan+0x64>
 800c752:	462a      	mov	r2, r5
 800c754:	4649      	mov	r1, r9
 800c756:	4620      	mov	r0, r4
 800c758:	f7ff ffa8 	bl	800c6ac <L_shift>
 800c75c:	4544      	cmp	r4, r8
 800c75e:	d944      	bls.n	800c7ea <__hexnan+0xf2>
 800c760:	2300      	movs	r3, #0
 800c762:	f1a4 0904 	sub.w	r9, r4, #4
 800c766:	f844 3c04 	str.w	r3, [r4, #-4]
 800c76a:	461d      	mov	r5, r3
 800c76c:	464c      	mov	r4, r9
 800c76e:	f8cd b008 	str.w	fp, [sp, #8]
 800c772:	9903      	ldr	r1, [sp, #12]
 800c774:	e7d7      	b.n	800c726 <__hexnan+0x2e>
 800c776:	2a29      	cmp	r2, #41	; 0x29
 800c778:	d14a      	bne.n	800c810 <__hexnan+0x118>
 800c77a:	3102      	adds	r1, #2
 800c77c:	f8ca 1000 	str.w	r1, [sl]
 800c780:	f1bb 0f00 	cmp.w	fp, #0
 800c784:	d044      	beq.n	800c810 <__hexnan+0x118>
 800c786:	454c      	cmp	r4, r9
 800c788:	d206      	bcs.n	800c798 <__hexnan+0xa0>
 800c78a:	2d07      	cmp	r5, #7
 800c78c:	dc04      	bgt.n	800c798 <__hexnan+0xa0>
 800c78e:	462a      	mov	r2, r5
 800c790:	4649      	mov	r1, r9
 800c792:	4620      	mov	r0, r4
 800c794:	f7ff ff8a 	bl	800c6ac <L_shift>
 800c798:	4544      	cmp	r4, r8
 800c79a:	d928      	bls.n	800c7ee <__hexnan+0xf6>
 800c79c:	4643      	mov	r3, r8
 800c79e:	f854 2b04 	ldr.w	r2, [r4], #4
 800c7a2:	42a6      	cmp	r6, r4
 800c7a4:	f843 2b04 	str.w	r2, [r3], #4
 800c7a8:	d2f9      	bcs.n	800c79e <__hexnan+0xa6>
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f843 2b04 	str.w	r2, [r3], #4
 800c7b0:	429e      	cmp	r6, r3
 800c7b2:	d2fb      	bcs.n	800c7ac <__hexnan+0xb4>
 800c7b4:	6833      	ldr	r3, [r6, #0]
 800c7b6:	b91b      	cbnz	r3, 800c7c0 <__hexnan+0xc8>
 800c7b8:	4546      	cmp	r6, r8
 800c7ba:	d127      	bne.n	800c80c <__hexnan+0x114>
 800c7bc:	2301      	movs	r3, #1
 800c7be:	6033      	str	r3, [r6, #0]
 800c7c0:	2005      	movs	r0, #5
 800c7c2:	e026      	b.n	800c812 <__hexnan+0x11a>
 800c7c4:	3501      	adds	r5, #1
 800c7c6:	2d08      	cmp	r5, #8
 800c7c8:	f10b 0b01 	add.w	fp, fp, #1
 800c7cc:	dd06      	ble.n	800c7dc <__hexnan+0xe4>
 800c7ce:	4544      	cmp	r4, r8
 800c7d0:	d9cf      	bls.n	800c772 <__hexnan+0x7a>
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	2501      	movs	r5, #1
 800c7d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c7da:	3c04      	subs	r4, #4
 800c7dc:	6822      	ldr	r2, [r4, #0]
 800c7de:	f000 000f 	and.w	r0, r0, #15
 800c7e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c7e6:	6020      	str	r0, [r4, #0]
 800c7e8:	e7c3      	b.n	800c772 <__hexnan+0x7a>
 800c7ea:	2508      	movs	r5, #8
 800c7ec:	e7c1      	b.n	800c772 <__hexnan+0x7a>
 800c7ee:	9b01      	ldr	r3, [sp, #4]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d0df      	beq.n	800c7b4 <__hexnan+0xbc>
 800c7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7f8:	f1c3 0320 	rsb	r3, r3, #32
 800c7fc:	fa22 f303 	lsr.w	r3, r2, r3
 800c800:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c804:	401a      	ands	r2, r3
 800c806:	f847 2c04 	str.w	r2, [r7, #-4]
 800c80a:	e7d3      	b.n	800c7b4 <__hexnan+0xbc>
 800c80c:	3e04      	subs	r6, #4
 800c80e:	e7d1      	b.n	800c7b4 <__hexnan+0xbc>
 800c810:	2004      	movs	r0, #4
 800c812:	b007      	add	sp, #28
 800c814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c818 <__locale_ctype_ptr_l>:
 800c818:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c81c:	4770      	bx	lr

0800c81e <__localeconv_l>:
 800c81e:	30f0      	adds	r0, #240	; 0xf0
 800c820:	4770      	bx	lr
	...

0800c824 <_localeconv_r>:
 800c824:	4b04      	ldr	r3, [pc, #16]	; (800c838 <_localeconv_r+0x14>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	6a18      	ldr	r0, [r3, #32]
 800c82a:	4b04      	ldr	r3, [pc, #16]	; (800c83c <_localeconv_r+0x18>)
 800c82c:	2800      	cmp	r0, #0
 800c82e:	bf08      	it	eq
 800c830:	4618      	moveq	r0, r3
 800c832:	30f0      	adds	r0, #240	; 0xf0
 800c834:	4770      	bx	lr
 800c836:	bf00      	nop
 800c838:	2000018c 	.word	0x2000018c
 800c83c:	200001f0 	.word	0x200001f0

0800c840 <_lseek_r>:
 800c840:	b538      	push	{r3, r4, r5, lr}
 800c842:	4605      	mov	r5, r0
 800c844:	4608      	mov	r0, r1
 800c846:	4611      	mov	r1, r2
 800c848:	2200      	movs	r2, #0
 800c84a:	4c05      	ldr	r4, [pc, #20]	; (800c860 <_lseek_r+0x20>)
 800c84c:	6022      	str	r2, [r4, #0]
 800c84e:	461a      	mov	r2, r3
 800c850:	f001 f898 	bl	800d984 <_lseek>
 800c854:	1c43      	adds	r3, r0, #1
 800c856:	d102      	bne.n	800c85e <_lseek_r+0x1e>
 800c858:	6823      	ldr	r3, [r4, #0]
 800c85a:	b103      	cbz	r3, 800c85e <_lseek_r+0x1e>
 800c85c:	602b      	str	r3, [r5, #0]
 800c85e:	bd38      	pop	{r3, r4, r5, pc}
 800c860:	2000181c 	.word	0x2000181c

0800c864 <__ascii_mbtowc>:
 800c864:	b082      	sub	sp, #8
 800c866:	b901      	cbnz	r1, 800c86a <__ascii_mbtowc+0x6>
 800c868:	a901      	add	r1, sp, #4
 800c86a:	b142      	cbz	r2, 800c87e <__ascii_mbtowc+0x1a>
 800c86c:	b14b      	cbz	r3, 800c882 <__ascii_mbtowc+0x1e>
 800c86e:	7813      	ldrb	r3, [r2, #0]
 800c870:	600b      	str	r3, [r1, #0]
 800c872:	7812      	ldrb	r2, [r2, #0]
 800c874:	1c10      	adds	r0, r2, #0
 800c876:	bf18      	it	ne
 800c878:	2001      	movne	r0, #1
 800c87a:	b002      	add	sp, #8
 800c87c:	4770      	bx	lr
 800c87e:	4610      	mov	r0, r2
 800c880:	e7fb      	b.n	800c87a <__ascii_mbtowc+0x16>
 800c882:	f06f 0001 	mvn.w	r0, #1
 800c886:	e7f8      	b.n	800c87a <__ascii_mbtowc+0x16>

0800c888 <memchr>:
 800c888:	b510      	push	{r4, lr}
 800c88a:	b2c9      	uxtb	r1, r1
 800c88c:	4402      	add	r2, r0
 800c88e:	4290      	cmp	r0, r2
 800c890:	4603      	mov	r3, r0
 800c892:	d101      	bne.n	800c898 <memchr+0x10>
 800c894:	2300      	movs	r3, #0
 800c896:	e003      	b.n	800c8a0 <memchr+0x18>
 800c898:	781c      	ldrb	r4, [r3, #0]
 800c89a:	3001      	adds	r0, #1
 800c89c:	428c      	cmp	r4, r1
 800c89e:	d1f6      	bne.n	800c88e <memchr+0x6>
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	bd10      	pop	{r4, pc}

0800c8a4 <__malloc_lock>:
 800c8a4:	4770      	bx	lr

0800c8a6 <__malloc_unlock>:
 800c8a6:	4770      	bx	lr

0800c8a8 <_Balloc>:
 800c8a8:	b570      	push	{r4, r5, r6, lr}
 800c8aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c8ac:	4604      	mov	r4, r0
 800c8ae:	460e      	mov	r6, r1
 800c8b0:	b93d      	cbnz	r5, 800c8c2 <_Balloc+0x1a>
 800c8b2:	2010      	movs	r0, #16
 800c8b4:	f7fc febe 	bl	8009634 <malloc>
 800c8b8:	6260      	str	r0, [r4, #36]	; 0x24
 800c8ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c8be:	6005      	str	r5, [r0, #0]
 800c8c0:	60c5      	str	r5, [r0, #12]
 800c8c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c8c4:	68eb      	ldr	r3, [r5, #12]
 800c8c6:	b183      	cbz	r3, 800c8ea <_Balloc+0x42>
 800c8c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c8d0:	b9b8      	cbnz	r0, 800c902 <_Balloc+0x5a>
 800c8d2:	2101      	movs	r1, #1
 800c8d4:	fa01 f506 	lsl.w	r5, r1, r6
 800c8d8:	1d6a      	adds	r2, r5, #5
 800c8da:	0092      	lsls	r2, r2, #2
 800c8dc:	4620      	mov	r0, r4
 800c8de:	f000 fbdb 	bl	800d098 <_calloc_r>
 800c8e2:	b160      	cbz	r0, 800c8fe <_Balloc+0x56>
 800c8e4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c8e8:	e00e      	b.n	800c908 <_Balloc+0x60>
 800c8ea:	2221      	movs	r2, #33	; 0x21
 800c8ec:	2104      	movs	r1, #4
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	f000 fbd2 	bl	800d098 <_calloc_r>
 800c8f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8f6:	60e8      	str	r0, [r5, #12]
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1e4      	bne.n	800c8c8 <_Balloc+0x20>
 800c8fe:	2000      	movs	r0, #0
 800c900:	bd70      	pop	{r4, r5, r6, pc}
 800c902:	6802      	ldr	r2, [r0, #0]
 800c904:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c908:	2300      	movs	r3, #0
 800c90a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c90e:	e7f7      	b.n	800c900 <_Balloc+0x58>

0800c910 <_Bfree>:
 800c910:	b570      	push	{r4, r5, r6, lr}
 800c912:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c914:	4606      	mov	r6, r0
 800c916:	460d      	mov	r5, r1
 800c918:	b93c      	cbnz	r4, 800c92a <_Bfree+0x1a>
 800c91a:	2010      	movs	r0, #16
 800c91c:	f7fc fe8a 	bl	8009634 <malloc>
 800c920:	6270      	str	r0, [r6, #36]	; 0x24
 800c922:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c926:	6004      	str	r4, [r0, #0]
 800c928:	60c4      	str	r4, [r0, #12]
 800c92a:	b13d      	cbz	r5, 800c93c <_Bfree+0x2c>
 800c92c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c92e:	686a      	ldr	r2, [r5, #4]
 800c930:	68db      	ldr	r3, [r3, #12]
 800c932:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c936:	6029      	str	r1, [r5, #0]
 800c938:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c93c:	bd70      	pop	{r4, r5, r6, pc}

0800c93e <__multadd>:
 800c93e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c942:	461f      	mov	r7, r3
 800c944:	4606      	mov	r6, r0
 800c946:	460c      	mov	r4, r1
 800c948:	2300      	movs	r3, #0
 800c94a:	690d      	ldr	r5, [r1, #16]
 800c94c:	f101 0c14 	add.w	ip, r1, #20
 800c950:	f8dc 0000 	ldr.w	r0, [ip]
 800c954:	3301      	adds	r3, #1
 800c956:	b281      	uxth	r1, r0
 800c958:	fb02 7101 	mla	r1, r2, r1, r7
 800c95c:	0c00      	lsrs	r0, r0, #16
 800c95e:	0c0f      	lsrs	r7, r1, #16
 800c960:	fb02 7000 	mla	r0, r2, r0, r7
 800c964:	b289      	uxth	r1, r1
 800c966:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c96a:	429d      	cmp	r5, r3
 800c96c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c970:	f84c 1b04 	str.w	r1, [ip], #4
 800c974:	dcec      	bgt.n	800c950 <__multadd+0x12>
 800c976:	b1d7      	cbz	r7, 800c9ae <__multadd+0x70>
 800c978:	68a3      	ldr	r3, [r4, #8]
 800c97a:	42ab      	cmp	r3, r5
 800c97c:	dc12      	bgt.n	800c9a4 <__multadd+0x66>
 800c97e:	6861      	ldr	r1, [r4, #4]
 800c980:	4630      	mov	r0, r6
 800c982:	3101      	adds	r1, #1
 800c984:	f7ff ff90 	bl	800c8a8 <_Balloc>
 800c988:	4680      	mov	r8, r0
 800c98a:	6922      	ldr	r2, [r4, #16]
 800c98c:	f104 010c 	add.w	r1, r4, #12
 800c990:	3202      	adds	r2, #2
 800c992:	0092      	lsls	r2, r2, #2
 800c994:	300c      	adds	r0, #12
 800c996:	f7fc fe5d 	bl	8009654 <memcpy>
 800c99a:	4621      	mov	r1, r4
 800c99c:	4630      	mov	r0, r6
 800c99e:	f7ff ffb7 	bl	800c910 <_Bfree>
 800c9a2:	4644      	mov	r4, r8
 800c9a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c9a8:	3501      	adds	r5, #1
 800c9aa:	615f      	str	r7, [r3, #20]
 800c9ac:	6125      	str	r5, [r4, #16]
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c9b4 <__s2b>:
 800c9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9b8:	4615      	mov	r5, r2
 800c9ba:	2209      	movs	r2, #9
 800c9bc:	461f      	mov	r7, r3
 800c9be:	3308      	adds	r3, #8
 800c9c0:	460c      	mov	r4, r1
 800c9c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9c6:	4606      	mov	r6, r0
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	db20      	blt.n	800ca12 <__s2b+0x5e>
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	f7ff ff69 	bl	800c8a8 <_Balloc>
 800c9d6:	9b08      	ldr	r3, [sp, #32]
 800c9d8:	2d09      	cmp	r5, #9
 800c9da:	6143      	str	r3, [r0, #20]
 800c9dc:	f04f 0301 	mov.w	r3, #1
 800c9e0:	6103      	str	r3, [r0, #16]
 800c9e2:	dd19      	ble.n	800ca18 <__s2b+0x64>
 800c9e4:	f104 0809 	add.w	r8, r4, #9
 800c9e8:	46c1      	mov	r9, r8
 800c9ea:	442c      	add	r4, r5
 800c9ec:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c9f0:	4601      	mov	r1, r0
 800c9f2:	3b30      	subs	r3, #48	; 0x30
 800c9f4:	220a      	movs	r2, #10
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	f7ff ffa1 	bl	800c93e <__multadd>
 800c9fc:	45a1      	cmp	r9, r4
 800c9fe:	d1f5      	bne.n	800c9ec <__s2b+0x38>
 800ca00:	eb08 0405 	add.w	r4, r8, r5
 800ca04:	3c08      	subs	r4, #8
 800ca06:	1b2d      	subs	r5, r5, r4
 800ca08:	1963      	adds	r3, r4, r5
 800ca0a:	42bb      	cmp	r3, r7
 800ca0c:	db07      	blt.n	800ca1e <__s2b+0x6a>
 800ca0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca12:	0052      	lsls	r2, r2, #1
 800ca14:	3101      	adds	r1, #1
 800ca16:	e7d9      	b.n	800c9cc <__s2b+0x18>
 800ca18:	340a      	adds	r4, #10
 800ca1a:	2509      	movs	r5, #9
 800ca1c:	e7f3      	b.n	800ca06 <__s2b+0x52>
 800ca1e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ca22:	4601      	mov	r1, r0
 800ca24:	3b30      	subs	r3, #48	; 0x30
 800ca26:	220a      	movs	r2, #10
 800ca28:	4630      	mov	r0, r6
 800ca2a:	f7ff ff88 	bl	800c93e <__multadd>
 800ca2e:	e7eb      	b.n	800ca08 <__s2b+0x54>

0800ca30 <__hi0bits>:
 800ca30:	0c02      	lsrs	r2, r0, #16
 800ca32:	0412      	lsls	r2, r2, #16
 800ca34:	4603      	mov	r3, r0
 800ca36:	b9b2      	cbnz	r2, 800ca66 <__hi0bits+0x36>
 800ca38:	0403      	lsls	r3, r0, #16
 800ca3a:	2010      	movs	r0, #16
 800ca3c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ca40:	bf04      	itt	eq
 800ca42:	021b      	lsleq	r3, r3, #8
 800ca44:	3008      	addeq	r0, #8
 800ca46:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ca4a:	bf04      	itt	eq
 800ca4c:	011b      	lsleq	r3, r3, #4
 800ca4e:	3004      	addeq	r0, #4
 800ca50:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ca54:	bf04      	itt	eq
 800ca56:	009b      	lsleq	r3, r3, #2
 800ca58:	3002      	addeq	r0, #2
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	db06      	blt.n	800ca6c <__hi0bits+0x3c>
 800ca5e:	005b      	lsls	r3, r3, #1
 800ca60:	d503      	bpl.n	800ca6a <__hi0bits+0x3a>
 800ca62:	3001      	adds	r0, #1
 800ca64:	4770      	bx	lr
 800ca66:	2000      	movs	r0, #0
 800ca68:	e7e8      	b.n	800ca3c <__hi0bits+0xc>
 800ca6a:	2020      	movs	r0, #32
 800ca6c:	4770      	bx	lr

0800ca6e <__lo0bits>:
 800ca6e:	6803      	ldr	r3, [r0, #0]
 800ca70:	4601      	mov	r1, r0
 800ca72:	f013 0207 	ands.w	r2, r3, #7
 800ca76:	d00b      	beq.n	800ca90 <__lo0bits+0x22>
 800ca78:	07da      	lsls	r2, r3, #31
 800ca7a:	d423      	bmi.n	800cac4 <__lo0bits+0x56>
 800ca7c:	0798      	lsls	r0, r3, #30
 800ca7e:	bf49      	itett	mi
 800ca80:	085b      	lsrmi	r3, r3, #1
 800ca82:	089b      	lsrpl	r3, r3, #2
 800ca84:	2001      	movmi	r0, #1
 800ca86:	600b      	strmi	r3, [r1, #0]
 800ca88:	bf5c      	itt	pl
 800ca8a:	600b      	strpl	r3, [r1, #0]
 800ca8c:	2002      	movpl	r0, #2
 800ca8e:	4770      	bx	lr
 800ca90:	b298      	uxth	r0, r3
 800ca92:	b9a8      	cbnz	r0, 800cac0 <__lo0bits+0x52>
 800ca94:	2010      	movs	r0, #16
 800ca96:	0c1b      	lsrs	r3, r3, #16
 800ca98:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ca9c:	bf04      	itt	eq
 800ca9e:	0a1b      	lsreq	r3, r3, #8
 800caa0:	3008      	addeq	r0, #8
 800caa2:	071a      	lsls	r2, r3, #28
 800caa4:	bf04      	itt	eq
 800caa6:	091b      	lsreq	r3, r3, #4
 800caa8:	3004      	addeq	r0, #4
 800caaa:	079a      	lsls	r2, r3, #30
 800caac:	bf04      	itt	eq
 800caae:	089b      	lsreq	r3, r3, #2
 800cab0:	3002      	addeq	r0, #2
 800cab2:	07da      	lsls	r2, r3, #31
 800cab4:	d402      	bmi.n	800cabc <__lo0bits+0x4e>
 800cab6:	085b      	lsrs	r3, r3, #1
 800cab8:	d006      	beq.n	800cac8 <__lo0bits+0x5a>
 800caba:	3001      	adds	r0, #1
 800cabc:	600b      	str	r3, [r1, #0]
 800cabe:	4770      	bx	lr
 800cac0:	4610      	mov	r0, r2
 800cac2:	e7e9      	b.n	800ca98 <__lo0bits+0x2a>
 800cac4:	2000      	movs	r0, #0
 800cac6:	4770      	bx	lr
 800cac8:	2020      	movs	r0, #32
 800caca:	4770      	bx	lr

0800cacc <__i2b>:
 800cacc:	b510      	push	{r4, lr}
 800cace:	460c      	mov	r4, r1
 800cad0:	2101      	movs	r1, #1
 800cad2:	f7ff fee9 	bl	800c8a8 <_Balloc>
 800cad6:	2201      	movs	r2, #1
 800cad8:	6144      	str	r4, [r0, #20]
 800cada:	6102      	str	r2, [r0, #16]
 800cadc:	bd10      	pop	{r4, pc}

0800cade <__multiply>:
 800cade:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae2:	4614      	mov	r4, r2
 800cae4:	690a      	ldr	r2, [r1, #16]
 800cae6:	6923      	ldr	r3, [r4, #16]
 800cae8:	4688      	mov	r8, r1
 800caea:	429a      	cmp	r2, r3
 800caec:	bfbe      	ittt	lt
 800caee:	460b      	movlt	r3, r1
 800caf0:	46a0      	movlt	r8, r4
 800caf2:	461c      	movlt	r4, r3
 800caf4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800caf8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cafc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cb04:	eb07 0609 	add.w	r6, r7, r9
 800cb08:	42b3      	cmp	r3, r6
 800cb0a:	bfb8      	it	lt
 800cb0c:	3101      	addlt	r1, #1
 800cb0e:	f7ff fecb 	bl	800c8a8 <_Balloc>
 800cb12:	f100 0514 	add.w	r5, r0, #20
 800cb16:	462b      	mov	r3, r5
 800cb18:	2200      	movs	r2, #0
 800cb1a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800cb1e:	4573      	cmp	r3, lr
 800cb20:	d316      	bcc.n	800cb50 <__multiply+0x72>
 800cb22:	f104 0214 	add.w	r2, r4, #20
 800cb26:	f108 0114 	add.w	r1, r8, #20
 800cb2a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800cb2e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	9b00      	ldr	r3, [sp, #0]
 800cb36:	9201      	str	r2, [sp, #4]
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d80c      	bhi.n	800cb56 <__multiply+0x78>
 800cb3c:	2e00      	cmp	r6, #0
 800cb3e:	dd03      	ble.n	800cb48 <__multiply+0x6a>
 800cb40:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d05d      	beq.n	800cc04 <__multiply+0x126>
 800cb48:	6106      	str	r6, [r0, #16]
 800cb4a:	b003      	add	sp, #12
 800cb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb50:	f843 2b04 	str.w	r2, [r3], #4
 800cb54:	e7e3      	b.n	800cb1e <__multiply+0x40>
 800cb56:	f8b2 b000 	ldrh.w	fp, [r2]
 800cb5a:	f1bb 0f00 	cmp.w	fp, #0
 800cb5e:	d023      	beq.n	800cba8 <__multiply+0xca>
 800cb60:	4689      	mov	r9, r1
 800cb62:	46ac      	mov	ip, r5
 800cb64:	f04f 0800 	mov.w	r8, #0
 800cb68:	f859 4b04 	ldr.w	r4, [r9], #4
 800cb6c:	f8dc a000 	ldr.w	sl, [ip]
 800cb70:	b2a3      	uxth	r3, r4
 800cb72:	fa1f fa8a 	uxth.w	sl, sl
 800cb76:	fb0b a303 	mla	r3, fp, r3, sl
 800cb7a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cb7e:	f8dc 4000 	ldr.w	r4, [ip]
 800cb82:	4443      	add	r3, r8
 800cb84:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cb88:	fb0b 840a 	mla	r4, fp, sl, r8
 800cb8c:	46e2      	mov	sl, ip
 800cb8e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cb98:	454f      	cmp	r7, r9
 800cb9a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cb9e:	f84a 3b04 	str.w	r3, [sl], #4
 800cba2:	d82b      	bhi.n	800cbfc <__multiply+0x11e>
 800cba4:	f8cc 8004 	str.w	r8, [ip, #4]
 800cba8:	9b01      	ldr	r3, [sp, #4]
 800cbaa:	3204      	adds	r2, #4
 800cbac:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cbb0:	f1ba 0f00 	cmp.w	sl, #0
 800cbb4:	d020      	beq.n	800cbf8 <__multiply+0x11a>
 800cbb6:	4689      	mov	r9, r1
 800cbb8:	46a8      	mov	r8, r5
 800cbba:	f04f 0b00 	mov.w	fp, #0
 800cbbe:	682b      	ldr	r3, [r5, #0]
 800cbc0:	f8b9 c000 	ldrh.w	ip, [r9]
 800cbc4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	fb0a 440c 	mla	r4, sl, ip, r4
 800cbce:	46c4      	mov	ip, r8
 800cbd0:	445c      	add	r4, fp
 800cbd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cbd6:	f84c 3b04 	str.w	r3, [ip], #4
 800cbda:	f859 3b04 	ldr.w	r3, [r9], #4
 800cbde:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cbe2:	0c1b      	lsrs	r3, r3, #16
 800cbe4:	fb0a b303 	mla	r3, sl, r3, fp
 800cbe8:	454f      	cmp	r7, r9
 800cbea:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cbee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cbf2:	d805      	bhi.n	800cc00 <__multiply+0x122>
 800cbf4:	f8c8 3004 	str.w	r3, [r8, #4]
 800cbf8:	3504      	adds	r5, #4
 800cbfa:	e79b      	b.n	800cb34 <__multiply+0x56>
 800cbfc:	46d4      	mov	ip, sl
 800cbfe:	e7b3      	b.n	800cb68 <__multiply+0x8a>
 800cc00:	46e0      	mov	r8, ip
 800cc02:	e7dd      	b.n	800cbc0 <__multiply+0xe2>
 800cc04:	3e01      	subs	r6, #1
 800cc06:	e799      	b.n	800cb3c <__multiply+0x5e>

0800cc08 <__pow5mult>:
 800cc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc0c:	4615      	mov	r5, r2
 800cc0e:	f012 0203 	ands.w	r2, r2, #3
 800cc12:	4606      	mov	r6, r0
 800cc14:	460f      	mov	r7, r1
 800cc16:	d007      	beq.n	800cc28 <__pow5mult+0x20>
 800cc18:	4c21      	ldr	r4, [pc, #132]	; (800cca0 <__pow5mult+0x98>)
 800cc1a:	3a01      	subs	r2, #1
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc22:	f7ff fe8c 	bl	800c93e <__multadd>
 800cc26:	4607      	mov	r7, r0
 800cc28:	10ad      	asrs	r5, r5, #2
 800cc2a:	d035      	beq.n	800cc98 <__pow5mult+0x90>
 800cc2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cc2e:	b93c      	cbnz	r4, 800cc40 <__pow5mult+0x38>
 800cc30:	2010      	movs	r0, #16
 800cc32:	f7fc fcff 	bl	8009634 <malloc>
 800cc36:	6270      	str	r0, [r6, #36]	; 0x24
 800cc38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc3c:	6004      	str	r4, [r0, #0]
 800cc3e:	60c4      	str	r4, [r0, #12]
 800cc40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cc44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc48:	b94c      	cbnz	r4, 800cc5e <__pow5mult+0x56>
 800cc4a:	f240 2171 	movw	r1, #625	; 0x271
 800cc4e:	4630      	mov	r0, r6
 800cc50:	f7ff ff3c 	bl	800cacc <__i2b>
 800cc54:	2300      	movs	r3, #0
 800cc56:	4604      	mov	r4, r0
 800cc58:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc5c:	6003      	str	r3, [r0, #0]
 800cc5e:	f04f 0800 	mov.w	r8, #0
 800cc62:	07eb      	lsls	r3, r5, #31
 800cc64:	d50a      	bpl.n	800cc7c <__pow5mult+0x74>
 800cc66:	4639      	mov	r1, r7
 800cc68:	4622      	mov	r2, r4
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	f7ff ff37 	bl	800cade <__multiply>
 800cc70:	4681      	mov	r9, r0
 800cc72:	4639      	mov	r1, r7
 800cc74:	4630      	mov	r0, r6
 800cc76:	f7ff fe4b 	bl	800c910 <_Bfree>
 800cc7a:	464f      	mov	r7, r9
 800cc7c:	106d      	asrs	r5, r5, #1
 800cc7e:	d00b      	beq.n	800cc98 <__pow5mult+0x90>
 800cc80:	6820      	ldr	r0, [r4, #0]
 800cc82:	b938      	cbnz	r0, 800cc94 <__pow5mult+0x8c>
 800cc84:	4622      	mov	r2, r4
 800cc86:	4621      	mov	r1, r4
 800cc88:	4630      	mov	r0, r6
 800cc8a:	f7ff ff28 	bl	800cade <__multiply>
 800cc8e:	6020      	str	r0, [r4, #0]
 800cc90:	f8c0 8000 	str.w	r8, [r0]
 800cc94:	4604      	mov	r4, r0
 800cc96:	e7e4      	b.n	800cc62 <__pow5mult+0x5a>
 800cc98:	4638      	mov	r0, r7
 800cc9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc9e:	bf00      	nop
 800cca0:	0800dd10 	.word	0x0800dd10

0800cca4 <__lshift>:
 800cca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cca8:	460c      	mov	r4, r1
 800ccaa:	4607      	mov	r7, r0
 800ccac:	4616      	mov	r6, r2
 800ccae:	6923      	ldr	r3, [r4, #16]
 800ccb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ccb4:	eb0a 0903 	add.w	r9, sl, r3
 800ccb8:	6849      	ldr	r1, [r1, #4]
 800ccba:	68a3      	ldr	r3, [r4, #8]
 800ccbc:	f109 0501 	add.w	r5, r9, #1
 800ccc0:	42ab      	cmp	r3, r5
 800ccc2:	db32      	blt.n	800cd2a <__lshift+0x86>
 800ccc4:	4638      	mov	r0, r7
 800ccc6:	f7ff fdef 	bl	800c8a8 <_Balloc>
 800ccca:	2300      	movs	r3, #0
 800cccc:	4680      	mov	r8, r0
 800ccce:	461a      	mov	r2, r3
 800ccd0:	f100 0114 	add.w	r1, r0, #20
 800ccd4:	4553      	cmp	r3, sl
 800ccd6:	db2b      	blt.n	800cd30 <__lshift+0x8c>
 800ccd8:	6920      	ldr	r0, [r4, #16]
 800ccda:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ccde:	f104 0314 	add.w	r3, r4, #20
 800cce2:	f016 021f 	ands.w	r2, r6, #31
 800cce6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ccea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ccee:	d025      	beq.n	800cd3c <__lshift+0x98>
 800ccf0:	2000      	movs	r0, #0
 800ccf2:	f1c2 0e20 	rsb	lr, r2, #32
 800ccf6:	468a      	mov	sl, r1
 800ccf8:	681e      	ldr	r6, [r3, #0]
 800ccfa:	4096      	lsls	r6, r2
 800ccfc:	4330      	orrs	r0, r6
 800ccfe:	f84a 0b04 	str.w	r0, [sl], #4
 800cd02:	f853 0b04 	ldr.w	r0, [r3], #4
 800cd06:	459c      	cmp	ip, r3
 800cd08:	fa20 f00e 	lsr.w	r0, r0, lr
 800cd0c:	d814      	bhi.n	800cd38 <__lshift+0x94>
 800cd0e:	6048      	str	r0, [r1, #4]
 800cd10:	b108      	cbz	r0, 800cd16 <__lshift+0x72>
 800cd12:	f109 0502 	add.w	r5, r9, #2
 800cd16:	3d01      	subs	r5, #1
 800cd18:	4638      	mov	r0, r7
 800cd1a:	f8c8 5010 	str.w	r5, [r8, #16]
 800cd1e:	4621      	mov	r1, r4
 800cd20:	f7ff fdf6 	bl	800c910 <_Bfree>
 800cd24:	4640      	mov	r0, r8
 800cd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd2a:	3101      	adds	r1, #1
 800cd2c:	005b      	lsls	r3, r3, #1
 800cd2e:	e7c7      	b.n	800ccc0 <__lshift+0x1c>
 800cd30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cd34:	3301      	adds	r3, #1
 800cd36:	e7cd      	b.n	800ccd4 <__lshift+0x30>
 800cd38:	4651      	mov	r1, sl
 800cd3a:	e7dc      	b.n	800ccf6 <__lshift+0x52>
 800cd3c:	3904      	subs	r1, #4
 800cd3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd42:	459c      	cmp	ip, r3
 800cd44:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd48:	d8f9      	bhi.n	800cd3e <__lshift+0x9a>
 800cd4a:	e7e4      	b.n	800cd16 <__lshift+0x72>

0800cd4c <__mcmp>:
 800cd4c:	6903      	ldr	r3, [r0, #16]
 800cd4e:	690a      	ldr	r2, [r1, #16]
 800cd50:	b530      	push	{r4, r5, lr}
 800cd52:	1a9b      	subs	r3, r3, r2
 800cd54:	d10c      	bne.n	800cd70 <__mcmp+0x24>
 800cd56:	0092      	lsls	r2, r2, #2
 800cd58:	3014      	adds	r0, #20
 800cd5a:	3114      	adds	r1, #20
 800cd5c:	1884      	adds	r4, r0, r2
 800cd5e:	4411      	add	r1, r2
 800cd60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cd64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cd68:	4295      	cmp	r5, r2
 800cd6a:	d003      	beq.n	800cd74 <__mcmp+0x28>
 800cd6c:	d305      	bcc.n	800cd7a <__mcmp+0x2e>
 800cd6e:	2301      	movs	r3, #1
 800cd70:	4618      	mov	r0, r3
 800cd72:	bd30      	pop	{r4, r5, pc}
 800cd74:	42a0      	cmp	r0, r4
 800cd76:	d3f3      	bcc.n	800cd60 <__mcmp+0x14>
 800cd78:	e7fa      	b.n	800cd70 <__mcmp+0x24>
 800cd7a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd7e:	e7f7      	b.n	800cd70 <__mcmp+0x24>

0800cd80 <__mdiff>:
 800cd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd84:	460d      	mov	r5, r1
 800cd86:	4607      	mov	r7, r0
 800cd88:	4611      	mov	r1, r2
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	4614      	mov	r4, r2
 800cd8e:	f7ff ffdd 	bl	800cd4c <__mcmp>
 800cd92:	1e06      	subs	r6, r0, #0
 800cd94:	d108      	bne.n	800cda8 <__mdiff+0x28>
 800cd96:	4631      	mov	r1, r6
 800cd98:	4638      	mov	r0, r7
 800cd9a:	f7ff fd85 	bl	800c8a8 <_Balloc>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda8:	bfa4      	itt	ge
 800cdaa:	4623      	movge	r3, r4
 800cdac:	462c      	movge	r4, r5
 800cdae:	4638      	mov	r0, r7
 800cdb0:	6861      	ldr	r1, [r4, #4]
 800cdb2:	bfa6      	itte	ge
 800cdb4:	461d      	movge	r5, r3
 800cdb6:	2600      	movge	r6, #0
 800cdb8:	2601      	movlt	r6, #1
 800cdba:	f7ff fd75 	bl	800c8a8 <_Balloc>
 800cdbe:	f04f 0e00 	mov.w	lr, #0
 800cdc2:	60c6      	str	r6, [r0, #12]
 800cdc4:	692b      	ldr	r3, [r5, #16]
 800cdc6:	6926      	ldr	r6, [r4, #16]
 800cdc8:	f104 0214 	add.w	r2, r4, #20
 800cdcc:	f105 0914 	add.w	r9, r5, #20
 800cdd0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cdd4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cdd8:	f100 0114 	add.w	r1, r0, #20
 800cddc:	f852 ab04 	ldr.w	sl, [r2], #4
 800cde0:	f859 5b04 	ldr.w	r5, [r9], #4
 800cde4:	fa1f f38a 	uxth.w	r3, sl
 800cde8:	4473      	add	r3, lr
 800cdea:	b2ac      	uxth	r4, r5
 800cdec:	1b1b      	subs	r3, r3, r4
 800cdee:	0c2c      	lsrs	r4, r5, #16
 800cdf0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800cdf4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800cdfe:	45c8      	cmp	r8, r9
 800ce00:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800ce04:	4694      	mov	ip, r2
 800ce06:	f841 4b04 	str.w	r4, [r1], #4
 800ce0a:	d8e7      	bhi.n	800cddc <__mdiff+0x5c>
 800ce0c:	45bc      	cmp	ip, r7
 800ce0e:	d304      	bcc.n	800ce1a <__mdiff+0x9a>
 800ce10:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ce14:	b183      	cbz	r3, 800ce38 <__mdiff+0xb8>
 800ce16:	6106      	str	r6, [r0, #16]
 800ce18:	e7c4      	b.n	800cda4 <__mdiff+0x24>
 800ce1a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800ce1e:	b2a2      	uxth	r2, r4
 800ce20:	4472      	add	r2, lr
 800ce22:	1413      	asrs	r3, r2, #16
 800ce24:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ce28:	b292      	uxth	r2, r2
 800ce2a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ce2e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ce32:	f841 2b04 	str.w	r2, [r1], #4
 800ce36:	e7e9      	b.n	800ce0c <__mdiff+0x8c>
 800ce38:	3e01      	subs	r6, #1
 800ce3a:	e7e9      	b.n	800ce10 <__mdiff+0x90>

0800ce3c <__ulp>:
 800ce3c:	4b10      	ldr	r3, [pc, #64]	; (800ce80 <__ulp+0x44>)
 800ce3e:	400b      	ands	r3, r1
 800ce40:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	dd02      	ble.n	800ce4e <__ulp+0x12>
 800ce48:	2000      	movs	r0, #0
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	4770      	bx	lr
 800ce4e:	425b      	negs	r3, r3
 800ce50:	151b      	asrs	r3, r3, #20
 800ce52:	2b13      	cmp	r3, #19
 800ce54:	f04f 0000 	mov.w	r0, #0
 800ce58:	f04f 0100 	mov.w	r1, #0
 800ce5c:	dc04      	bgt.n	800ce68 <__ulp+0x2c>
 800ce5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ce62:	fa42 f103 	asr.w	r1, r2, r3
 800ce66:	4770      	bx	lr
 800ce68:	2201      	movs	r2, #1
 800ce6a:	3b14      	subs	r3, #20
 800ce6c:	2b1e      	cmp	r3, #30
 800ce6e:	bfce      	itee	gt
 800ce70:	4613      	movgt	r3, r2
 800ce72:	f1c3 031f 	rsble	r3, r3, #31
 800ce76:	fa02 f303 	lslle.w	r3, r2, r3
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop
 800ce80:	7ff00000 	.word	0x7ff00000

0800ce84 <__b2d>:
 800ce84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce88:	6907      	ldr	r7, [r0, #16]
 800ce8a:	f100 0914 	add.w	r9, r0, #20
 800ce8e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800ce92:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800ce96:	f1a7 0804 	sub.w	r8, r7, #4
 800ce9a:	4630      	mov	r0, r6
 800ce9c:	f7ff fdc8 	bl	800ca30 <__hi0bits>
 800cea0:	f1c0 0320 	rsb	r3, r0, #32
 800cea4:	280a      	cmp	r0, #10
 800cea6:	600b      	str	r3, [r1, #0]
 800cea8:	491e      	ldr	r1, [pc, #120]	; (800cf24 <__b2d+0xa0>)
 800ceaa:	dc17      	bgt.n	800cedc <__b2d+0x58>
 800ceac:	45c1      	cmp	r9, r8
 800ceae:	bf28      	it	cs
 800ceb0:	2200      	movcs	r2, #0
 800ceb2:	f1c0 0c0b 	rsb	ip, r0, #11
 800ceb6:	fa26 f30c 	lsr.w	r3, r6, ip
 800ceba:	bf38      	it	cc
 800cebc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cec0:	ea43 0501 	orr.w	r5, r3, r1
 800cec4:	f100 0315 	add.w	r3, r0, #21
 800cec8:	fa06 f303 	lsl.w	r3, r6, r3
 800cecc:	fa22 f20c 	lsr.w	r2, r2, ip
 800ced0:	ea43 0402 	orr.w	r4, r3, r2
 800ced4:	4620      	mov	r0, r4
 800ced6:	4629      	mov	r1, r5
 800ced8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cedc:	45c1      	cmp	r9, r8
 800cede:	bf3a      	itte	cc
 800cee0:	f1a7 0808 	subcc.w	r8, r7, #8
 800cee4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cee8:	2200      	movcs	r2, #0
 800ceea:	f1b0 030b 	subs.w	r3, r0, #11
 800ceee:	d015      	beq.n	800cf1c <__b2d+0x98>
 800cef0:	409e      	lsls	r6, r3
 800cef2:	f1c3 0720 	rsb	r7, r3, #32
 800cef6:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800cefa:	fa22 f107 	lsr.w	r1, r2, r7
 800cefe:	45c8      	cmp	r8, r9
 800cf00:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800cf04:	ea46 0501 	orr.w	r5, r6, r1
 800cf08:	bf94      	ite	ls
 800cf0a:	2100      	movls	r1, #0
 800cf0c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800cf10:	fa02 f003 	lsl.w	r0, r2, r3
 800cf14:	40f9      	lsrs	r1, r7
 800cf16:	ea40 0401 	orr.w	r4, r0, r1
 800cf1a:	e7db      	b.n	800ced4 <__b2d+0x50>
 800cf1c:	ea46 0501 	orr.w	r5, r6, r1
 800cf20:	4614      	mov	r4, r2
 800cf22:	e7d7      	b.n	800ced4 <__b2d+0x50>
 800cf24:	3ff00000 	.word	0x3ff00000

0800cf28 <__d2b>:
 800cf28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cf2c:	461c      	mov	r4, r3
 800cf2e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800cf32:	2101      	movs	r1, #1
 800cf34:	4690      	mov	r8, r2
 800cf36:	f7ff fcb7 	bl	800c8a8 <_Balloc>
 800cf3a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800cf3e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800cf42:	4607      	mov	r7, r0
 800cf44:	bb34      	cbnz	r4, 800cf94 <__d2b+0x6c>
 800cf46:	9201      	str	r2, [sp, #4]
 800cf48:	f1b8 0200 	subs.w	r2, r8, #0
 800cf4c:	d027      	beq.n	800cf9e <__d2b+0x76>
 800cf4e:	a802      	add	r0, sp, #8
 800cf50:	f840 2d08 	str.w	r2, [r0, #-8]!
 800cf54:	f7ff fd8b 	bl	800ca6e <__lo0bits>
 800cf58:	9900      	ldr	r1, [sp, #0]
 800cf5a:	b1f0      	cbz	r0, 800cf9a <__d2b+0x72>
 800cf5c:	9a01      	ldr	r2, [sp, #4]
 800cf5e:	f1c0 0320 	rsb	r3, r0, #32
 800cf62:	fa02 f303 	lsl.w	r3, r2, r3
 800cf66:	430b      	orrs	r3, r1
 800cf68:	40c2      	lsrs	r2, r0
 800cf6a:	617b      	str	r3, [r7, #20]
 800cf6c:	9201      	str	r2, [sp, #4]
 800cf6e:	9b01      	ldr	r3, [sp, #4]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	bf14      	ite	ne
 800cf74:	2102      	movne	r1, #2
 800cf76:	2101      	moveq	r1, #1
 800cf78:	61bb      	str	r3, [r7, #24]
 800cf7a:	6139      	str	r1, [r7, #16]
 800cf7c:	b1c4      	cbz	r4, 800cfb0 <__d2b+0x88>
 800cf7e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cf82:	4404      	add	r4, r0
 800cf84:	6034      	str	r4, [r6, #0]
 800cf86:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cf8a:	6028      	str	r0, [r5, #0]
 800cf8c:	4638      	mov	r0, r7
 800cf8e:	b002      	add	sp, #8
 800cf90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf94:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cf98:	e7d5      	b.n	800cf46 <__d2b+0x1e>
 800cf9a:	6179      	str	r1, [r7, #20]
 800cf9c:	e7e7      	b.n	800cf6e <__d2b+0x46>
 800cf9e:	a801      	add	r0, sp, #4
 800cfa0:	f7ff fd65 	bl	800ca6e <__lo0bits>
 800cfa4:	2101      	movs	r1, #1
 800cfa6:	9b01      	ldr	r3, [sp, #4]
 800cfa8:	6139      	str	r1, [r7, #16]
 800cfaa:	617b      	str	r3, [r7, #20]
 800cfac:	3020      	adds	r0, #32
 800cfae:	e7e5      	b.n	800cf7c <__d2b+0x54>
 800cfb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cfb4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cfb8:	6030      	str	r0, [r6, #0]
 800cfba:	6918      	ldr	r0, [r3, #16]
 800cfbc:	f7ff fd38 	bl	800ca30 <__hi0bits>
 800cfc0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cfc4:	e7e1      	b.n	800cf8a <__d2b+0x62>

0800cfc6 <__ratio>:
 800cfc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfca:	4688      	mov	r8, r1
 800cfcc:	4669      	mov	r1, sp
 800cfce:	4681      	mov	r9, r0
 800cfd0:	f7ff ff58 	bl	800ce84 <__b2d>
 800cfd4:	468b      	mov	fp, r1
 800cfd6:	4606      	mov	r6, r0
 800cfd8:	460f      	mov	r7, r1
 800cfda:	4640      	mov	r0, r8
 800cfdc:	a901      	add	r1, sp, #4
 800cfde:	f7ff ff51 	bl	800ce84 <__b2d>
 800cfe2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cfe6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cfea:	460d      	mov	r5, r1
 800cfec:	eba3 0c02 	sub.w	ip, r3, r2
 800cff0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cff4:	1a9b      	subs	r3, r3, r2
 800cff6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	bfd5      	itete	le
 800cffe:	460a      	movle	r2, r1
 800d000:	463a      	movgt	r2, r7
 800d002:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d006:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d00a:	bfd8      	it	le
 800d00c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800d010:	462b      	mov	r3, r5
 800d012:	4602      	mov	r2, r0
 800d014:	4659      	mov	r1, fp
 800d016:	4630      	mov	r0, r6
 800d018:	f7f3 fb88 	bl	800072c <__aeabi_ddiv>
 800d01c:	b003      	add	sp, #12
 800d01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d022 <__copybits>:
 800d022:	3901      	subs	r1, #1
 800d024:	b510      	push	{r4, lr}
 800d026:	1149      	asrs	r1, r1, #5
 800d028:	6914      	ldr	r4, [r2, #16]
 800d02a:	3101      	adds	r1, #1
 800d02c:	f102 0314 	add.w	r3, r2, #20
 800d030:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d034:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d038:	42a3      	cmp	r3, r4
 800d03a:	4602      	mov	r2, r0
 800d03c:	d303      	bcc.n	800d046 <__copybits+0x24>
 800d03e:	2300      	movs	r3, #0
 800d040:	428a      	cmp	r2, r1
 800d042:	d305      	bcc.n	800d050 <__copybits+0x2e>
 800d044:	bd10      	pop	{r4, pc}
 800d046:	f853 2b04 	ldr.w	r2, [r3], #4
 800d04a:	f840 2b04 	str.w	r2, [r0], #4
 800d04e:	e7f3      	b.n	800d038 <__copybits+0x16>
 800d050:	f842 3b04 	str.w	r3, [r2], #4
 800d054:	e7f4      	b.n	800d040 <__copybits+0x1e>

0800d056 <__any_on>:
 800d056:	f100 0214 	add.w	r2, r0, #20
 800d05a:	6900      	ldr	r0, [r0, #16]
 800d05c:	114b      	asrs	r3, r1, #5
 800d05e:	4298      	cmp	r0, r3
 800d060:	b510      	push	{r4, lr}
 800d062:	db11      	blt.n	800d088 <__any_on+0x32>
 800d064:	dd0a      	ble.n	800d07c <__any_on+0x26>
 800d066:	f011 011f 	ands.w	r1, r1, #31
 800d06a:	d007      	beq.n	800d07c <__any_on+0x26>
 800d06c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d070:	fa24 f001 	lsr.w	r0, r4, r1
 800d074:	fa00 f101 	lsl.w	r1, r0, r1
 800d078:	428c      	cmp	r4, r1
 800d07a:	d10b      	bne.n	800d094 <__any_on+0x3e>
 800d07c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d080:	4293      	cmp	r3, r2
 800d082:	d803      	bhi.n	800d08c <__any_on+0x36>
 800d084:	2000      	movs	r0, #0
 800d086:	bd10      	pop	{r4, pc}
 800d088:	4603      	mov	r3, r0
 800d08a:	e7f7      	b.n	800d07c <__any_on+0x26>
 800d08c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d090:	2900      	cmp	r1, #0
 800d092:	d0f5      	beq.n	800d080 <__any_on+0x2a>
 800d094:	2001      	movs	r0, #1
 800d096:	e7f6      	b.n	800d086 <__any_on+0x30>

0800d098 <_calloc_r>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	fb02 f401 	mul.w	r4, r2, r1
 800d09e:	4621      	mov	r1, r4
 800d0a0:	f7fc fb38 	bl	8009714 <_malloc_r>
 800d0a4:	4605      	mov	r5, r0
 800d0a6:	b118      	cbz	r0, 800d0b0 <_calloc_r+0x18>
 800d0a8:	4622      	mov	r2, r4
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	f7fc fadd 	bl	800966a <memset>
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	bd38      	pop	{r3, r4, r5, pc}

0800d0b4 <__ssputs_r>:
 800d0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0b8:	688e      	ldr	r6, [r1, #8]
 800d0ba:	4682      	mov	sl, r0
 800d0bc:	429e      	cmp	r6, r3
 800d0be:	460c      	mov	r4, r1
 800d0c0:	4690      	mov	r8, r2
 800d0c2:	4699      	mov	r9, r3
 800d0c4:	d837      	bhi.n	800d136 <__ssputs_r+0x82>
 800d0c6:	898a      	ldrh	r2, [r1, #12]
 800d0c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d0cc:	d031      	beq.n	800d132 <__ssputs_r+0x7e>
 800d0ce:	2302      	movs	r3, #2
 800d0d0:	6825      	ldr	r5, [r4, #0]
 800d0d2:	6909      	ldr	r1, [r1, #16]
 800d0d4:	1a6f      	subs	r7, r5, r1
 800d0d6:	6965      	ldr	r5, [r4, #20]
 800d0d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0dc:	fb95 f5f3 	sdiv	r5, r5, r3
 800d0e0:	f109 0301 	add.w	r3, r9, #1
 800d0e4:	443b      	add	r3, r7
 800d0e6:	429d      	cmp	r5, r3
 800d0e8:	bf38      	it	cc
 800d0ea:	461d      	movcc	r5, r3
 800d0ec:	0553      	lsls	r3, r2, #21
 800d0ee:	d530      	bpl.n	800d152 <__ssputs_r+0x9e>
 800d0f0:	4629      	mov	r1, r5
 800d0f2:	f7fc fb0f 	bl	8009714 <_malloc_r>
 800d0f6:	4606      	mov	r6, r0
 800d0f8:	b950      	cbnz	r0, 800d110 <__ssputs_r+0x5c>
 800d0fa:	230c      	movs	r3, #12
 800d0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d100:	f8ca 3000 	str.w	r3, [sl]
 800d104:	89a3      	ldrh	r3, [r4, #12]
 800d106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d10a:	81a3      	strh	r3, [r4, #12]
 800d10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d110:	463a      	mov	r2, r7
 800d112:	6921      	ldr	r1, [r4, #16]
 800d114:	f7fc fa9e 	bl	8009654 <memcpy>
 800d118:	89a3      	ldrh	r3, [r4, #12]
 800d11a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d11e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d122:	81a3      	strh	r3, [r4, #12]
 800d124:	6126      	str	r6, [r4, #16]
 800d126:	443e      	add	r6, r7
 800d128:	6026      	str	r6, [r4, #0]
 800d12a:	464e      	mov	r6, r9
 800d12c:	6165      	str	r5, [r4, #20]
 800d12e:	1bed      	subs	r5, r5, r7
 800d130:	60a5      	str	r5, [r4, #8]
 800d132:	454e      	cmp	r6, r9
 800d134:	d900      	bls.n	800d138 <__ssputs_r+0x84>
 800d136:	464e      	mov	r6, r9
 800d138:	4632      	mov	r2, r6
 800d13a:	4641      	mov	r1, r8
 800d13c:	6820      	ldr	r0, [r4, #0]
 800d13e:	f000 fb9f 	bl	800d880 <memmove>
 800d142:	68a3      	ldr	r3, [r4, #8]
 800d144:	2000      	movs	r0, #0
 800d146:	1b9b      	subs	r3, r3, r6
 800d148:	60a3      	str	r3, [r4, #8]
 800d14a:	6823      	ldr	r3, [r4, #0]
 800d14c:	441e      	add	r6, r3
 800d14e:	6026      	str	r6, [r4, #0]
 800d150:	e7dc      	b.n	800d10c <__ssputs_r+0x58>
 800d152:	462a      	mov	r2, r5
 800d154:	f000 fbad 	bl	800d8b2 <_realloc_r>
 800d158:	4606      	mov	r6, r0
 800d15a:	2800      	cmp	r0, #0
 800d15c:	d1e2      	bne.n	800d124 <__ssputs_r+0x70>
 800d15e:	6921      	ldr	r1, [r4, #16]
 800d160:	4650      	mov	r0, sl
 800d162:	f7fc fa8b 	bl	800967c <_free_r>
 800d166:	e7c8      	b.n	800d0fa <__ssputs_r+0x46>

0800d168 <_svfiprintf_r>:
 800d168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d16c:	461d      	mov	r5, r3
 800d16e:	898b      	ldrh	r3, [r1, #12]
 800d170:	b09d      	sub	sp, #116	; 0x74
 800d172:	061f      	lsls	r7, r3, #24
 800d174:	4680      	mov	r8, r0
 800d176:	460c      	mov	r4, r1
 800d178:	4616      	mov	r6, r2
 800d17a:	d50f      	bpl.n	800d19c <_svfiprintf_r+0x34>
 800d17c:	690b      	ldr	r3, [r1, #16]
 800d17e:	b96b      	cbnz	r3, 800d19c <_svfiprintf_r+0x34>
 800d180:	2140      	movs	r1, #64	; 0x40
 800d182:	f7fc fac7 	bl	8009714 <_malloc_r>
 800d186:	6020      	str	r0, [r4, #0]
 800d188:	6120      	str	r0, [r4, #16]
 800d18a:	b928      	cbnz	r0, 800d198 <_svfiprintf_r+0x30>
 800d18c:	230c      	movs	r3, #12
 800d18e:	f8c8 3000 	str.w	r3, [r8]
 800d192:	f04f 30ff 	mov.w	r0, #4294967295
 800d196:	e0c8      	b.n	800d32a <_svfiprintf_r+0x1c2>
 800d198:	2340      	movs	r3, #64	; 0x40
 800d19a:	6163      	str	r3, [r4, #20]
 800d19c:	2300      	movs	r3, #0
 800d19e:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a0:	2320      	movs	r3, #32
 800d1a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1a6:	2330      	movs	r3, #48	; 0x30
 800d1a8:	f04f 0b01 	mov.w	fp, #1
 800d1ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1b0:	9503      	str	r5, [sp, #12]
 800d1b2:	4637      	mov	r7, r6
 800d1b4:	463d      	mov	r5, r7
 800d1b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d1ba:	b10b      	cbz	r3, 800d1c0 <_svfiprintf_r+0x58>
 800d1bc:	2b25      	cmp	r3, #37	; 0x25
 800d1be:	d13e      	bne.n	800d23e <_svfiprintf_r+0xd6>
 800d1c0:	ebb7 0a06 	subs.w	sl, r7, r6
 800d1c4:	d00b      	beq.n	800d1de <_svfiprintf_r+0x76>
 800d1c6:	4653      	mov	r3, sl
 800d1c8:	4632      	mov	r2, r6
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	4640      	mov	r0, r8
 800d1ce:	f7ff ff71 	bl	800d0b4 <__ssputs_r>
 800d1d2:	3001      	adds	r0, #1
 800d1d4:	f000 80a4 	beq.w	800d320 <_svfiprintf_r+0x1b8>
 800d1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1da:	4453      	add	r3, sl
 800d1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d1de:	783b      	ldrb	r3, [r7, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	f000 809d 	beq.w	800d320 <_svfiprintf_r+0x1b8>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1f0:	9304      	str	r3, [sp, #16]
 800d1f2:	9307      	str	r3, [sp, #28]
 800d1f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1f8:	931a      	str	r3, [sp, #104]	; 0x68
 800d1fa:	462f      	mov	r7, r5
 800d1fc:	2205      	movs	r2, #5
 800d1fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d202:	4850      	ldr	r0, [pc, #320]	; (800d344 <_svfiprintf_r+0x1dc>)
 800d204:	f7ff fb40 	bl	800c888 <memchr>
 800d208:	9b04      	ldr	r3, [sp, #16]
 800d20a:	b9d0      	cbnz	r0, 800d242 <_svfiprintf_r+0xda>
 800d20c:	06d9      	lsls	r1, r3, #27
 800d20e:	bf44      	itt	mi
 800d210:	2220      	movmi	r2, #32
 800d212:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d216:	071a      	lsls	r2, r3, #28
 800d218:	bf44      	itt	mi
 800d21a:	222b      	movmi	r2, #43	; 0x2b
 800d21c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d220:	782a      	ldrb	r2, [r5, #0]
 800d222:	2a2a      	cmp	r2, #42	; 0x2a
 800d224:	d015      	beq.n	800d252 <_svfiprintf_r+0xea>
 800d226:	462f      	mov	r7, r5
 800d228:	2000      	movs	r0, #0
 800d22a:	250a      	movs	r5, #10
 800d22c:	9a07      	ldr	r2, [sp, #28]
 800d22e:	4639      	mov	r1, r7
 800d230:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d234:	3b30      	subs	r3, #48	; 0x30
 800d236:	2b09      	cmp	r3, #9
 800d238:	d94d      	bls.n	800d2d6 <_svfiprintf_r+0x16e>
 800d23a:	b1b8      	cbz	r0, 800d26c <_svfiprintf_r+0x104>
 800d23c:	e00f      	b.n	800d25e <_svfiprintf_r+0xf6>
 800d23e:	462f      	mov	r7, r5
 800d240:	e7b8      	b.n	800d1b4 <_svfiprintf_r+0x4c>
 800d242:	4a40      	ldr	r2, [pc, #256]	; (800d344 <_svfiprintf_r+0x1dc>)
 800d244:	463d      	mov	r5, r7
 800d246:	1a80      	subs	r0, r0, r2
 800d248:	fa0b f000 	lsl.w	r0, fp, r0
 800d24c:	4318      	orrs	r0, r3
 800d24e:	9004      	str	r0, [sp, #16]
 800d250:	e7d3      	b.n	800d1fa <_svfiprintf_r+0x92>
 800d252:	9a03      	ldr	r2, [sp, #12]
 800d254:	1d11      	adds	r1, r2, #4
 800d256:	6812      	ldr	r2, [r2, #0]
 800d258:	9103      	str	r1, [sp, #12]
 800d25a:	2a00      	cmp	r2, #0
 800d25c:	db01      	blt.n	800d262 <_svfiprintf_r+0xfa>
 800d25e:	9207      	str	r2, [sp, #28]
 800d260:	e004      	b.n	800d26c <_svfiprintf_r+0x104>
 800d262:	4252      	negs	r2, r2
 800d264:	f043 0302 	orr.w	r3, r3, #2
 800d268:	9207      	str	r2, [sp, #28]
 800d26a:	9304      	str	r3, [sp, #16]
 800d26c:	783b      	ldrb	r3, [r7, #0]
 800d26e:	2b2e      	cmp	r3, #46	; 0x2e
 800d270:	d10c      	bne.n	800d28c <_svfiprintf_r+0x124>
 800d272:	787b      	ldrb	r3, [r7, #1]
 800d274:	2b2a      	cmp	r3, #42	; 0x2a
 800d276:	d133      	bne.n	800d2e0 <_svfiprintf_r+0x178>
 800d278:	9b03      	ldr	r3, [sp, #12]
 800d27a:	3702      	adds	r7, #2
 800d27c:	1d1a      	adds	r2, r3, #4
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	9203      	str	r2, [sp, #12]
 800d282:	2b00      	cmp	r3, #0
 800d284:	bfb8      	it	lt
 800d286:	f04f 33ff 	movlt.w	r3, #4294967295
 800d28a:	9305      	str	r3, [sp, #20]
 800d28c:	4d2e      	ldr	r5, [pc, #184]	; (800d348 <_svfiprintf_r+0x1e0>)
 800d28e:	2203      	movs	r2, #3
 800d290:	7839      	ldrb	r1, [r7, #0]
 800d292:	4628      	mov	r0, r5
 800d294:	f7ff faf8 	bl	800c888 <memchr>
 800d298:	b138      	cbz	r0, 800d2aa <_svfiprintf_r+0x142>
 800d29a:	2340      	movs	r3, #64	; 0x40
 800d29c:	1b40      	subs	r0, r0, r5
 800d29e:	fa03 f000 	lsl.w	r0, r3, r0
 800d2a2:	9b04      	ldr	r3, [sp, #16]
 800d2a4:	3701      	adds	r7, #1
 800d2a6:	4303      	orrs	r3, r0
 800d2a8:	9304      	str	r3, [sp, #16]
 800d2aa:	7839      	ldrb	r1, [r7, #0]
 800d2ac:	2206      	movs	r2, #6
 800d2ae:	4827      	ldr	r0, [pc, #156]	; (800d34c <_svfiprintf_r+0x1e4>)
 800d2b0:	1c7e      	adds	r6, r7, #1
 800d2b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2b6:	f7ff fae7 	bl	800c888 <memchr>
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	d038      	beq.n	800d330 <_svfiprintf_r+0x1c8>
 800d2be:	4b24      	ldr	r3, [pc, #144]	; (800d350 <_svfiprintf_r+0x1e8>)
 800d2c0:	bb13      	cbnz	r3, 800d308 <_svfiprintf_r+0x1a0>
 800d2c2:	9b03      	ldr	r3, [sp, #12]
 800d2c4:	3307      	adds	r3, #7
 800d2c6:	f023 0307 	bic.w	r3, r3, #7
 800d2ca:	3308      	adds	r3, #8
 800d2cc:	9303      	str	r3, [sp, #12]
 800d2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2d0:	444b      	add	r3, r9
 800d2d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2d4:	e76d      	b.n	800d1b2 <_svfiprintf_r+0x4a>
 800d2d6:	fb05 3202 	mla	r2, r5, r2, r3
 800d2da:	2001      	movs	r0, #1
 800d2dc:	460f      	mov	r7, r1
 800d2de:	e7a6      	b.n	800d22e <_svfiprintf_r+0xc6>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	250a      	movs	r5, #10
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	3701      	adds	r7, #1
 800d2e8:	9305      	str	r3, [sp, #20]
 800d2ea:	4638      	mov	r0, r7
 800d2ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2f0:	3a30      	subs	r2, #48	; 0x30
 800d2f2:	2a09      	cmp	r2, #9
 800d2f4:	d903      	bls.n	800d2fe <_svfiprintf_r+0x196>
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d0c8      	beq.n	800d28c <_svfiprintf_r+0x124>
 800d2fa:	9105      	str	r1, [sp, #20]
 800d2fc:	e7c6      	b.n	800d28c <_svfiprintf_r+0x124>
 800d2fe:	fb05 2101 	mla	r1, r5, r1, r2
 800d302:	2301      	movs	r3, #1
 800d304:	4607      	mov	r7, r0
 800d306:	e7f0      	b.n	800d2ea <_svfiprintf_r+0x182>
 800d308:	ab03      	add	r3, sp, #12
 800d30a:	9300      	str	r3, [sp, #0]
 800d30c:	4622      	mov	r2, r4
 800d30e:	4b11      	ldr	r3, [pc, #68]	; (800d354 <_svfiprintf_r+0x1ec>)
 800d310:	a904      	add	r1, sp, #16
 800d312:	4640      	mov	r0, r8
 800d314:	f7fc faea 	bl	80098ec <_printf_float>
 800d318:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d31c:	4681      	mov	r9, r0
 800d31e:	d1d6      	bne.n	800d2ce <_svfiprintf_r+0x166>
 800d320:	89a3      	ldrh	r3, [r4, #12]
 800d322:	065b      	lsls	r3, r3, #25
 800d324:	f53f af35 	bmi.w	800d192 <_svfiprintf_r+0x2a>
 800d328:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d32a:	b01d      	add	sp, #116	; 0x74
 800d32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d330:	ab03      	add	r3, sp, #12
 800d332:	9300      	str	r3, [sp, #0]
 800d334:	4622      	mov	r2, r4
 800d336:	4b07      	ldr	r3, [pc, #28]	; (800d354 <_svfiprintf_r+0x1ec>)
 800d338:	a904      	add	r1, sp, #16
 800d33a:	4640      	mov	r0, r8
 800d33c:	f7fc fd82 	bl	8009e44 <_printf_i>
 800d340:	e7ea      	b.n	800d318 <_svfiprintf_r+0x1b0>
 800d342:	bf00      	nop
 800d344:	0800dd1c 	.word	0x0800dd1c
 800d348:	0800dd22 	.word	0x0800dd22
 800d34c:	0800dd26 	.word	0x0800dd26
 800d350:	080098ed 	.word	0x080098ed
 800d354:	0800d0b5 	.word	0x0800d0b5

0800d358 <__sfputc_r>:
 800d358:	6893      	ldr	r3, [r2, #8]
 800d35a:	b410      	push	{r4}
 800d35c:	3b01      	subs	r3, #1
 800d35e:	2b00      	cmp	r3, #0
 800d360:	6093      	str	r3, [r2, #8]
 800d362:	da07      	bge.n	800d374 <__sfputc_r+0x1c>
 800d364:	6994      	ldr	r4, [r2, #24]
 800d366:	42a3      	cmp	r3, r4
 800d368:	db01      	blt.n	800d36e <__sfputc_r+0x16>
 800d36a:	290a      	cmp	r1, #10
 800d36c:	d102      	bne.n	800d374 <__sfputc_r+0x1c>
 800d36e:	bc10      	pop	{r4}
 800d370:	f000 b954 	b.w	800d61c <__swbuf_r>
 800d374:	6813      	ldr	r3, [r2, #0]
 800d376:	1c58      	adds	r0, r3, #1
 800d378:	6010      	str	r0, [r2, #0]
 800d37a:	7019      	strb	r1, [r3, #0]
 800d37c:	4608      	mov	r0, r1
 800d37e:	bc10      	pop	{r4}
 800d380:	4770      	bx	lr

0800d382 <__sfputs_r>:
 800d382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d384:	4606      	mov	r6, r0
 800d386:	460f      	mov	r7, r1
 800d388:	4614      	mov	r4, r2
 800d38a:	18d5      	adds	r5, r2, r3
 800d38c:	42ac      	cmp	r4, r5
 800d38e:	d101      	bne.n	800d394 <__sfputs_r+0x12>
 800d390:	2000      	movs	r0, #0
 800d392:	e007      	b.n	800d3a4 <__sfputs_r+0x22>
 800d394:	463a      	mov	r2, r7
 800d396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d39a:	4630      	mov	r0, r6
 800d39c:	f7ff ffdc 	bl	800d358 <__sfputc_r>
 800d3a0:	1c43      	adds	r3, r0, #1
 800d3a2:	d1f3      	bne.n	800d38c <__sfputs_r+0xa>
 800d3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d3a8 <_vfiprintf_r>:
 800d3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ac:	460c      	mov	r4, r1
 800d3ae:	b09d      	sub	sp, #116	; 0x74
 800d3b0:	4617      	mov	r7, r2
 800d3b2:	461d      	mov	r5, r3
 800d3b4:	4606      	mov	r6, r0
 800d3b6:	b118      	cbz	r0, 800d3c0 <_vfiprintf_r+0x18>
 800d3b8:	6983      	ldr	r3, [r0, #24]
 800d3ba:	b90b      	cbnz	r3, 800d3c0 <_vfiprintf_r+0x18>
 800d3bc:	f7fc f88c 	bl	80094d8 <__sinit>
 800d3c0:	4b7c      	ldr	r3, [pc, #496]	; (800d5b4 <_vfiprintf_r+0x20c>)
 800d3c2:	429c      	cmp	r4, r3
 800d3c4:	d158      	bne.n	800d478 <_vfiprintf_r+0xd0>
 800d3c6:	6874      	ldr	r4, [r6, #4]
 800d3c8:	89a3      	ldrh	r3, [r4, #12]
 800d3ca:	0718      	lsls	r0, r3, #28
 800d3cc:	d55e      	bpl.n	800d48c <_vfiprintf_r+0xe4>
 800d3ce:	6923      	ldr	r3, [r4, #16]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d05b      	beq.n	800d48c <_vfiprintf_r+0xe4>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d3d8:	2320      	movs	r3, #32
 800d3da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3de:	2330      	movs	r3, #48	; 0x30
 800d3e0:	f04f 0b01 	mov.w	fp, #1
 800d3e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3e8:	9503      	str	r5, [sp, #12]
 800d3ea:	46b8      	mov	r8, r7
 800d3ec:	4645      	mov	r5, r8
 800d3ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d3f2:	b10b      	cbz	r3, 800d3f8 <_vfiprintf_r+0x50>
 800d3f4:	2b25      	cmp	r3, #37	; 0x25
 800d3f6:	d154      	bne.n	800d4a2 <_vfiprintf_r+0xfa>
 800d3f8:	ebb8 0a07 	subs.w	sl, r8, r7
 800d3fc:	d00b      	beq.n	800d416 <_vfiprintf_r+0x6e>
 800d3fe:	4653      	mov	r3, sl
 800d400:	463a      	mov	r2, r7
 800d402:	4621      	mov	r1, r4
 800d404:	4630      	mov	r0, r6
 800d406:	f7ff ffbc 	bl	800d382 <__sfputs_r>
 800d40a:	3001      	adds	r0, #1
 800d40c:	f000 80c2 	beq.w	800d594 <_vfiprintf_r+0x1ec>
 800d410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d412:	4453      	add	r3, sl
 800d414:	9309      	str	r3, [sp, #36]	; 0x24
 800d416:	f898 3000 	ldrb.w	r3, [r8]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f000 80ba 	beq.w	800d594 <_vfiprintf_r+0x1ec>
 800d420:	2300      	movs	r3, #0
 800d422:	f04f 32ff 	mov.w	r2, #4294967295
 800d426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d42a:	9304      	str	r3, [sp, #16]
 800d42c:	9307      	str	r3, [sp, #28]
 800d42e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d432:	931a      	str	r3, [sp, #104]	; 0x68
 800d434:	46a8      	mov	r8, r5
 800d436:	2205      	movs	r2, #5
 800d438:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d43c:	485e      	ldr	r0, [pc, #376]	; (800d5b8 <_vfiprintf_r+0x210>)
 800d43e:	f7ff fa23 	bl	800c888 <memchr>
 800d442:	9b04      	ldr	r3, [sp, #16]
 800d444:	bb78      	cbnz	r0, 800d4a6 <_vfiprintf_r+0xfe>
 800d446:	06d9      	lsls	r1, r3, #27
 800d448:	bf44      	itt	mi
 800d44a:	2220      	movmi	r2, #32
 800d44c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d450:	071a      	lsls	r2, r3, #28
 800d452:	bf44      	itt	mi
 800d454:	222b      	movmi	r2, #43	; 0x2b
 800d456:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d45a:	782a      	ldrb	r2, [r5, #0]
 800d45c:	2a2a      	cmp	r2, #42	; 0x2a
 800d45e:	d02a      	beq.n	800d4b6 <_vfiprintf_r+0x10e>
 800d460:	46a8      	mov	r8, r5
 800d462:	2000      	movs	r0, #0
 800d464:	250a      	movs	r5, #10
 800d466:	9a07      	ldr	r2, [sp, #28]
 800d468:	4641      	mov	r1, r8
 800d46a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d46e:	3b30      	subs	r3, #48	; 0x30
 800d470:	2b09      	cmp	r3, #9
 800d472:	d969      	bls.n	800d548 <_vfiprintf_r+0x1a0>
 800d474:	b360      	cbz	r0, 800d4d0 <_vfiprintf_r+0x128>
 800d476:	e024      	b.n	800d4c2 <_vfiprintf_r+0x11a>
 800d478:	4b50      	ldr	r3, [pc, #320]	; (800d5bc <_vfiprintf_r+0x214>)
 800d47a:	429c      	cmp	r4, r3
 800d47c:	d101      	bne.n	800d482 <_vfiprintf_r+0xda>
 800d47e:	68b4      	ldr	r4, [r6, #8]
 800d480:	e7a2      	b.n	800d3c8 <_vfiprintf_r+0x20>
 800d482:	4b4f      	ldr	r3, [pc, #316]	; (800d5c0 <_vfiprintf_r+0x218>)
 800d484:	429c      	cmp	r4, r3
 800d486:	bf08      	it	eq
 800d488:	68f4      	ldreq	r4, [r6, #12]
 800d48a:	e79d      	b.n	800d3c8 <_vfiprintf_r+0x20>
 800d48c:	4621      	mov	r1, r4
 800d48e:	4630      	mov	r0, r6
 800d490:	f000 f924 	bl	800d6dc <__swsetup_r>
 800d494:	2800      	cmp	r0, #0
 800d496:	d09d      	beq.n	800d3d4 <_vfiprintf_r+0x2c>
 800d498:	f04f 30ff 	mov.w	r0, #4294967295
 800d49c:	b01d      	add	sp, #116	; 0x74
 800d49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a2:	46a8      	mov	r8, r5
 800d4a4:	e7a2      	b.n	800d3ec <_vfiprintf_r+0x44>
 800d4a6:	4a44      	ldr	r2, [pc, #272]	; (800d5b8 <_vfiprintf_r+0x210>)
 800d4a8:	4645      	mov	r5, r8
 800d4aa:	1a80      	subs	r0, r0, r2
 800d4ac:	fa0b f000 	lsl.w	r0, fp, r0
 800d4b0:	4318      	orrs	r0, r3
 800d4b2:	9004      	str	r0, [sp, #16]
 800d4b4:	e7be      	b.n	800d434 <_vfiprintf_r+0x8c>
 800d4b6:	9a03      	ldr	r2, [sp, #12]
 800d4b8:	1d11      	adds	r1, r2, #4
 800d4ba:	6812      	ldr	r2, [r2, #0]
 800d4bc:	9103      	str	r1, [sp, #12]
 800d4be:	2a00      	cmp	r2, #0
 800d4c0:	db01      	blt.n	800d4c6 <_vfiprintf_r+0x11e>
 800d4c2:	9207      	str	r2, [sp, #28]
 800d4c4:	e004      	b.n	800d4d0 <_vfiprintf_r+0x128>
 800d4c6:	4252      	negs	r2, r2
 800d4c8:	f043 0302 	orr.w	r3, r3, #2
 800d4cc:	9207      	str	r2, [sp, #28]
 800d4ce:	9304      	str	r3, [sp, #16]
 800d4d0:	f898 3000 	ldrb.w	r3, [r8]
 800d4d4:	2b2e      	cmp	r3, #46	; 0x2e
 800d4d6:	d10e      	bne.n	800d4f6 <_vfiprintf_r+0x14e>
 800d4d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d4dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d4de:	d138      	bne.n	800d552 <_vfiprintf_r+0x1aa>
 800d4e0:	9b03      	ldr	r3, [sp, #12]
 800d4e2:	f108 0802 	add.w	r8, r8, #2
 800d4e6:	1d1a      	adds	r2, r3, #4
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	9203      	str	r2, [sp, #12]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	bfb8      	it	lt
 800d4f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4f4:	9305      	str	r3, [sp, #20]
 800d4f6:	4d33      	ldr	r5, [pc, #204]	; (800d5c4 <_vfiprintf_r+0x21c>)
 800d4f8:	2203      	movs	r2, #3
 800d4fa:	f898 1000 	ldrb.w	r1, [r8]
 800d4fe:	4628      	mov	r0, r5
 800d500:	f7ff f9c2 	bl	800c888 <memchr>
 800d504:	b140      	cbz	r0, 800d518 <_vfiprintf_r+0x170>
 800d506:	2340      	movs	r3, #64	; 0x40
 800d508:	1b40      	subs	r0, r0, r5
 800d50a:	fa03 f000 	lsl.w	r0, r3, r0
 800d50e:	9b04      	ldr	r3, [sp, #16]
 800d510:	f108 0801 	add.w	r8, r8, #1
 800d514:	4303      	orrs	r3, r0
 800d516:	9304      	str	r3, [sp, #16]
 800d518:	f898 1000 	ldrb.w	r1, [r8]
 800d51c:	2206      	movs	r2, #6
 800d51e:	482a      	ldr	r0, [pc, #168]	; (800d5c8 <_vfiprintf_r+0x220>)
 800d520:	f108 0701 	add.w	r7, r8, #1
 800d524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d528:	f7ff f9ae 	bl	800c888 <memchr>
 800d52c:	2800      	cmp	r0, #0
 800d52e:	d037      	beq.n	800d5a0 <_vfiprintf_r+0x1f8>
 800d530:	4b26      	ldr	r3, [pc, #152]	; (800d5cc <_vfiprintf_r+0x224>)
 800d532:	bb1b      	cbnz	r3, 800d57c <_vfiprintf_r+0x1d4>
 800d534:	9b03      	ldr	r3, [sp, #12]
 800d536:	3307      	adds	r3, #7
 800d538:	f023 0307 	bic.w	r3, r3, #7
 800d53c:	3308      	adds	r3, #8
 800d53e:	9303      	str	r3, [sp, #12]
 800d540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d542:	444b      	add	r3, r9
 800d544:	9309      	str	r3, [sp, #36]	; 0x24
 800d546:	e750      	b.n	800d3ea <_vfiprintf_r+0x42>
 800d548:	fb05 3202 	mla	r2, r5, r2, r3
 800d54c:	2001      	movs	r0, #1
 800d54e:	4688      	mov	r8, r1
 800d550:	e78a      	b.n	800d468 <_vfiprintf_r+0xc0>
 800d552:	2300      	movs	r3, #0
 800d554:	250a      	movs	r5, #10
 800d556:	4619      	mov	r1, r3
 800d558:	f108 0801 	add.w	r8, r8, #1
 800d55c:	9305      	str	r3, [sp, #20]
 800d55e:	4640      	mov	r0, r8
 800d560:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d564:	3a30      	subs	r2, #48	; 0x30
 800d566:	2a09      	cmp	r2, #9
 800d568:	d903      	bls.n	800d572 <_vfiprintf_r+0x1ca>
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d0c3      	beq.n	800d4f6 <_vfiprintf_r+0x14e>
 800d56e:	9105      	str	r1, [sp, #20]
 800d570:	e7c1      	b.n	800d4f6 <_vfiprintf_r+0x14e>
 800d572:	fb05 2101 	mla	r1, r5, r1, r2
 800d576:	2301      	movs	r3, #1
 800d578:	4680      	mov	r8, r0
 800d57a:	e7f0      	b.n	800d55e <_vfiprintf_r+0x1b6>
 800d57c:	ab03      	add	r3, sp, #12
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	4622      	mov	r2, r4
 800d582:	4b13      	ldr	r3, [pc, #76]	; (800d5d0 <_vfiprintf_r+0x228>)
 800d584:	a904      	add	r1, sp, #16
 800d586:	4630      	mov	r0, r6
 800d588:	f7fc f9b0 	bl	80098ec <_printf_float>
 800d58c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d590:	4681      	mov	r9, r0
 800d592:	d1d5      	bne.n	800d540 <_vfiprintf_r+0x198>
 800d594:	89a3      	ldrh	r3, [r4, #12]
 800d596:	065b      	lsls	r3, r3, #25
 800d598:	f53f af7e 	bmi.w	800d498 <_vfiprintf_r+0xf0>
 800d59c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d59e:	e77d      	b.n	800d49c <_vfiprintf_r+0xf4>
 800d5a0:	ab03      	add	r3, sp, #12
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	4622      	mov	r2, r4
 800d5a6:	4b0a      	ldr	r3, [pc, #40]	; (800d5d0 <_vfiprintf_r+0x228>)
 800d5a8:	a904      	add	r1, sp, #16
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	f7fc fc4a 	bl	8009e44 <_printf_i>
 800d5b0:	e7ec      	b.n	800d58c <_vfiprintf_r+0x1e4>
 800d5b2:	bf00      	nop
 800d5b4:	0800db38 	.word	0x0800db38
 800d5b8:	0800dd1c 	.word	0x0800dd1c
 800d5bc:	0800db58 	.word	0x0800db58
 800d5c0:	0800db18 	.word	0x0800db18
 800d5c4:	0800dd22 	.word	0x0800dd22
 800d5c8:	0800dd26 	.word	0x0800dd26
 800d5cc:	080098ed 	.word	0x080098ed
 800d5d0:	0800d383 	.word	0x0800d383

0800d5d4 <_read_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	4608      	mov	r0, r1
 800d5da:	4611      	mov	r1, r2
 800d5dc:	2200      	movs	r2, #0
 800d5de:	4c05      	ldr	r4, [pc, #20]	; (800d5f4 <_read_r+0x20>)
 800d5e0:	6022      	str	r2, [r4, #0]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	f000 f9d6 	bl	800d994 <_read>
 800d5e8:	1c43      	adds	r3, r0, #1
 800d5ea:	d102      	bne.n	800d5f2 <_read_r+0x1e>
 800d5ec:	6823      	ldr	r3, [r4, #0]
 800d5ee:	b103      	cbz	r3, 800d5f2 <_read_r+0x1e>
 800d5f0:	602b      	str	r3, [r5, #0]
 800d5f2:	bd38      	pop	{r3, r4, r5, pc}
 800d5f4:	2000181c 	.word	0x2000181c

0800d5f8 <strncmp>:
 800d5f8:	b510      	push	{r4, lr}
 800d5fa:	b16a      	cbz	r2, 800d618 <strncmp+0x20>
 800d5fc:	3901      	subs	r1, #1
 800d5fe:	1884      	adds	r4, r0, r2
 800d600:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d604:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d608:	4293      	cmp	r3, r2
 800d60a:	d103      	bne.n	800d614 <strncmp+0x1c>
 800d60c:	42a0      	cmp	r0, r4
 800d60e:	d001      	beq.n	800d614 <strncmp+0x1c>
 800d610:	2b00      	cmp	r3, #0
 800d612:	d1f5      	bne.n	800d600 <strncmp+0x8>
 800d614:	1a98      	subs	r0, r3, r2
 800d616:	bd10      	pop	{r4, pc}
 800d618:	4610      	mov	r0, r2
 800d61a:	e7fc      	b.n	800d616 <strncmp+0x1e>

0800d61c <__swbuf_r>:
 800d61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d61e:	460e      	mov	r6, r1
 800d620:	4614      	mov	r4, r2
 800d622:	4605      	mov	r5, r0
 800d624:	b118      	cbz	r0, 800d62e <__swbuf_r+0x12>
 800d626:	6983      	ldr	r3, [r0, #24]
 800d628:	b90b      	cbnz	r3, 800d62e <__swbuf_r+0x12>
 800d62a:	f7fb ff55 	bl	80094d8 <__sinit>
 800d62e:	4b21      	ldr	r3, [pc, #132]	; (800d6b4 <__swbuf_r+0x98>)
 800d630:	429c      	cmp	r4, r3
 800d632:	d12a      	bne.n	800d68a <__swbuf_r+0x6e>
 800d634:	686c      	ldr	r4, [r5, #4]
 800d636:	69a3      	ldr	r3, [r4, #24]
 800d638:	60a3      	str	r3, [r4, #8]
 800d63a:	89a3      	ldrh	r3, [r4, #12]
 800d63c:	071a      	lsls	r2, r3, #28
 800d63e:	d52e      	bpl.n	800d69e <__swbuf_r+0x82>
 800d640:	6923      	ldr	r3, [r4, #16]
 800d642:	b363      	cbz	r3, 800d69e <__swbuf_r+0x82>
 800d644:	6923      	ldr	r3, [r4, #16]
 800d646:	6820      	ldr	r0, [r4, #0]
 800d648:	b2f6      	uxtb	r6, r6
 800d64a:	1ac0      	subs	r0, r0, r3
 800d64c:	6963      	ldr	r3, [r4, #20]
 800d64e:	4637      	mov	r7, r6
 800d650:	4283      	cmp	r3, r0
 800d652:	dc04      	bgt.n	800d65e <__swbuf_r+0x42>
 800d654:	4621      	mov	r1, r4
 800d656:	4628      	mov	r0, r5
 800d658:	f7fe fd8c 	bl	800c174 <_fflush_r>
 800d65c:	bb28      	cbnz	r0, 800d6aa <__swbuf_r+0x8e>
 800d65e:	68a3      	ldr	r3, [r4, #8]
 800d660:	3001      	adds	r0, #1
 800d662:	3b01      	subs	r3, #1
 800d664:	60a3      	str	r3, [r4, #8]
 800d666:	6823      	ldr	r3, [r4, #0]
 800d668:	1c5a      	adds	r2, r3, #1
 800d66a:	6022      	str	r2, [r4, #0]
 800d66c:	701e      	strb	r6, [r3, #0]
 800d66e:	6963      	ldr	r3, [r4, #20]
 800d670:	4283      	cmp	r3, r0
 800d672:	d004      	beq.n	800d67e <__swbuf_r+0x62>
 800d674:	89a3      	ldrh	r3, [r4, #12]
 800d676:	07db      	lsls	r3, r3, #31
 800d678:	d519      	bpl.n	800d6ae <__swbuf_r+0x92>
 800d67a:	2e0a      	cmp	r6, #10
 800d67c:	d117      	bne.n	800d6ae <__swbuf_r+0x92>
 800d67e:	4621      	mov	r1, r4
 800d680:	4628      	mov	r0, r5
 800d682:	f7fe fd77 	bl	800c174 <_fflush_r>
 800d686:	b190      	cbz	r0, 800d6ae <__swbuf_r+0x92>
 800d688:	e00f      	b.n	800d6aa <__swbuf_r+0x8e>
 800d68a:	4b0b      	ldr	r3, [pc, #44]	; (800d6b8 <__swbuf_r+0x9c>)
 800d68c:	429c      	cmp	r4, r3
 800d68e:	d101      	bne.n	800d694 <__swbuf_r+0x78>
 800d690:	68ac      	ldr	r4, [r5, #8]
 800d692:	e7d0      	b.n	800d636 <__swbuf_r+0x1a>
 800d694:	4b09      	ldr	r3, [pc, #36]	; (800d6bc <__swbuf_r+0xa0>)
 800d696:	429c      	cmp	r4, r3
 800d698:	bf08      	it	eq
 800d69a:	68ec      	ldreq	r4, [r5, #12]
 800d69c:	e7cb      	b.n	800d636 <__swbuf_r+0x1a>
 800d69e:	4621      	mov	r1, r4
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	f000 f81b 	bl	800d6dc <__swsetup_r>
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	d0cc      	beq.n	800d644 <__swbuf_r+0x28>
 800d6aa:	f04f 37ff 	mov.w	r7, #4294967295
 800d6ae:	4638      	mov	r0, r7
 800d6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	0800db38 	.word	0x0800db38
 800d6b8:	0800db58 	.word	0x0800db58
 800d6bc:	0800db18 	.word	0x0800db18

0800d6c0 <__ascii_wctomb>:
 800d6c0:	b149      	cbz	r1, 800d6d6 <__ascii_wctomb+0x16>
 800d6c2:	2aff      	cmp	r2, #255	; 0xff
 800d6c4:	bf8b      	itete	hi
 800d6c6:	238a      	movhi	r3, #138	; 0x8a
 800d6c8:	700a      	strbls	r2, [r1, #0]
 800d6ca:	6003      	strhi	r3, [r0, #0]
 800d6cc:	2001      	movls	r0, #1
 800d6ce:	bf88      	it	hi
 800d6d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800d6d4:	4770      	bx	lr
 800d6d6:	4608      	mov	r0, r1
 800d6d8:	4770      	bx	lr
	...

0800d6dc <__swsetup_r>:
 800d6dc:	4b32      	ldr	r3, [pc, #200]	; (800d7a8 <__swsetup_r+0xcc>)
 800d6de:	b570      	push	{r4, r5, r6, lr}
 800d6e0:	681d      	ldr	r5, [r3, #0]
 800d6e2:	4606      	mov	r6, r0
 800d6e4:	460c      	mov	r4, r1
 800d6e6:	b125      	cbz	r5, 800d6f2 <__swsetup_r+0x16>
 800d6e8:	69ab      	ldr	r3, [r5, #24]
 800d6ea:	b913      	cbnz	r3, 800d6f2 <__swsetup_r+0x16>
 800d6ec:	4628      	mov	r0, r5
 800d6ee:	f7fb fef3 	bl	80094d8 <__sinit>
 800d6f2:	4b2e      	ldr	r3, [pc, #184]	; (800d7ac <__swsetup_r+0xd0>)
 800d6f4:	429c      	cmp	r4, r3
 800d6f6:	d10f      	bne.n	800d718 <__swsetup_r+0x3c>
 800d6f8:	686c      	ldr	r4, [r5, #4]
 800d6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	0715      	lsls	r5, r2, #28
 800d702:	d42c      	bmi.n	800d75e <__swsetup_r+0x82>
 800d704:	06d0      	lsls	r0, r2, #27
 800d706:	d411      	bmi.n	800d72c <__swsetup_r+0x50>
 800d708:	2209      	movs	r2, #9
 800d70a:	6032      	str	r2, [r6, #0]
 800d70c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d710:	81a3      	strh	r3, [r4, #12]
 800d712:	f04f 30ff 	mov.w	r0, #4294967295
 800d716:	e03e      	b.n	800d796 <__swsetup_r+0xba>
 800d718:	4b25      	ldr	r3, [pc, #148]	; (800d7b0 <__swsetup_r+0xd4>)
 800d71a:	429c      	cmp	r4, r3
 800d71c:	d101      	bne.n	800d722 <__swsetup_r+0x46>
 800d71e:	68ac      	ldr	r4, [r5, #8]
 800d720:	e7eb      	b.n	800d6fa <__swsetup_r+0x1e>
 800d722:	4b24      	ldr	r3, [pc, #144]	; (800d7b4 <__swsetup_r+0xd8>)
 800d724:	429c      	cmp	r4, r3
 800d726:	bf08      	it	eq
 800d728:	68ec      	ldreq	r4, [r5, #12]
 800d72a:	e7e6      	b.n	800d6fa <__swsetup_r+0x1e>
 800d72c:	0751      	lsls	r1, r2, #29
 800d72e:	d512      	bpl.n	800d756 <__swsetup_r+0x7a>
 800d730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d732:	b141      	cbz	r1, 800d746 <__swsetup_r+0x6a>
 800d734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d738:	4299      	cmp	r1, r3
 800d73a:	d002      	beq.n	800d742 <__swsetup_r+0x66>
 800d73c:	4630      	mov	r0, r6
 800d73e:	f7fb ff9d 	bl	800967c <_free_r>
 800d742:	2300      	movs	r3, #0
 800d744:	6363      	str	r3, [r4, #52]	; 0x34
 800d746:	89a3      	ldrh	r3, [r4, #12]
 800d748:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d74c:	81a3      	strh	r3, [r4, #12]
 800d74e:	2300      	movs	r3, #0
 800d750:	6063      	str	r3, [r4, #4]
 800d752:	6923      	ldr	r3, [r4, #16]
 800d754:	6023      	str	r3, [r4, #0]
 800d756:	89a3      	ldrh	r3, [r4, #12]
 800d758:	f043 0308 	orr.w	r3, r3, #8
 800d75c:	81a3      	strh	r3, [r4, #12]
 800d75e:	6923      	ldr	r3, [r4, #16]
 800d760:	b94b      	cbnz	r3, 800d776 <__swsetup_r+0x9a>
 800d762:	89a3      	ldrh	r3, [r4, #12]
 800d764:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d76c:	d003      	beq.n	800d776 <__swsetup_r+0x9a>
 800d76e:	4621      	mov	r1, r4
 800d770:	4630      	mov	r0, r6
 800d772:	f000 f845 	bl	800d800 <__smakebuf_r>
 800d776:	89a2      	ldrh	r2, [r4, #12]
 800d778:	f012 0301 	ands.w	r3, r2, #1
 800d77c:	d00c      	beq.n	800d798 <__swsetup_r+0xbc>
 800d77e:	2300      	movs	r3, #0
 800d780:	60a3      	str	r3, [r4, #8]
 800d782:	6963      	ldr	r3, [r4, #20]
 800d784:	425b      	negs	r3, r3
 800d786:	61a3      	str	r3, [r4, #24]
 800d788:	6923      	ldr	r3, [r4, #16]
 800d78a:	b953      	cbnz	r3, 800d7a2 <__swsetup_r+0xc6>
 800d78c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d790:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d794:	d1ba      	bne.n	800d70c <__swsetup_r+0x30>
 800d796:	bd70      	pop	{r4, r5, r6, pc}
 800d798:	0792      	lsls	r2, r2, #30
 800d79a:	bf58      	it	pl
 800d79c:	6963      	ldrpl	r3, [r4, #20]
 800d79e:	60a3      	str	r3, [r4, #8]
 800d7a0:	e7f2      	b.n	800d788 <__swsetup_r+0xac>
 800d7a2:	2000      	movs	r0, #0
 800d7a4:	e7f7      	b.n	800d796 <__swsetup_r+0xba>
 800d7a6:	bf00      	nop
 800d7a8:	2000018c 	.word	0x2000018c
 800d7ac:	0800db38 	.word	0x0800db38
 800d7b0:	0800db58 	.word	0x0800db58
 800d7b4:	0800db18 	.word	0x0800db18

0800d7b8 <__swhatbuf_r>:
 800d7b8:	b570      	push	{r4, r5, r6, lr}
 800d7ba:	460e      	mov	r6, r1
 800d7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7c0:	b096      	sub	sp, #88	; 0x58
 800d7c2:	2900      	cmp	r1, #0
 800d7c4:	4614      	mov	r4, r2
 800d7c6:	461d      	mov	r5, r3
 800d7c8:	da07      	bge.n	800d7da <__swhatbuf_r+0x22>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	602b      	str	r3, [r5, #0]
 800d7ce:	89b3      	ldrh	r3, [r6, #12]
 800d7d0:	061a      	lsls	r2, r3, #24
 800d7d2:	d410      	bmi.n	800d7f6 <__swhatbuf_r+0x3e>
 800d7d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7d8:	e00e      	b.n	800d7f8 <__swhatbuf_r+0x40>
 800d7da:	466a      	mov	r2, sp
 800d7dc:	f000 f890 	bl	800d900 <_fstat_r>
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	dbf2      	blt.n	800d7ca <__swhatbuf_r+0x12>
 800d7e4:	9a01      	ldr	r2, [sp, #4]
 800d7e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d7ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d7ee:	425a      	negs	r2, r3
 800d7f0:	415a      	adcs	r2, r3
 800d7f2:	602a      	str	r2, [r5, #0]
 800d7f4:	e7ee      	b.n	800d7d4 <__swhatbuf_r+0x1c>
 800d7f6:	2340      	movs	r3, #64	; 0x40
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	6023      	str	r3, [r4, #0]
 800d7fc:	b016      	add	sp, #88	; 0x58
 800d7fe:	bd70      	pop	{r4, r5, r6, pc}

0800d800 <__smakebuf_r>:
 800d800:	898b      	ldrh	r3, [r1, #12]
 800d802:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d804:	079d      	lsls	r5, r3, #30
 800d806:	4606      	mov	r6, r0
 800d808:	460c      	mov	r4, r1
 800d80a:	d507      	bpl.n	800d81c <__smakebuf_r+0x1c>
 800d80c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d810:	6023      	str	r3, [r4, #0]
 800d812:	6123      	str	r3, [r4, #16]
 800d814:	2301      	movs	r3, #1
 800d816:	6163      	str	r3, [r4, #20]
 800d818:	b002      	add	sp, #8
 800d81a:	bd70      	pop	{r4, r5, r6, pc}
 800d81c:	ab01      	add	r3, sp, #4
 800d81e:	466a      	mov	r2, sp
 800d820:	f7ff ffca 	bl	800d7b8 <__swhatbuf_r>
 800d824:	9900      	ldr	r1, [sp, #0]
 800d826:	4605      	mov	r5, r0
 800d828:	4630      	mov	r0, r6
 800d82a:	f7fb ff73 	bl	8009714 <_malloc_r>
 800d82e:	b948      	cbnz	r0, 800d844 <__smakebuf_r+0x44>
 800d830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d834:	059a      	lsls	r2, r3, #22
 800d836:	d4ef      	bmi.n	800d818 <__smakebuf_r+0x18>
 800d838:	f023 0303 	bic.w	r3, r3, #3
 800d83c:	f043 0302 	orr.w	r3, r3, #2
 800d840:	81a3      	strh	r3, [r4, #12]
 800d842:	e7e3      	b.n	800d80c <__smakebuf_r+0xc>
 800d844:	4b0d      	ldr	r3, [pc, #52]	; (800d87c <__smakebuf_r+0x7c>)
 800d846:	62b3      	str	r3, [r6, #40]	; 0x28
 800d848:	89a3      	ldrh	r3, [r4, #12]
 800d84a:	6020      	str	r0, [r4, #0]
 800d84c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d850:	81a3      	strh	r3, [r4, #12]
 800d852:	9b00      	ldr	r3, [sp, #0]
 800d854:	6120      	str	r0, [r4, #16]
 800d856:	6163      	str	r3, [r4, #20]
 800d858:	9b01      	ldr	r3, [sp, #4]
 800d85a:	b15b      	cbz	r3, 800d874 <__smakebuf_r+0x74>
 800d85c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d860:	4630      	mov	r0, r6
 800d862:	f000 f85f 	bl	800d924 <_isatty_r>
 800d866:	b128      	cbz	r0, 800d874 <__smakebuf_r+0x74>
 800d868:	89a3      	ldrh	r3, [r4, #12]
 800d86a:	f023 0303 	bic.w	r3, r3, #3
 800d86e:	f043 0301 	orr.w	r3, r3, #1
 800d872:	81a3      	strh	r3, [r4, #12]
 800d874:	89a3      	ldrh	r3, [r4, #12]
 800d876:	431d      	orrs	r5, r3
 800d878:	81a5      	strh	r5, [r4, #12]
 800d87a:	e7cd      	b.n	800d818 <__smakebuf_r+0x18>
 800d87c:	080094a1 	.word	0x080094a1

0800d880 <memmove>:
 800d880:	4288      	cmp	r0, r1
 800d882:	b510      	push	{r4, lr}
 800d884:	eb01 0302 	add.w	r3, r1, r2
 800d888:	d807      	bhi.n	800d89a <memmove+0x1a>
 800d88a:	1e42      	subs	r2, r0, #1
 800d88c:	4299      	cmp	r1, r3
 800d88e:	d00a      	beq.n	800d8a6 <memmove+0x26>
 800d890:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d894:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d898:	e7f8      	b.n	800d88c <memmove+0xc>
 800d89a:	4283      	cmp	r3, r0
 800d89c:	d9f5      	bls.n	800d88a <memmove+0xa>
 800d89e:	1881      	adds	r1, r0, r2
 800d8a0:	1ad2      	subs	r2, r2, r3
 800d8a2:	42d3      	cmn	r3, r2
 800d8a4:	d100      	bne.n	800d8a8 <memmove+0x28>
 800d8a6:	bd10      	pop	{r4, pc}
 800d8a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d8b0:	e7f7      	b.n	800d8a2 <memmove+0x22>

0800d8b2 <_realloc_r>:
 800d8b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8b4:	4607      	mov	r7, r0
 800d8b6:	4614      	mov	r4, r2
 800d8b8:	460e      	mov	r6, r1
 800d8ba:	b921      	cbnz	r1, 800d8c6 <_realloc_r+0x14>
 800d8bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d8c0:	4611      	mov	r1, r2
 800d8c2:	f7fb bf27 	b.w	8009714 <_malloc_r>
 800d8c6:	b922      	cbnz	r2, 800d8d2 <_realloc_r+0x20>
 800d8c8:	f7fb fed8 	bl	800967c <_free_r>
 800d8cc:	4625      	mov	r5, r4
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8d2:	f000 f837 	bl	800d944 <_malloc_usable_size_r>
 800d8d6:	42a0      	cmp	r0, r4
 800d8d8:	d20f      	bcs.n	800d8fa <_realloc_r+0x48>
 800d8da:	4621      	mov	r1, r4
 800d8dc:	4638      	mov	r0, r7
 800d8de:	f7fb ff19 	bl	8009714 <_malloc_r>
 800d8e2:	4605      	mov	r5, r0
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d0f2      	beq.n	800d8ce <_realloc_r+0x1c>
 800d8e8:	4631      	mov	r1, r6
 800d8ea:	4622      	mov	r2, r4
 800d8ec:	f7fb feb2 	bl	8009654 <memcpy>
 800d8f0:	4631      	mov	r1, r6
 800d8f2:	4638      	mov	r0, r7
 800d8f4:	f7fb fec2 	bl	800967c <_free_r>
 800d8f8:	e7e9      	b.n	800d8ce <_realloc_r+0x1c>
 800d8fa:	4635      	mov	r5, r6
 800d8fc:	e7e7      	b.n	800d8ce <_realloc_r+0x1c>
	...

0800d900 <_fstat_r>:
 800d900:	b538      	push	{r3, r4, r5, lr}
 800d902:	2300      	movs	r3, #0
 800d904:	4c06      	ldr	r4, [pc, #24]	; (800d920 <_fstat_r+0x20>)
 800d906:	4605      	mov	r5, r0
 800d908:	4608      	mov	r0, r1
 800d90a:	4611      	mov	r1, r2
 800d90c:	6023      	str	r3, [r4, #0]
 800d90e:	f000 f829 	bl	800d964 <_fstat>
 800d912:	1c43      	adds	r3, r0, #1
 800d914:	d102      	bne.n	800d91c <_fstat_r+0x1c>
 800d916:	6823      	ldr	r3, [r4, #0]
 800d918:	b103      	cbz	r3, 800d91c <_fstat_r+0x1c>
 800d91a:	602b      	str	r3, [r5, #0]
 800d91c:	bd38      	pop	{r3, r4, r5, pc}
 800d91e:	bf00      	nop
 800d920:	2000181c 	.word	0x2000181c

0800d924 <_isatty_r>:
 800d924:	b538      	push	{r3, r4, r5, lr}
 800d926:	2300      	movs	r3, #0
 800d928:	4c05      	ldr	r4, [pc, #20]	; (800d940 <_isatty_r+0x1c>)
 800d92a:	4605      	mov	r5, r0
 800d92c:	4608      	mov	r0, r1
 800d92e:	6023      	str	r3, [r4, #0]
 800d930:	f000 f820 	bl	800d974 <_isatty>
 800d934:	1c43      	adds	r3, r0, #1
 800d936:	d102      	bne.n	800d93e <_isatty_r+0x1a>
 800d938:	6823      	ldr	r3, [r4, #0]
 800d93a:	b103      	cbz	r3, 800d93e <_isatty_r+0x1a>
 800d93c:	602b      	str	r3, [r5, #0]
 800d93e:	bd38      	pop	{r3, r4, r5, pc}
 800d940:	2000181c 	.word	0x2000181c

0800d944 <_malloc_usable_size_r>:
 800d944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d948:	1f18      	subs	r0, r3, #4
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	bfbc      	itt	lt
 800d94e:	580b      	ldrlt	r3, [r1, r0]
 800d950:	18c0      	addlt	r0, r0, r3
 800d952:	4770      	bx	lr

0800d954 <_close>:
 800d954:	2258      	movs	r2, #88	; 0x58
 800d956:	4b02      	ldr	r3, [pc, #8]	; (800d960 <_close+0xc>)
 800d958:	f04f 30ff 	mov.w	r0, #4294967295
 800d95c:	601a      	str	r2, [r3, #0]
 800d95e:	4770      	bx	lr
 800d960:	2000181c 	.word	0x2000181c

0800d964 <_fstat>:
 800d964:	2258      	movs	r2, #88	; 0x58
 800d966:	4b02      	ldr	r3, [pc, #8]	; (800d970 <_fstat+0xc>)
 800d968:	f04f 30ff 	mov.w	r0, #4294967295
 800d96c:	601a      	str	r2, [r3, #0]
 800d96e:	4770      	bx	lr
 800d970:	2000181c 	.word	0x2000181c

0800d974 <_isatty>:
 800d974:	2258      	movs	r2, #88	; 0x58
 800d976:	4b02      	ldr	r3, [pc, #8]	; (800d980 <_isatty+0xc>)
 800d978:	2000      	movs	r0, #0
 800d97a:	601a      	str	r2, [r3, #0]
 800d97c:	4770      	bx	lr
 800d97e:	bf00      	nop
 800d980:	2000181c 	.word	0x2000181c

0800d984 <_lseek>:
 800d984:	2258      	movs	r2, #88	; 0x58
 800d986:	4b02      	ldr	r3, [pc, #8]	; (800d990 <_lseek+0xc>)
 800d988:	f04f 30ff 	mov.w	r0, #4294967295
 800d98c:	601a      	str	r2, [r3, #0]
 800d98e:	4770      	bx	lr
 800d990:	2000181c 	.word	0x2000181c

0800d994 <_read>:
 800d994:	2258      	movs	r2, #88	; 0x58
 800d996:	4b02      	ldr	r3, [pc, #8]	; (800d9a0 <_read+0xc>)
 800d998:	f04f 30ff 	mov.w	r0, #4294967295
 800d99c:	601a      	str	r2, [r3, #0]
 800d99e:	4770      	bx	lr
 800d9a0:	2000181c 	.word	0x2000181c

0800d9a4 <_sbrk>:
 800d9a4:	4b04      	ldr	r3, [pc, #16]	; (800d9b8 <_sbrk+0x14>)
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	6819      	ldr	r1, [r3, #0]
 800d9aa:	b909      	cbnz	r1, 800d9b0 <_sbrk+0xc>
 800d9ac:	4903      	ldr	r1, [pc, #12]	; (800d9bc <_sbrk+0x18>)
 800d9ae:	6019      	str	r1, [r3, #0]
 800d9b0:	6818      	ldr	r0, [r3, #0]
 800d9b2:	4402      	add	r2, r0
 800d9b4:	601a      	str	r2, [r3, #0]
 800d9b6:	4770      	bx	lr
 800d9b8:	20000730 	.word	0x20000730
 800d9bc:	20001820 	.word	0x20001820

0800d9c0 <_init>:
 800d9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c2:	bf00      	nop
 800d9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9c6:	bc08      	pop	{r3}
 800d9c8:	469e      	mov	lr, r3
 800d9ca:	4770      	bx	lr

0800d9cc <_fini>:
 800d9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ce:	bf00      	nop
 800d9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9d2:	bc08      	pop	{r3}
 800d9d4:	469e      	mov	lr, r3
 800d9d6:	4770      	bx	lr
